// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_gamerecording_objects.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenSteamworks.Protobuf {

  /// <summary>Holder for reflection information generated from steammessages_gamerecording_objects.proto</summary>
  public static partial class SteammessagesGamerecordingObjectsReflection {

    #region Descriptor
    /// <summary>File descriptor for steammessages_gamerecording_objects.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SteammessagesGamerecordingObjectsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilzdGVhbW1lc3NhZ2VzX2dhbWVyZWNvcmRpbmdfb2JqZWN0cy5wcm90bxog",
            "Z29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8aC2VudW1zLnByb3Rv",
            "IrwCCjBDR2FtZVJlY29yZGluZ19BdWRpb1Nlc3Npb25zQ2hhbmdlZF9Ob3Rp",
            "ZmljYXRpb24SSwoIc2Vzc2lvbnMYASADKAsyOS5DR2FtZVJlY29yZGluZ19B",
            "dWRpb1Nlc3Npb25zQ2hhbmdlZF9Ob3RpZmljYXRpb24uU2Vzc2lvbhq6AQoH",
            "U2Vzc2lvbhIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhEKCWlzX3N5c3Rl",
            "bRgDIAEoCBIQCghpc19tdXRlZBgEIAEoCBIRCglpc19hY3RpdmUYBSABKAgS",
            "EwoLaXNfY2FwdHVyZWQYBiABKAgSEwoLcmVjZW50X3BlYWsYByABKAISDwoH",
            "aXNfZ2FtZRgIIAEoCBIQCghpc19zdGVhbRgJIAEoCBIQCghpc19zYXZlZBgK",
            "IAEoCEIfSAGAAQCqAhdPcGVuU3RlYW13b3Jrcy5Qcm90b2J1Zg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, global::OpenSteamworks.Protobuf.EnumsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification), global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Parser, new[]{ "Sessions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Types.Session), global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Types.Session.Parser, new[]{ "Id", "Name", "IsSystem", "IsMuted", "IsActive", "IsCaptured", "RecentPeak", "IsGame", "IsSteam", "IsSaved" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CGameRecording_AudioSessionsChanged_Notification : pb::IMessage<CGameRecording_AudioSessionsChanged_Notification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGameRecording_AudioSessionsChanged_Notification> _parser = new pb::MessageParser<CGameRecording_AudioSessionsChanged_Notification>(() => new CGameRecording_AudioSessionsChanged_Notification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CGameRecording_AudioSessionsChanged_Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.SteammessagesGamerecordingObjectsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecording_AudioSessionsChanged_Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecording_AudioSessionsChanged_Notification(CGameRecording_AudioSessionsChanged_Notification other) : this() {
      sessions_ = other.sessions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecording_AudioSessionsChanged_Notification Clone() {
      return new CGameRecording_AudioSessionsChanged_Notification(this);
    }

    /// <summary>Field number for the "sessions" field.</summary>
    public const int SessionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Types.Session> _repeated_sessions_codec
        = pb::FieldCodec.ForMessage(10, global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Types.Session.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Types.Session> sessions_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Types.Session>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Types.Session> Sessions {
      get { return sessions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CGameRecording_AudioSessionsChanged_Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CGameRecording_AudioSessionsChanged_Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sessions_.Equals(other.sessions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sessions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      sessions_.WriteTo(output, _repeated_sessions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      sessions_.WriteTo(ref output, _repeated_sessions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += sessions_.CalculateSize(_repeated_sessions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CGameRecording_AudioSessionsChanged_Notification other) {
      if (other == null) {
        return;
      }
      sessions_.Add(other.sessions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sessions_.AddEntriesFrom(input, _repeated_sessions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            sessions_.AddEntriesFrom(ref input, _repeated_sessions_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CGameRecording_AudioSessionsChanged_Notification message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Session : pb::IMessage<Session>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Session> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenSteamworks.Protobuf.CGameRecording_AudioSessionsChanged_Notification.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Session() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Session(Session other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          name_ = other.name_;
          isSystem_ = other.isSystem_;
          isMuted_ = other.isMuted_;
          isActive_ = other.isActive_;
          isCaptured_ = other.isCaptured_;
          recentPeak_ = other.recentPeak_;
          isGame_ = other.isGame_;
          isSteam_ = other.isSteam_;
          isSaved_ = other.isSaved_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Session Clone() {
          return new Session(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static string IdDefaultValue = "";

        private string id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Id {
          get { return id_ ?? IdDefaultValue; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasId {
          get { return id_ != null; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearId() {
          id_ = null;
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "is_system" field.</summary>
        public const int IsSystemFieldNumber = 3;
        private readonly static bool IsSystemDefaultValue = false;

        private bool isSystem_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsSystem {
          get { if ((_hasBits0 & 1) != 0) { return isSystem_; } else { return IsSystemDefaultValue; } }
          set {
            _hasBits0 |= 1;
            isSystem_ = value;
          }
        }
        /// <summary>Gets whether the "is_system" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasIsSystem {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "is_system" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearIsSystem() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "is_muted" field.</summary>
        public const int IsMutedFieldNumber = 4;
        private readonly static bool IsMutedDefaultValue = false;

        private bool isMuted_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsMuted {
          get { if ((_hasBits0 & 2) != 0) { return isMuted_; } else { return IsMutedDefaultValue; } }
          set {
            _hasBits0 |= 2;
            isMuted_ = value;
          }
        }
        /// <summary>Gets whether the "is_muted" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasIsMuted {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "is_muted" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearIsMuted() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "is_active" field.</summary>
        public const int IsActiveFieldNumber = 5;
        private readonly static bool IsActiveDefaultValue = false;

        private bool isActive_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsActive {
          get { if ((_hasBits0 & 4) != 0) { return isActive_; } else { return IsActiveDefaultValue; } }
          set {
            _hasBits0 |= 4;
            isActive_ = value;
          }
        }
        /// <summary>Gets whether the "is_active" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasIsActive {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "is_active" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearIsActive() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "is_captured" field.</summary>
        public const int IsCapturedFieldNumber = 6;
        private readonly static bool IsCapturedDefaultValue = false;

        private bool isCaptured_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsCaptured {
          get { if ((_hasBits0 & 8) != 0) { return isCaptured_; } else { return IsCapturedDefaultValue; } }
          set {
            _hasBits0 |= 8;
            isCaptured_ = value;
          }
        }
        /// <summary>Gets whether the "is_captured" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasIsCaptured {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "is_captured" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearIsCaptured() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "recent_peak" field.</summary>
        public const int RecentPeakFieldNumber = 7;
        private readonly static float RecentPeakDefaultValue = 0F;

        private float recentPeak_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RecentPeak {
          get { if ((_hasBits0 & 16) != 0) { return recentPeak_; } else { return RecentPeakDefaultValue; } }
          set {
            _hasBits0 |= 16;
            recentPeak_ = value;
          }
        }
        /// <summary>Gets whether the "recent_peak" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRecentPeak {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "recent_peak" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRecentPeak() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "is_game" field.</summary>
        public const int IsGameFieldNumber = 8;
        private readonly static bool IsGameDefaultValue = false;

        private bool isGame_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsGame {
          get { if ((_hasBits0 & 32) != 0) { return isGame_; } else { return IsGameDefaultValue; } }
          set {
            _hasBits0 |= 32;
            isGame_ = value;
          }
        }
        /// <summary>Gets whether the "is_game" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasIsGame {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "is_game" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearIsGame() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "is_steam" field.</summary>
        public const int IsSteamFieldNumber = 9;
        private readonly static bool IsSteamDefaultValue = false;

        private bool isSteam_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsSteam {
          get { if ((_hasBits0 & 64) != 0) { return isSteam_; } else { return IsSteamDefaultValue; } }
          set {
            _hasBits0 |= 64;
            isSteam_ = value;
          }
        }
        /// <summary>Gets whether the "is_steam" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasIsSteam {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "is_steam" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearIsSteam() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "is_saved" field.</summary>
        public const int IsSavedFieldNumber = 10;
        private readonly static bool IsSavedDefaultValue = false;

        private bool isSaved_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsSaved {
          get { if ((_hasBits0 & 128) != 0) { return isSaved_; } else { return IsSavedDefaultValue; } }
          set {
            _hasBits0 |= 128;
            isSaved_ = value;
          }
        }
        /// <summary>Gets whether the "is_saved" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasIsSaved {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "is_saved" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearIsSaved() {
          _hasBits0 &= ~128;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Session);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Session other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (IsSystem != other.IsSystem) return false;
          if (IsMuted != other.IsMuted) return false;
          if (IsActive != other.IsActive) return false;
          if (IsCaptured != other.IsCaptured) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecentPeak, other.RecentPeak)) return false;
          if (IsGame != other.IsGame) return false;
          if (IsSteam != other.IsSteam) return false;
          if (IsSaved != other.IsSaved) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasIsSystem) hash ^= IsSystem.GetHashCode();
          if (HasIsMuted) hash ^= IsMuted.GetHashCode();
          if (HasIsActive) hash ^= IsActive.GetHashCode();
          if (HasIsCaptured) hash ^= IsCaptured.GetHashCode();
          if (HasRecentPeak) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecentPeak);
          if (HasIsGame) hash ^= IsGame.GetHashCode();
          if (HasIsSteam) hash ^= IsSteam.GetHashCode();
          if (HasIsSaved) hash ^= IsSaved.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasId) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasIsSystem) {
            output.WriteRawTag(24);
            output.WriteBool(IsSystem);
          }
          if (HasIsMuted) {
            output.WriteRawTag(32);
            output.WriteBool(IsMuted);
          }
          if (HasIsActive) {
            output.WriteRawTag(40);
            output.WriteBool(IsActive);
          }
          if (HasIsCaptured) {
            output.WriteRawTag(48);
            output.WriteBool(IsCaptured);
          }
          if (HasRecentPeak) {
            output.WriteRawTag(61);
            output.WriteFloat(RecentPeak);
          }
          if (HasIsGame) {
            output.WriteRawTag(64);
            output.WriteBool(IsGame);
          }
          if (HasIsSteam) {
            output.WriteRawTag(72);
            output.WriteBool(IsSteam);
          }
          if (HasIsSaved) {
            output.WriteRawTag(80);
            output.WriteBool(IsSaved);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasId) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasIsSystem) {
            output.WriteRawTag(24);
            output.WriteBool(IsSystem);
          }
          if (HasIsMuted) {
            output.WriteRawTag(32);
            output.WriteBool(IsMuted);
          }
          if (HasIsActive) {
            output.WriteRawTag(40);
            output.WriteBool(IsActive);
          }
          if (HasIsCaptured) {
            output.WriteRawTag(48);
            output.WriteBool(IsCaptured);
          }
          if (HasRecentPeak) {
            output.WriteRawTag(61);
            output.WriteFloat(RecentPeak);
          }
          if (HasIsGame) {
            output.WriteRawTag(64);
            output.WriteBool(IsGame);
          }
          if (HasIsSteam) {
            output.WriteRawTag(72);
            output.WriteBool(IsSteam);
          }
          if (HasIsSaved) {
            output.WriteRawTag(80);
            output.WriteBool(IsSaved);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasIsSystem) {
            size += 1 + 1;
          }
          if (HasIsMuted) {
            size += 1 + 1;
          }
          if (HasIsActive) {
            size += 1 + 1;
          }
          if (HasIsCaptured) {
            size += 1 + 1;
          }
          if (HasRecentPeak) {
            size += 1 + 4;
          }
          if (HasIsGame) {
            size += 1 + 1;
          }
          if (HasIsSteam) {
            size += 1 + 1;
          }
          if (HasIsSaved) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Session other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasIsSystem) {
            IsSystem = other.IsSystem;
          }
          if (other.HasIsMuted) {
            IsMuted = other.IsMuted;
          }
          if (other.HasIsActive) {
            IsActive = other.IsActive;
          }
          if (other.HasIsCaptured) {
            IsCaptured = other.IsCaptured;
          }
          if (other.HasRecentPeak) {
            RecentPeak = other.RecentPeak;
          }
          if (other.HasIsGame) {
            IsGame = other.IsGame;
          }
          if (other.HasIsSteam) {
            IsSteam = other.IsSteam;
          }
          if (other.HasIsSaved) {
            IsSaved = other.IsSaved;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                IsSystem = input.ReadBool();
                break;
              }
              case 32: {
                IsMuted = input.ReadBool();
                break;
              }
              case 40: {
                IsActive = input.ReadBool();
                break;
              }
              case 48: {
                IsCaptured = input.ReadBool();
                break;
              }
              case 61: {
                RecentPeak = input.ReadFloat();
                break;
              }
              case 64: {
                IsGame = input.ReadBool();
                break;
              }
              case 72: {
                IsSteam = input.ReadBool();
                break;
              }
              case 80: {
                IsSaved = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                IsSystem = input.ReadBool();
                break;
              }
              case 32: {
                IsMuted = input.ReadBool();
                break;
              }
              case 40: {
                IsActive = input.ReadBool();
                break;
              }
              case 48: {
                IsCaptured = input.ReadBool();
                break;
              }
              case 61: {
                RecentPeak = input.ReadFloat();
                break;
              }
              case 64: {
                IsGame = input.ReadBool();
                break;
              }
              case 72: {
                IsSteam = input.ReadBool();
                break;
              }
              case 80: {
                IsSaved = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
