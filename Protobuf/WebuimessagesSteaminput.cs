// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: webuimessages_steaminput.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenSteamworks.Protobuf {

  /// <summary>Holder for reflection information generated from webuimessages_steaminput.proto</summary>
  public static partial class WebuimessagesSteaminputReflection {

    #region Descriptor
    /// <summary>File descriptor for webuimessages_steaminput.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WebuimessagesSteaminputReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch53ZWJ1aW1lc3NhZ2VzX3N0ZWFtaW5wdXQucHJvdG8aIGdvb2dsZS9wcm90",
            "b2J1Zi9kZXNjcmlwdG9yLnByb3RvGhhzdGVhbW1lc3NhZ2VzX2Jhc2UucHJv",
            "dG8aGHdlYnVpbWVzc2FnZXNfYmFzZS5wcm90byL1Bgo8Q1N0ZWFtSW5wdXRT",
            "ZXJ2aWNlX0NvbnRyb2xsZXJCdXR0b25TdGF0ZUNoYW5nZWRfTm90aWZpY2F0",
            "aW9uEhgKEGNvbnRyb2xsZXJfaW5kZXgYASABKA0SDwoHZHBhZF91cBgCIAEo",
            "CBIRCglkcGFkX2Rvd24YAyABKAgSEQoJZHBhZF9sZWZ0GAQgASgIEhIKCmRw",
            "YWRfcmlnaHQYBSABKAgSFAoMYnV0dG9uX3NvdXRoGAYgASgIEhMKC2J1dHRv",
            "bl9lYXN0GAcgASgIEhMKC2J1dHRvbl93ZXN0GAggASgIEhQKDGJ1dHRvbl9u",
            "b3J0aBgJIAEoCBIWCg5idXR0b25fYmFjdmlldxgKIAEoCBIcChRidXR0b25f",
            "c3RhcnRfb3B0aW9ucxgLIAEoCBIUCgxidXR0b25fc3RlYW0YDCABKAgSGQoR",
            "YnV0dG9uX3F1aWNhY2Nlc3MYDSABKAgSGwoTYnV0dG9uX211dGVfY2FwdHVy",
            "ZRgOIAEoCBIWCg5sZWZ0X3N0aWNjbGljaxgPIAEoCBIWCg5sZWZ0X3N0aWN0",
            "b3VjaBgQIAEoCBIYChBsZWZ0X3N0aWNkZWZsZWN0GBEgASgIEhcKD3JpZ2h0",
            "X3N0aWNjbGljaxgSIAEoCBIXCg9yaWdodF9zdGljdG91Y2gYEyABKAgSGQoR",
            "cmlnaHRfc3RpY2RlZmxlY3QYFCABKAgSHQoVY2VudGVyX3RyYWNrcGFkX3Rv",
            "dWNoGBUgASgIEh0KFWNlbnRlcl90cmFja3BhZF9jbGljaxgWIAEoCBIbChNs",
            "ZWZ0X3RyYWNrcGFkX3RvdWNoGBcgASgIEhsKE2xlZnRfdHJhY2twYWRfY2xp",
            "Y2sYGCABKAgSHAoUcmlnaHRfdHJhY2twYWRfdG91Y2gYGSABKAgSHAoUcmln",
            "aHRfdHJhY2twYWRfY2xpY2sYGiABKAgSEwoLbGVmdF9idW1wZXIYGyABKAgS",
            "FAoMbGVmdF90cmlnZ2VyGBwgASgIEgoKAmw0GB0gASgIEgoKAmw1GB4gASgI",
            "EhAKCGxlZnRfYXV4GB8gASgIEhQKDHJpZ2h0X2J1bXBlchggIAEoCBIVCg1y",
            "aWdodF90cmlnZ2VyGCEgASgIEgoKAnI0GCIgASgIEgoKAnI1GCMgASgIEhEK",
            "CXJpZ2h0X2F1eBgkIAEoCCIpChFDb250cm9sbGVyVmVjdG9yMhIJCgF4GAEg",
            "ASgCEgkKAXkYAiABKAIiNAoRQ29udHJvbGxlclZlY3RvcjMSCQoBeBgBIAEo",
            "AhIJCgF5GAIgASgCEgkKAXoYAyABKAIiQgoUQ29udHJvbGxlclF1YXRlcm5p",
            "b24SCQoBdxgBIAEoAhIJCgF4GAIgASgCEgkKAXkYAyABKAISCQoBehgEIAEo",
            "AiJFChlDb250cm9sbGVyR3lyb0V1bGVyQW5nbGVzEg0KBXBpdGNoGAEgASgC",
            "EgsKA3lhdxgCIAEoAhIMCgRyb2xsGAMgASgCIpoDCjlDU3RlYW1JbnB1dFNl",
            "cnZpY2VfQ29udHJvbGxlckF4ZXNTdGF0ZUNoYW5nZV9Ob3RpZmljYXRpb24S",
            "GAoQY29udHJvbGxlcl9pbmRleBgBIAEoDRInCgtqb3lzdGljbGVmdBgCIAEo",
            "CzISLkNvbnRyb2xsZXJWZWN0b3IyEigKDGpveXN0aWNyaWdodBgDIAEoCzIS",
            "LkNvbnRyb2xsZXJWZWN0b3IyEikKDXRyYWNrcGFkX2xlZnQYBCABKAsyEi5D",
            "b250cm9sbGVyVmVjdG9yMhIqCg50cmFja3BhZF9yaWdodBgFIAEoCzISLkNv",
            "bnRyb2xsZXJWZWN0b3IyEisKD3RyYWNrcGFkX2NlbnRlchgGIAEoCzISLkNv",
            "bnRyb2xsZXJWZWN0b3IyEh4KFnRyYWNrcGFkX3ByZXNzdXJlX2xlZnQYByAB",
            "KAISHwoXdHJhY2twYWRfcHJlc3N1cmVfcmlnaHQYCCABKAISFAoMdHJpZ2dl",
            "cl9sZWZ0GAkgASgCEhUKDXRyaWdnZXJfcmlnaHQYCiABKAIi8AEKNUNTdGVh",
            "bUlucHV0U2VydmljZV9HeXJvUXVhdGVybmlvbkNoYW5nZWRfTm90aWZpY2F0",
            "aW9uEhgKEGNvbnRyb2xsZXJfaW5kZXgYASABKA0SEQoJaW11X2luZGV4GAIg",
            "ASgNEjIKE2d5cm9fcmF3X3F1YXRlcm5pb24YAyABKAsyFS5Db250cm9sbGVy",
            "UXVhdGVybmlvbhI3ChhneXJvX2ZpbHRlcmVkX3F1YXRlcm5pb24YBCABKAsy",
            "FS5Db250cm9sbGVyUXVhdGVybmlvbhIdChVpbXVfc2Vuc29yX2RlbHRhX3Rp",
            "bWUYBSABKA0izAEKMENTdGVhbUlucHV0U2VydmljZV9HeXJvU3BlZWRDaGFu",
            "Z2VkX05vdGlmaWNhdGlvbhIYChBjb250cm9sbGVyX2luZGV4GAEgASgNEhEK",
            "CWltdV9pbmRleBgCIAEoDRIyCg5neXJvX3Jhd19zcGVlZBgDIAEoCzIaLkNv",
            "bnRyb2xsZXJHeXJvRXVsZXJBbmdsZXMSNwoTZ3lyb19maWx0ZXJlZF9zcGVl",
            "ZBgEIAEoCzIaLkNvbnRyb2xsZXJHeXJvRXVsZXJBbmdsZXMixAEKOENTdGVh",
            "bUlucHV0U2VydmljZV9HeXJvQWNjZWxlcm9tZXRlckNoYW5nZWRfTm90aWZp",
            "Y2F0aW9uEhgKEGNvbnRyb2xsZXJfaW5kZXgYASABKA0SEQoJaW11X2luZGV4",
            "GAIgASgNEisKD2FjY2VsZXJvbXRlcl8xZxgEIAEoCzISLkNvbnRyb2xsZXJW",
            "ZWN0b3IzEi4KEnRydXN0ZWRfZ3Jhdml0eV8xZxgFIAEoCzISLkNvbnRyb2xs",
            "ZXJWZWN0b3IzIrEBCi9DU3RlYW1JbnB1dFNlcnZpY2VfR3lyb0NhbGlicmF0",
            "aW9uX05vdGlmaWNhdGlvbhIYChBjb250cm9sbGVyX2luZGV4GAEgASgNEhEK",
            "CWltdV9pbmRleBgCIAEoDRIaChJhY2NlbGVyb210ZXJfbm9pc2UYAyABKAIS",
            "FwoPZ3lyb3Njb3BlX25vaXNlGAQgASgCEhwKFGNhbGlicmF0aW9uX3Byb2dy",
            "ZXNzGAUgASgCIl0KLkNTdGVhbUlucHV0U2VydmljZV9Db250cm9sbGVyU3Rh",
            "dGVGbG93X1JlcXVlc3QSGAoQY29udHJvbGxlcl9pbmRleBgBIAEoDRIRCglm",
            "bG93X21vZGUYAiABKA0iMQovQ1N0ZWFtSW5wdXRTZXJ2aWNlX0NvbnRyb2xs",
            "ZXJTdGF0ZUZsb3dfUmVzcG9uc2UymQcKEVN0ZWFtSW5wdXRNYW5hZ2VyEmsK",
            "GE5vdGlmeUJ1dHRvblN0YXRlQ2hhbmdlZBI9LkNTdGVhbUlucHV0U2Vydmlj",
            "ZV9Db250cm9sbGVyQnV0dG9uU3RhdGVDaGFuZ2VkX05vdGlmaWNhdGlvbhoQ",
            "LldlYlVJTm9SZXNwb25zZRJmChZOb3RpZnlBeGVzU3RhdGVDaGFuZ2VkEjou",
            "Q1N0ZWFtSW5wdXRTZXJ2aWNlX0NvbnRyb2xsZXJBeGVzU3RhdGVDaGFuZ2Vf",
            "Tm90aWZpY2F0aW9uGhAuV2ViVUlOb1Jlc3BvbnNlEmwKIE5vdGlmeUd5cm9R",
            "dWF0ZXJuaW9uU3RhdGVDaGFuZ2VkEjYuQ1N0ZWFtSW5wdXRTZXJ2aWNlX0d5",
            "cm9RdWF0ZXJuaW9uQ2hhbmdlZF9Ob3RpZmljYXRpb24aEC5XZWJVSU5vUmVz",
            "cG9uc2USYgobTm90aWZ5R3lyb1NwZWVkU3RhdGVDaGFuZ2VkEjEuQ1N0ZWFt",
            "SW5wdXRTZXJ2aWNlX0d5cm9TcGVlZENoYW5nZWRfTm90aWZpY2F0aW9uGhAu",
            "V2ViVUlOb1Jlc3BvbnNlEnIKI05vdGlmeUd5cm9BY2NlbGVyb21ldGVyU3Rh",
            "dGVDaGFuZ2VkEjkuQ1N0ZWFtSW5wdXRTZXJ2aWNlX0d5cm9BY2NlbGVyb21l",
            "dGVyQ2hhbmdlZF9Ob3RpZmljYXRpb24aEC5XZWJVSU5vUmVzcG9uc2USZwoh",
            "Tm90aWZ5R3lyb0NhbGlicmF0aW9uU3RhdGVDaGFuZ2VkEjAuQ1N0ZWFtSW5w",
            "dXRTZXJ2aWNlX0d5cm9DYWxpYnJhdGlvbl9Ob3RpZmljYXRpb24aEC5XZWJV",
            "SU5vUmVzcG9uc2USfQoYU3RhcnRDb250cm9sbGVyU3RhdGVGbG93Ei8uQ1N0",
            "ZWFtSW5wdXRTZXJ2aWNlX0NvbnRyb2xsZXJTdGF0ZUZsb3dfUmVxdWVzdBow",
            "LkNTdGVhbUlucHV0U2VydmljZV9Db250cm9sbGVyU3RhdGVGbG93X1Jlc3Bv",
            "bnNlEnsKFkVuZENvbnRyb2xsZXJTdGF0ZUZsb3cSLy5DU3RlYW1JbnB1dFNl",
            "cnZpY2VfQ29udHJvbGxlclN0YXRlRmxvd19SZXF1ZXN0GjAuQ1N0ZWFtSW5w",
            "dXRTZXJ2aWNlX0NvbnRyb2xsZXJTdGF0ZUZsb3dfUmVzcG9uc2UaBICXIgJC",
            "H0gBgAEBqgIXT3BlblN0ZWFtd29ya3MuUHJvdG9idWY="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, global::OpenSteamworks.Protobuf.SteammessagesBaseReflection.Descriptor, global::OpenSteamworks.Protobuf.WebuimessagesBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CSteamInputService_ControllerButtonStateChanged_Notification), global::OpenSteamworks.Protobuf.CSteamInputService_ControllerButtonStateChanged_Notification.Parser, new[]{ "ControllerIndex", "DpadUp", "DpadDown", "DpadLeft", "DpadRight", "ButtonSouth", "ButtonEast", "ButtonWest", "ButtonNorth", "ButtonBacview", "ButtonStartOptions", "ButtonSteam", "ButtonQuicaccess", "ButtonMuteCapture", "LeftSticclick", "LeftStictouch", "LeftSticdeflect", "RightSticclick", "RightStictouch", "RightSticdeflect", "CenterTrackpadTouch", "CenterTrackpadClick", "LeftTrackpadTouch", "LeftTrackpadClick", "RightTrackpadTouch", "RightTrackpadClick", "LeftBumper", "LeftTrigger", "L4", "L5", "LeftAux", "RightBumper", "RightTrigger", "R4", "R5", "RightAux" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.ControllerVector2), global::OpenSteamworks.Protobuf.ControllerVector2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.ControllerVector3), global::OpenSteamworks.Protobuf.ControllerVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.ControllerQuaternion), global::OpenSteamworks.Protobuf.ControllerQuaternion.Parser, new[]{ "W", "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles), global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles.Parser, new[]{ "Pitch", "Yaw", "Roll" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CSteamInputService_ControllerAxesStateChange_Notification), global::OpenSteamworks.Protobuf.CSteamInputService_ControllerAxesStateChange_Notification.Parser, new[]{ "ControllerIndex", "Joysticleft", "Joysticright", "TrackpadLeft", "TrackpadRight", "TrackpadCenter", "TrackpadPressureLeft", "TrackpadPressureRight", "TriggerLeft", "TriggerRight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CSteamInputService_GyroQuaternionChanged_Notification), global::OpenSteamworks.Protobuf.CSteamInputService_GyroQuaternionChanged_Notification.Parser, new[]{ "ControllerIndex", "ImuIndex", "GyroRawQuaternion", "GyroFilteredQuaternion", "ImuSensorDeltaTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CSteamInputService_GyroSpeedChanged_Notification), global::OpenSteamworks.Protobuf.CSteamInputService_GyroSpeedChanged_Notification.Parser, new[]{ "ControllerIndex", "ImuIndex", "GyroRawSpeed", "GyroFilteredSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CSteamInputService_GyroAccelerometerChanged_Notification), global::OpenSteamworks.Protobuf.CSteamInputService_GyroAccelerometerChanged_Notification.Parser, new[]{ "ControllerIndex", "ImuIndex", "Acceleromter1G", "TrustedGravity1G" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CSteamInputService_GyroCalibration_Notification), global::OpenSteamworks.Protobuf.CSteamInputService_GyroCalibration_Notification.Parser, new[]{ "ControllerIndex", "ImuIndex", "AcceleromterNoise", "GyroscopeNoise", "CalibrationProgress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CSteamInputService_ControllerStateFlow_Request), global::OpenSteamworks.Protobuf.CSteamInputService_ControllerStateFlow_Request.Parser, new[]{ "ControllerIndex", "FlowMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CSteamInputService_ControllerStateFlow_Response), global::OpenSteamworks.Protobuf.CSteamInputService_ControllerStateFlow_Response.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSteamInputService_ControllerButtonStateChanged_Notification : pb::IMessage<CSteamInputService_ControllerButtonStateChanged_Notification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSteamInputService_ControllerButtonStateChanged_Notification> _parser = new pb::MessageParser<CSteamInputService_ControllerButtonStateChanged_Notification>(() => new CSteamInputService_ControllerButtonStateChanged_Notification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSteamInputService_ControllerButtonStateChanged_Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerButtonStateChanged_Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerButtonStateChanged_Notification(CSteamInputService_ControllerButtonStateChanged_Notification other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      controllerIndex_ = other.controllerIndex_;
      dpadUp_ = other.dpadUp_;
      dpadDown_ = other.dpadDown_;
      dpadLeft_ = other.dpadLeft_;
      dpadRight_ = other.dpadRight_;
      buttonSouth_ = other.buttonSouth_;
      buttonEast_ = other.buttonEast_;
      buttonWest_ = other.buttonWest_;
      buttonNorth_ = other.buttonNorth_;
      buttonBacview_ = other.buttonBacview_;
      buttonStartOptions_ = other.buttonStartOptions_;
      buttonSteam_ = other.buttonSteam_;
      buttonQuicaccess_ = other.buttonQuicaccess_;
      buttonMuteCapture_ = other.buttonMuteCapture_;
      leftSticclick_ = other.leftSticclick_;
      leftStictouch_ = other.leftStictouch_;
      leftSticdeflect_ = other.leftSticdeflect_;
      rightSticclick_ = other.rightSticclick_;
      rightStictouch_ = other.rightStictouch_;
      rightSticdeflect_ = other.rightSticdeflect_;
      centerTrackpadTouch_ = other.centerTrackpadTouch_;
      centerTrackpadClick_ = other.centerTrackpadClick_;
      leftTrackpadTouch_ = other.leftTrackpadTouch_;
      leftTrackpadClick_ = other.leftTrackpadClick_;
      rightTrackpadTouch_ = other.rightTrackpadTouch_;
      rightTrackpadClick_ = other.rightTrackpadClick_;
      leftBumper_ = other.leftBumper_;
      leftTrigger_ = other.leftTrigger_;
      l4_ = other.l4_;
      l5_ = other.l5_;
      leftAux_ = other.leftAux_;
      rightBumper_ = other.rightBumper_;
      rightTrigger_ = other.rightTrigger_;
      r4_ = other.r4_;
      r5_ = other.r5_;
      rightAux_ = other.rightAux_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerButtonStateChanged_Notification Clone() {
      return new CSteamInputService_ControllerButtonStateChanged_Notification(this);
    }

    /// <summary>Field number for the "controller_index" field.</summary>
    public const int ControllerIndexFieldNumber = 1;
    private readonly static uint ControllerIndexDefaultValue = 0;

    private uint controllerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ControllerIndex {
      get { if ((_hasBits0 & 1) != 0) { return controllerIndex_; } else { return ControllerIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        controllerIndex_ = value;
      }
    }
    /// <summary>Gets whether the "controller_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControllerIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "controller_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControllerIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dpad_up" field.</summary>
    public const int DpadUpFieldNumber = 2;
    private readonly static bool DpadUpDefaultValue = false;

    private bool dpadUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DpadUp {
      get { if ((_hasBits0 & 2) != 0) { return dpadUp_; } else { return DpadUpDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dpadUp_ = value;
      }
    }
    /// <summary>Gets whether the "dpad_up" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDpadUp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "dpad_up" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDpadUp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "dpad_down" field.</summary>
    public const int DpadDownFieldNumber = 3;
    private readonly static bool DpadDownDefaultValue = false;

    private bool dpadDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DpadDown {
      get { if ((_hasBits0 & 4) != 0) { return dpadDown_; } else { return DpadDownDefaultValue; } }
      set {
        _hasBits0 |= 4;
        dpadDown_ = value;
      }
    }
    /// <summary>Gets whether the "dpad_down" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDpadDown {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "dpad_down" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDpadDown() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "dpad_left" field.</summary>
    public const int DpadLeftFieldNumber = 4;
    private readonly static bool DpadLeftDefaultValue = false;

    private bool dpadLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DpadLeft {
      get { if ((_hasBits0 & 8) != 0) { return dpadLeft_; } else { return DpadLeftDefaultValue; } }
      set {
        _hasBits0 |= 8;
        dpadLeft_ = value;
      }
    }
    /// <summary>Gets whether the "dpad_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDpadLeft {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "dpad_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDpadLeft() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "dpad_right" field.</summary>
    public const int DpadRightFieldNumber = 5;
    private readonly static bool DpadRightDefaultValue = false;

    private bool dpadRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DpadRight {
      get { if ((_hasBits0 & 16) != 0) { return dpadRight_; } else { return DpadRightDefaultValue; } }
      set {
        _hasBits0 |= 16;
        dpadRight_ = value;
      }
    }
    /// <summary>Gets whether the "dpad_right" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDpadRight {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "dpad_right" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDpadRight() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "button_south" field.</summary>
    public const int ButtonSouthFieldNumber = 6;
    private readonly static bool ButtonSouthDefaultValue = false;

    private bool buttonSouth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonSouth {
      get { if ((_hasBits0 & 32) != 0) { return buttonSouth_; } else { return ButtonSouthDefaultValue; } }
      set {
        _hasBits0 |= 32;
        buttonSouth_ = value;
      }
    }
    /// <summary>Gets whether the "button_south" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonSouth {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "button_south" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonSouth() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "button_east" field.</summary>
    public const int ButtonEastFieldNumber = 7;
    private readonly static bool ButtonEastDefaultValue = false;

    private bool buttonEast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonEast {
      get { if ((_hasBits0 & 64) != 0) { return buttonEast_; } else { return ButtonEastDefaultValue; } }
      set {
        _hasBits0 |= 64;
        buttonEast_ = value;
      }
    }
    /// <summary>Gets whether the "button_east" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonEast {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "button_east" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonEast() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "button_west" field.</summary>
    public const int ButtonWestFieldNumber = 8;
    private readonly static bool ButtonWestDefaultValue = false;

    private bool buttonWest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonWest {
      get { if ((_hasBits0 & 128) != 0) { return buttonWest_; } else { return ButtonWestDefaultValue; } }
      set {
        _hasBits0 |= 128;
        buttonWest_ = value;
      }
    }
    /// <summary>Gets whether the "button_west" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonWest {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "button_west" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonWest() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "button_north" field.</summary>
    public const int ButtonNorthFieldNumber = 9;
    private readonly static bool ButtonNorthDefaultValue = false;

    private bool buttonNorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonNorth {
      get { if ((_hasBits0 & 256) != 0) { return buttonNorth_; } else { return ButtonNorthDefaultValue; } }
      set {
        _hasBits0 |= 256;
        buttonNorth_ = value;
      }
    }
    /// <summary>Gets whether the "button_north" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonNorth {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "button_north" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonNorth() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "button_bacview" field.</summary>
    public const int ButtonBacviewFieldNumber = 10;
    private readonly static bool ButtonBacviewDefaultValue = false;

    private bool buttonBacview_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonBacview {
      get { if ((_hasBits0 & 512) != 0) { return buttonBacview_; } else { return ButtonBacviewDefaultValue; } }
      set {
        _hasBits0 |= 512;
        buttonBacview_ = value;
      }
    }
    /// <summary>Gets whether the "button_bacview" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonBacview {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "button_bacview" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonBacview() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "button_start_options" field.</summary>
    public const int ButtonStartOptionsFieldNumber = 11;
    private readonly static bool ButtonStartOptionsDefaultValue = false;

    private bool buttonStartOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonStartOptions {
      get { if ((_hasBits0 & 1024) != 0) { return buttonStartOptions_; } else { return ButtonStartOptionsDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        buttonStartOptions_ = value;
      }
    }
    /// <summary>Gets whether the "button_start_options" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonStartOptions {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "button_start_options" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonStartOptions() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "button_steam" field.</summary>
    public const int ButtonSteamFieldNumber = 12;
    private readonly static bool ButtonSteamDefaultValue = false;

    private bool buttonSteam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonSteam {
      get { if ((_hasBits0 & 2048) != 0) { return buttonSteam_; } else { return ButtonSteamDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        buttonSteam_ = value;
      }
    }
    /// <summary>Gets whether the "button_steam" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonSteam {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "button_steam" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonSteam() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "button_quicaccess" field.</summary>
    public const int ButtonQuicaccessFieldNumber = 13;
    private readonly static bool ButtonQuicaccessDefaultValue = false;

    private bool buttonQuicaccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonQuicaccess {
      get { if ((_hasBits0 & 4096) != 0) { return buttonQuicaccess_; } else { return ButtonQuicaccessDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        buttonQuicaccess_ = value;
      }
    }
    /// <summary>Gets whether the "button_quicaccess" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonQuicaccess {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "button_quicaccess" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonQuicaccess() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "button_mute_capture" field.</summary>
    public const int ButtonMuteCaptureFieldNumber = 14;
    private readonly static bool ButtonMuteCaptureDefaultValue = false;

    private bool buttonMuteCapture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ButtonMuteCapture {
      get { if ((_hasBits0 & 8192) != 0) { return buttonMuteCapture_; } else { return ButtonMuteCaptureDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        buttonMuteCapture_ = value;
      }
    }
    /// <summary>Gets whether the "button_mute_capture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasButtonMuteCapture {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "button_mute_capture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearButtonMuteCapture() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "left_sticclick" field.</summary>
    public const int LeftSticclickFieldNumber = 15;
    private readonly static bool LeftSticclickDefaultValue = false;

    private bool leftSticclick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeftSticclick {
      get { if ((_hasBits0 & 16384) != 0) { return leftSticclick_; } else { return LeftSticclickDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        leftSticclick_ = value;
      }
    }
    /// <summary>Gets whether the "left_sticclick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftSticclick {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "left_sticclick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftSticclick() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "left_stictouch" field.</summary>
    public const int LeftStictouchFieldNumber = 16;
    private readonly static bool LeftStictouchDefaultValue = false;

    private bool leftStictouch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeftStictouch {
      get { if ((_hasBits0 & 32768) != 0) { return leftStictouch_; } else { return LeftStictouchDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        leftStictouch_ = value;
      }
    }
    /// <summary>Gets whether the "left_stictouch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftStictouch {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "left_stictouch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftStictouch() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "left_sticdeflect" field.</summary>
    public const int LeftSticdeflectFieldNumber = 17;
    private readonly static bool LeftSticdeflectDefaultValue = false;

    private bool leftSticdeflect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeftSticdeflect {
      get { if ((_hasBits0 & 65536) != 0) { return leftSticdeflect_; } else { return LeftSticdeflectDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        leftSticdeflect_ = value;
      }
    }
    /// <summary>Gets whether the "left_sticdeflect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftSticdeflect {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "left_sticdeflect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftSticdeflect() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "right_sticclick" field.</summary>
    public const int RightSticclickFieldNumber = 18;
    private readonly static bool RightSticclickDefaultValue = false;

    private bool rightSticclick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RightSticclick {
      get { if ((_hasBits0 & 131072) != 0) { return rightSticclick_; } else { return RightSticclickDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        rightSticclick_ = value;
      }
    }
    /// <summary>Gets whether the "right_sticclick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRightSticclick {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "right_sticclick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRightSticclick() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "right_stictouch" field.</summary>
    public const int RightStictouchFieldNumber = 19;
    private readonly static bool RightStictouchDefaultValue = false;

    private bool rightStictouch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RightStictouch {
      get { if ((_hasBits0 & 262144) != 0) { return rightStictouch_; } else { return RightStictouchDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        rightStictouch_ = value;
      }
    }
    /// <summary>Gets whether the "right_stictouch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRightStictouch {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "right_stictouch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRightStictouch() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "right_sticdeflect" field.</summary>
    public const int RightSticdeflectFieldNumber = 20;
    private readonly static bool RightSticdeflectDefaultValue = false;

    private bool rightSticdeflect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RightSticdeflect {
      get { if ((_hasBits0 & 524288) != 0) { return rightSticdeflect_; } else { return RightSticdeflectDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        rightSticdeflect_ = value;
      }
    }
    /// <summary>Gets whether the "right_sticdeflect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRightSticdeflect {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "right_sticdeflect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRightSticdeflect() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "center_trackpad_touch" field.</summary>
    public const int CenterTrackpadTouchFieldNumber = 21;
    private readonly static bool CenterTrackpadTouchDefaultValue = false;

    private bool centerTrackpadTouch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CenterTrackpadTouch {
      get { if ((_hasBits0 & 1048576) != 0) { return centerTrackpadTouch_; } else { return CenterTrackpadTouchDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        centerTrackpadTouch_ = value;
      }
    }
    /// <summary>Gets whether the "center_trackpad_touch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCenterTrackpadTouch {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "center_trackpad_touch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCenterTrackpadTouch() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "center_trackpad_click" field.</summary>
    public const int CenterTrackpadClickFieldNumber = 22;
    private readonly static bool CenterTrackpadClickDefaultValue = false;

    private bool centerTrackpadClick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CenterTrackpadClick {
      get { if ((_hasBits0 & 2097152) != 0) { return centerTrackpadClick_; } else { return CenterTrackpadClickDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        centerTrackpadClick_ = value;
      }
    }
    /// <summary>Gets whether the "center_trackpad_click" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCenterTrackpadClick {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "center_trackpad_click" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCenterTrackpadClick() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "left_trackpad_touch" field.</summary>
    public const int LeftTrackpadTouchFieldNumber = 23;
    private readonly static bool LeftTrackpadTouchDefaultValue = false;

    private bool leftTrackpadTouch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeftTrackpadTouch {
      get { if ((_hasBits0 & 4194304) != 0) { return leftTrackpadTouch_; } else { return LeftTrackpadTouchDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        leftTrackpadTouch_ = value;
      }
    }
    /// <summary>Gets whether the "left_trackpad_touch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftTrackpadTouch {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "left_trackpad_touch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftTrackpadTouch() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "left_trackpad_click" field.</summary>
    public const int LeftTrackpadClickFieldNumber = 24;
    private readonly static bool LeftTrackpadClickDefaultValue = false;

    private bool leftTrackpadClick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeftTrackpadClick {
      get { if ((_hasBits0 & 8388608) != 0) { return leftTrackpadClick_; } else { return LeftTrackpadClickDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        leftTrackpadClick_ = value;
      }
    }
    /// <summary>Gets whether the "left_trackpad_click" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftTrackpadClick {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "left_trackpad_click" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftTrackpadClick() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "right_trackpad_touch" field.</summary>
    public const int RightTrackpadTouchFieldNumber = 25;
    private readonly static bool RightTrackpadTouchDefaultValue = false;

    private bool rightTrackpadTouch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RightTrackpadTouch {
      get { if ((_hasBits0 & 16777216) != 0) { return rightTrackpadTouch_; } else { return RightTrackpadTouchDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        rightTrackpadTouch_ = value;
      }
    }
    /// <summary>Gets whether the "right_trackpad_touch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRightTrackpadTouch {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "right_trackpad_touch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRightTrackpadTouch() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "right_trackpad_click" field.</summary>
    public const int RightTrackpadClickFieldNumber = 26;
    private readonly static bool RightTrackpadClickDefaultValue = false;

    private bool rightTrackpadClick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RightTrackpadClick {
      get { if ((_hasBits0 & 33554432) != 0) { return rightTrackpadClick_; } else { return RightTrackpadClickDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        rightTrackpadClick_ = value;
      }
    }
    /// <summary>Gets whether the "right_trackpad_click" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRightTrackpadClick {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "right_trackpad_click" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRightTrackpadClick() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "left_bumper" field.</summary>
    public const int LeftBumperFieldNumber = 27;
    private readonly static bool LeftBumperDefaultValue = false;

    private bool leftBumper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeftBumper {
      get { if ((_hasBits0 & 67108864) != 0) { return leftBumper_; } else { return LeftBumperDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        leftBumper_ = value;
      }
    }
    /// <summary>Gets whether the "left_bumper" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftBumper {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "left_bumper" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftBumper() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "left_trigger" field.</summary>
    public const int LeftTriggerFieldNumber = 28;
    private readonly static bool LeftTriggerDefaultValue = false;

    private bool leftTrigger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeftTrigger {
      get { if ((_hasBits0 & 134217728) != 0) { return leftTrigger_; } else { return LeftTriggerDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        leftTrigger_ = value;
      }
    }
    /// <summary>Gets whether the "left_trigger" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftTrigger {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "left_trigger" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftTrigger() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "l4" field.</summary>
    public const int L4FieldNumber = 29;
    private readonly static bool L4DefaultValue = false;

    private bool l4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool L4 {
      get { if ((_hasBits0 & 268435456) != 0) { return l4_; } else { return L4DefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        l4_ = value;
      }
    }
    /// <summary>Gets whether the "l4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasL4 {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "l4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearL4() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "l5" field.</summary>
    public const int L5FieldNumber = 30;
    private readonly static bool L5DefaultValue = false;

    private bool l5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool L5 {
      get { if ((_hasBits0 & 536870912) != 0) { return l5_; } else { return L5DefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        l5_ = value;
      }
    }
    /// <summary>Gets whether the "l5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasL5 {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "l5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearL5() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "left_aux" field.</summary>
    public const int LeftAuxFieldNumber = 31;
    private readonly static bool LeftAuxDefaultValue = false;

    private bool leftAux_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeftAux {
      get { if ((_hasBits0 & 1073741824) != 0) { return leftAux_; } else { return LeftAuxDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        leftAux_ = value;
      }
    }
    /// <summary>Gets whether the "left_aux" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeftAux {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "left_aux" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeftAux() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "right_bumper" field.</summary>
    public const int RightBumperFieldNumber = 32;
    private readonly static bool RightBumperDefaultValue = false;

    private bool rightBumper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RightBumper {
      get { if ((_hasBits0 & -2147483648) != 0) { return rightBumper_; } else { return RightBumperDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        rightBumper_ = value;
      }
    }
    /// <summary>Gets whether the "right_bumper" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRightBumper {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "right_bumper" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRightBumper() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "right_trigger" field.</summary>
    public const int RightTriggerFieldNumber = 33;
    private readonly static bool RightTriggerDefaultValue = false;

    private bool rightTrigger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RightTrigger {
      get { if ((_hasBits1 & 1) != 0) { return rightTrigger_; } else { return RightTriggerDefaultValue; } }
      set {
        _hasBits1 |= 1;
        rightTrigger_ = value;
      }
    }
    /// <summary>Gets whether the "right_trigger" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRightTrigger {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "right_trigger" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRightTrigger() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "r4" field.</summary>
    public const int R4FieldNumber = 34;
    private readonly static bool R4DefaultValue = false;

    private bool r4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool R4 {
      get { if ((_hasBits1 & 2) != 0) { return r4_; } else { return R4DefaultValue; } }
      set {
        _hasBits1 |= 2;
        r4_ = value;
      }
    }
    /// <summary>Gets whether the "r4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasR4 {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "r4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearR4() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "r5" field.</summary>
    public const int R5FieldNumber = 35;
    private readonly static bool R5DefaultValue = false;

    private bool r5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool R5 {
      get { if ((_hasBits1 & 4) != 0) { return r5_; } else { return R5DefaultValue; } }
      set {
        _hasBits1 |= 4;
        r5_ = value;
      }
    }
    /// <summary>Gets whether the "r5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasR5 {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "r5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearR5() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "right_aux" field.</summary>
    public const int RightAuxFieldNumber = 36;
    private readonly static bool RightAuxDefaultValue = false;

    private bool rightAux_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RightAux {
      get { if ((_hasBits1 & 8) != 0) { return rightAux_; } else { return RightAuxDefaultValue; } }
      set {
        _hasBits1 |= 8;
        rightAux_ = value;
      }
    }
    /// <summary>Gets whether the "right_aux" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRightAux {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "right_aux" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRightAux() {
      _hasBits1 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSteamInputService_ControllerButtonStateChanged_Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSteamInputService_ControllerButtonStateChanged_Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControllerIndex != other.ControllerIndex) return false;
      if (DpadUp != other.DpadUp) return false;
      if (DpadDown != other.DpadDown) return false;
      if (DpadLeft != other.DpadLeft) return false;
      if (DpadRight != other.DpadRight) return false;
      if (ButtonSouth != other.ButtonSouth) return false;
      if (ButtonEast != other.ButtonEast) return false;
      if (ButtonWest != other.ButtonWest) return false;
      if (ButtonNorth != other.ButtonNorth) return false;
      if (ButtonBacview != other.ButtonBacview) return false;
      if (ButtonStartOptions != other.ButtonStartOptions) return false;
      if (ButtonSteam != other.ButtonSteam) return false;
      if (ButtonQuicaccess != other.ButtonQuicaccess) return false;
      if (ButtonMuteCapture != other.ButtonMuteCapture) return false;
      if (LeftSticclick != other.LeftSticclick) return false;
      if (LeftStictouch != other.LeftStictouch) return false;
      if (LeftSticdeflect != other.LeftSticdeflect) return false;
      if (RightSticclick != other.RightSticclick) return false;
      if (RightStictouch != other.RightStictouch) return false;
      if (RightSticdeflect != other.RightSticdeflect) return false;
      if (CenterTrackpadTouch != other.CenterTrackpadTouch) return false;
      if (CenterTrackpadClick != other.CenterTrackpadClick) return false;
      if (LeftTrackpadTouch != other.LeftTrackpadTouch) return false;
      if (LeftTrackpadClick != other.LeftTrackpadClick) return false;
      if (RightTrackpadTouch != other.RightTrackpadTouch) return false;
      if (RightTrackpadClick != other.RightTrackpadClick) return false;
      if (LeftBumper != other.LeftBumper) return false;
      if (LeftTrigger != other.LeftTrigger) return false;
      if (L4 != other.L4) return false;
      if (L5 != other.L5) return false;
      if (LeftAux != other.LeftAux) return false;
      if (RightBumper != other.RightBumper) return false;
      if (RightTrigger != other.RightTrigger) return false;
      if (R4 != other.R4) return false;
      if (R5 != other.R5) return false;
      if (RightAux != other.RightAux) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasControllerIndex) hash ^= ControllerIndex.GetHashCode();
      if (HasDpadUp) hash ^= DpadUp.GetHashCode();
      if (HasDpadDown) hash ^= DpadDown.GetHashCode();
      if (HasDpadLeft) hash ^= DpadLeft.GetHashCode();
      if (HasDpadRight) hash ^= DpadRight.GetHashCode();
      if (HasButtonSouth) hash ^= ButtonSouth.GetHashCode();
      if (HasButtonEast) hash ^= ButtonEast.GetHashCode();
      if (HasButtonWest) hash ^= ButtonWest.GetHashCode();
      if (HasButtonNorth) hash ^= ButtonNorth.GetHashCode();
      if (HasButtonBacview) hash ^= ButtonBacview.GetHashCode();
      if (HasButtonStartOptions) hash ^= ButtonStartOptions.GetHashCode();
      if (HasButtonSteam) hash ^= ButtonSteam.GetHashCode();
      if (HasButtonQuicaccess) hash ^= ButtonQuicaccess.GetHashCode();
      if (HasButtonMuteCapture) hash ^= ButtonMuteCapture.GetHashCode();
      if (HasLeftSticclick) hash ^= LeftSticclick.GetHashCode();
      if (HasLeftStictouch) hash ^= LeftStictouch.GetHashCode();
      if (HasLeftSticdeflect) hash ^= LeftSticdeflect.GetHashCode();
      if (HasRightSticclick) hash ^= RightSticclick.GetHashCode();
      if (HasRightStictouch) hash ^= RightStictouch.GetHashCode();
      if (HasRightSticdeflect) hash ^= RightSticdeflect.GetHashCode();
      if (HasCenterTrackpadTouch) hash ^= CenterTrackpadTouch.GetHashCode();
      if (HasCenterTrackpadClick) hash ^= CenterTrackpadClick.GetHashCode();
      if (HasLeftTrackpadTouch) hash ^= LeftTrackpadTouch.GetHashCode();
      if (HasLeftTrackpadClick) hash ^= LeftTrackpadClick.GetHashCode();
      if (HasRightTrackpadTouch) hash ^= RightTrackpadTouch.GetHashCode();
      if (HasRightTrackpadClick) hash ^= RightTrackpadClick.GetHashCode();
      if (HasLeftBumper) hash ^= LeftBumper.GetHashCode();
      if (HasLeftTrigger) hash ^= LeftTrigger.GetHashCode();
      if (HasL4) hash ^= L4.GetHashCode();
      if (HasL5) hash ^= L5.GetHashCode();
      if (HasLeftAux) hash ^= LeftAux.GetHashCode();
      if (HasRightBumper) hash ^= RightBumper.GetHashCode();
      if (HasRightTrigger) hash ^= RightTrigger.GetHashCode();
      if (HasR4) hash ^= R4.GetHashCode();
      if (HasR5) hash ^= R5.GetHashCode();
      if (HasRightAux) hash ^= RightAux.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasDpadUp) {
        output.WriteRawTag(16);
        output.WriteBool(DpadUp);
      }
      if (HasDpadDown) {
        output.WriteRawTag(24);
        output.WriteBool(DpadDown);
      }
      if (HasDpadLeft) {
        output.WriteRawTag(32);
        output.WriteBool(DpadLeft);
      }
      if (HasDpadRight) {
        output.WriteRawTag(40);
        output.WriteBool(DpadRight);
      }
      if (HasButtonSouth) {
        output.WriteRawTag(48);
        output.WriteBool(ButtonSouth);
      }
      if (HasButtonEast) {
        output.WriteRawTag(56);
        output.WriteBool(ButtonEast);
      }
      if (HasButtonWest) {
        output.WriteRawTag(64);
        output.WriteBool(ButtonWest);
      }
      if (HasButtonNorth) {
        output.WriteRawTag(72);
        output.WriteBool(ButtonNorth);
      }
      if (HasButtonBacview) {
        output.WriteRawTag(80);
        output.WriteBool(ButtonBacview);
      }
      if (HasButtonStartOptions) {
        output.WriteRawTag(88);
        output.WriteBool(ButtonStartOptions);
      }
      if (HasButtonSteam) {
        output.WriteRawTag(96);
        output.WriteBool(ButtonSteam);
      }
      if (HasButtonQuicaccess) {
        output.WriteRawTag(104);
        output.WriteBool(ButtonQuicaccess);
      }
      if (HasButtonMuteCapture) {
        output.WriteRawTag(112);
        output.WriteBool(ButtonMuteCapture);
      }
      if (HasLeftSticclick) {
        output.WriteRawTag(120);
        output.WriteBool(LeftSticclick);
      }
      if (HasLeftStictouch) {
        output.WriteRawTag(128, 1);
        output.WriteBool(LeftStictouch);
      }
      if (HasLeftSticdeflect) {
        output.WriteRawTag(136, 1);
        output.WriteBool(LeftSticdeflect);
      }
      if (HasRightSticclick) {
        output.WriteRawTag(144, 1);
        output.WriteBool(RightSticclick);
      }
      if (HasRightStictouch) {
        output.WriteRawTag(152, 1);
        output.WriteBool(RightStictouch);
      }
      if (HasRightSticdeflect) {
        output.WriteRawTag(160, 1);
        output.WriteBool(RightSticdeflect);
      }
      if (HasCenterTrackpadTouch) {
        output.WriteRawTag(168, 1);
        output.WriteBool(CenterTrackpadTouch);
      }
      if (HasCenterTrackpadClick) {
        output.WriteRawTag(176, 1);
        output.WriteBool(CenterTrackpadClick);
      }
      if (HasLeftTrackpadTouch) {
        output.WriteRawTag(184, 1);
        output.WriteBool(LeftTrackpadTouch);
      }
      if (HasLeftTrackpadClick) {
        output.WriteRawTag(192, 1);
        output.WriteBool(LeftTrackpadClick);
      }
      if (HasRightTrackpadTouch) {
        output.WriteRawTag(200, 1);
        output.WriteBool(RightTrackpadTouch);
      }
      if (HasRightTrackpadClick) {
        output.WriteRawTag(208, 1);
        output.WriteBool(RightTrackpadClick);
      }
      if (HasLeftBumper) {
        output.WriteRawTag(216, 1);
        output.WriteBool(LeftBumper);
      }
      if (HasLeftTrigger) {
        output.WriteRawTag(224, 1);
        output.WriteBool(LeftTrigger);
      }
      if (HasL4) {
        output.WriteRawTag(232, 1);
        output.WriteBool(L4);
      }
      if (HasL5) {
        output.WriteRawTag(240, 1);
        output.WriteBool(L5);
      }
      if (HasLeftAux) {
        output.WriteRawTag(248, 1);
        output.WriteBool(LeftAux);
      }
      if (HasRightBumper) {
        output.WriteRawTag(128, 2);
        output.WriteBool(RightBumper);
      }
      if (HasRightTrigger) {
        output.WriteRawTag(136, 2);
        output.WriteBool(RightTrigger);
      }
      if (HasR4) {
        output.WriteRawTag(144, 2);
        output.WriteBool(R4);
      }
      if (HasR5) {
        output.WriteRawTag(152, 2);
        output.WriteBool(R5);
      }
      if (HasRightAux) {
        output.WriteRawTag(160, 2);
        output.WriteBool(RightAux);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasDpadUp) {
        output.WriteRawTag(16);
        output.WriteBool(DpadUp);
      }
      if (HasDpadDown) {
        output.WriteRawTag(24);
        output.WriteBool(DpadDown);
      }
      if (HasDpadLeft) {
        output.WriteRawTag(32);
        output.WriteBool(DpadLeft);
      }
      if (HasDpadRight) {
        output.WriteRawTag(40);
        output.WriteBool(DpadRight);
      }
      if (HasButtonSouth) {
        output.WriteRawTag(48);
        output.WriteBool(ButtonSouth);
      }
      if (HasButtonEast) {
        output.WriteRawTag(56);
        output.WriteBool(ButtonEast);
      }
      if (HasButtonWest) {
        output.WriteRawTag(64);
        output.WriteBool(ButtonWest);
      }
      if (HasButtonNorth) {
        output.WriteRawTag(72);
        output.WriteBool(ButtonNorth);
      }
      if (HasButtonBacview) {
        output.WriteRawTag(80);
        output.WriteBool(ButtonBacview);
      }
      if (HasButtonStartOptions) {
        output.WriteRawTag(88);
        output.WriteBool(ButtonStartOptions);
      }
      if (HasButtonSteam) {
        output.WriteRawTag(96);
        output.WriteBool(ButtonSteam);
      }
      if (HasButtonQuicaccess) {
        output.WriteRawTag(104);
        output.WriteBool(ButtonQuicaccess);
      }
      if (HasButtonMuteCapture) {
        output.WriteRawTag(112);
        output.WriteBool(ButtonMuteCapture);
      }
      if (HasLeftSticclick) {
        output.WriteRawTag(120);
        output.WriteBool(LeftSticclick);
      }
      if (HasLeftStictouch) {
        output.WriteRawTag(128, 1);
        output.WriteBool(LeftStictouch);
      }
      if (HasLeftSticdeflect) {
        output.WriteRawTag(136, 1);
        output.WriteBool(LeftSticdeflect);
      }
      if (HasRightSticclick) {
        output.WriteRawTag(144, 1);
        output.WriteBool(RightSticclick);
      }
      if (HasRightStictouch) {
        output.WriteRawTag(152, 1);
        output.WriteBool(RightStictouch);
      }
      if (HasRightSticdeflect) {
        output.WriteRawTag(160, 1);
        output.WriteBool(RightSticdeflect);
      }
      if (HasCenterTrackpadTouch) {
        output.WriteRawTag(168, 1);
        output.WriteBool(CenterTrackpadTouch);
      }
      if (HasCenterTrackpadClick) {
        output.WriteRawTag(176, 1);
        output.WriteBool(CenterTrackpadClick);
      }
      if (HasLeftTrackpadTouch) {
        output.WriteRawTag(184, 1);
        output.WriteBool(LeftTrackpadTouch);
      }
      if (HasLeftTrackpadClick) {
        output.WriteRawTag(192, 1);
        output.WriteBool(LeftTrackpadClick);
      }
      if (HasRightTrackpadTouch) {
        output.WriteRawTag(200, 1);
        output.WriteBool(RightTrackpadTouch);
      }
      if (HasRightTrackpadClick) {
        output.WriteRawTag(208, 1);
        output.WriteBool(RightTrackpadClick);
      }
      if (HasLeftBumper) {
        output.WriteRawTag(216, 1);
        output.WriteBool(LeftBumper);
      }
      if (HasLeftTrigger) {
        output.WriteRawTag(224, 1);
        output.WriteBool(LeftTrigger);
      }
      if (HasL4) {
        output.WriteRawTag(232, 1);
        output.WriteBool(L4);
      }
      if (HasL5) {
        output.WriteRawTag(240, 1);
        output.WriteBool(L5);
      }
      if (HasLeftAux) {
        output.WriteRawTag(248, 1);
        output.WriteBool(LeftAux);
      }
      if (HasRightBumper) {
        output.WriteRawTag(128, 2);
        output.WriteBool(RightBumper);
      }
      if (HasRightTrigger) {
        output.WriteRawTag(136, 2);
        output.WriteBool(RightTrigger);
      }
      if (HasR4) {
        output.WriteRawTag(144, 2);
        output.WriteBool(R4);
      }
      if (HasR5) {
        output.WriteRawTag(152, 2);
        output.WriteBool(R5);
      }
      if (HasRightAux) {
        output.WriteRawTag(160, 2);
        output.WriteBool(RightAux);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasControllerIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerIndex);
      }
      if (HasDpadUp) {
        size += 1 + 1;
      }
      if (HasDpadDown) {
        size += 1 + 1;
      }
      if (HasDpadLeft) {
        size += 1 + 1;
      }
      if (HasDpadRight) {
        size += 1 + 1;
      }
      if (HasButtonSouth) {
        size += 1 + 1;
      }
      if (HasButtonEast) {
        size += 1 + 1;
      }
      if (HasButtonWest) {
        size += 1 + 1;
      }
      if (HasButtonNorth) {
        size += 1 + 1;
      }
      if (HasButtonBacview) {
        size += 1 + 1;
      }
      if (HasButtonStartOptions) {
        size += 1 + 1;
      }
      if (HasButtonSteam) {
        size += 1 + 1;
      }
      if (HasButtonQuicaccess) {
        size += 1 + 1;
      }
      if (HasButtonMuteCapture) {
        size += 1 + 1;
      }
      if (HasLeftSticclick) {
        size += 1 + 1;
      }
      if (HasLeftStictouch) {
        size += 2 + 1;
      }
      if (HasLeftSticdeflect) {
        size += 2 + 1;
      }
      if (HasRightSticclick) {
        size += 2 + 1;
      }
      if (HasRightStictouch) {
        size += 2 + 1;
      }
      if (HasRightSticdeflect) {
        size += 2 + 1;
      }
      if (HasCenterTrackpadTouch) {
        size += 2 + 1;
      }
      if (HasCenterTrackpadClick) {
        size += 2 + 1;
      }
      if (HasLeftTrackpadTouch) {
        size += 2 + 1;
      }
      if (HasLeftTrackpadClick) {
        size += 2 + 1;
      }
      if (HasRightTrackpadTouch) {
        size += 2 + 1;
      }
      if (HasRightTrackpadClick) {
        size += 2 + 1;
      }
      if (HasLeftBumper) {
        size += 2 + 1;
      }
      if (HasLeftTrigger) {
        size += 2 + 1;
      }
      if (HasL4) {
        size += 2 + 1;
      }
      if (HasL5) {
        size += 2 + 1;
      }
      if (HasLeftAux) {
        size += 2 + 1;
      }
      if (HasRightBumper) {
        size += 2 + 1;
      }
      if (HasRightTrigger) {
        size += 2 + 1;
      }
      if (HasR4) {
        size += 2 + 1;
      }
      if (HasR5) {
        size += 2 + 1;
      }
      if (HasRightAux) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSteamInputService_ControllerButtonStateChanged_Notification other) {
      if (other == null) {
        return;
      }
      if (other.HasControllerIndex) {
        ControllerIndex = other.ControllerIndex;
      }
      if (other.HasDpadUp) {
        DpadUp = other.DpadUp;
      }
      if (other.HasDpadDown) {
        DpadDown = other.DpadDown;
      }
      if (other.HasDpadLeft) {
        DpadLeft = other.DpadLeft;
      }
      if (other.HasDpadRight) {
        DpadRight = other.DpadRight;
      }
      if (other.HasButtonSouth) {
        ButtonSouth = other.ButtonSouth;
      }
      if (other.HasButtonEast) {
        ButtonEast = other.ButtonEast;
      }
      if (other.HasButtonWest) {
        ButtonWest = other.ButtonWest;
      }
      if (other.HasButtonNorth) {
        ButtonNorth = other.ButtonNorth;
      }
      if (other.HasButtonBacview) {
        ButtonBacview = other.ButtonBacview;
      }
      if (other.HasButtonStartOptions) {
        ButtonStartOptions = other.ButtonStartOptions;
      }
      if (other.HasButtonSteam) {
        ButtonSteam = other.ButtonSteam;
      }
      if (other.HasButtonQuicaccess) {
        ButtonQuicaccess = other.ButtonQuicaccess;
      }
      if (other.HasButtonMuteCapture) {
        ButtonMuteCapture = other.ButtonMuteCapture;
      }
      if (other.HasLeftSticclick) {
        LeftSticclick = other.LeftSticclick;
      }
      if (other.HasLeftStictouch) {
        LeftStictouch = other.LeftStictouch;
      }
      if (other.HasLeftSticdeflect) {
        LeftSticdeflect = other.LeftSticdeflect;
      }
      if (other.HasRightSticclick) {
        RightSticclick = other.RightSticclick;
      }
      if (other.HasRightStictouch) {
        RightStictouch = other.RightStictouch;
      }
      if (other.HasRightSticdeflect) {
        RightSticdeflect = other.RightSticdeflect;
      }
      if (other.HasCenterTrackpadTouch) {
        CenterTrackpadTouch = other.CenterTrackpadTouch;
      }
      if (other.HasCenterTrackpadClick) {
        CenterTrackpadClick = other.CenterTrackpadClick;
      }
      if (other.HasLeftTrackpadTouch) {
        LeftTrackpadTouch = other.LeftTrackpadTouch;
      }
      if (other.HasLeftTrackpadClick) {
        LeftTrackpadClick = other.LeftTrackpadClick;
      }
      if (other.HasRightTrackpadTouch) {
        RightTrackpadTouch = other.RightTrackpadTouch;
      }
      if (other.HasRightTrackpadClick) {
        RightTrackpadClick = other.RightTrackpadClick;
      }
      if (other.HasLeftBumper) {
        LeftBumper = other.LeftBumper;
      }
      if (other.HasLeftTrigger) {
        LeftTrigger = other.LeftTrigger;
      }
      if (other.HasL4) {
        L4 = other.L4;
      }
      if (other.HasL5) {
        L5 = other.L5;
      }
      if (other.HasLeftAux) {
        LeftAux = other.LeftAux;
      }
      if (other.HasRightBumper) {
        RightBumper = other.RightBumper;
      }
      if (other.HasRightTrigger) {
        RightTrigger = other.RightTrigger;
      }
      if (other.HasR4) {
        R4 = other.R4;
      }
      if (other.HasR5) {
        R5 = other.R5;
      }
      if (other.HasRightAux) {
        RightAux = other.RightAux;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            DpadUp = input.ReadBool();
            break;
          }
          case 24: {
            DpadDown = input.ReadBool();
            break;
          }
          case 32: {
            DpadLeft = input.ReadBool();
            break;
          }
          case 40: {
            DpadRight = input.ReadBool();
            break;
          }
          case 48: {
            ButtonSouth = input.ReadBool();
            break;
          }
          case 56: {
            ButtonEast = input.ReadBool();
            break;
          }
          case 64: {
            ButtonWest = input.ReadBool();
            break;
          }
          case 72: {
            ButtonNorth = input.ReadBool();
            break;
          }
          case 80: {
            ButtonBacview = input.ReadBool();
            break;
          }
          case 88: {
            ButtonStartOptions = input.ReadBool();
            break;
          }
          case 96: {
            ButtonSteam = input.ReadBool();
            break;
          }
          case 104: {
            ButtonQuicaccess = input.ReadBool();
            break;
          }
          case 112: {
            ButtonMuteCapture = input.ReadBool();
            break;
          }
          case 120: {
            LeftSticclick = input.ReadBool();
            break;
          }
          case 128: {
            LeftStictouch = input.ReadBool();
            break;
          }
          case 136: {
            LeftSticdeflect = input.ReadBool();
            break;
          }
          case 144: {
            RightSticclick = input.ReadBool();
            break;
          }
          case 152: {
            RightStictouch = input.ReadBool();
            break;
          }
          case 160: {
            RightSticdeflect = input.ReadBool();
            break;
          }
          case 168: {
            CenterTrackpadTouch = input.ReadBool();
            break;
          }
          case 176: {
            CenterTrackpadClick = input.ReadBool();
            break;
          }
          case 184: {
            LeftTrackpadTouch = input.ReadBool();
            break;
          }
          case 192: {
            LeftTrackpadClick = input.ReadBool();
            break;
          }
          case 200: {
            RightTrackpadTouch = input.ReadBool();
            break;
          }
          case 208: {
            RightTrackpadClick = input.ReadBool();
            break;
          }
          case 216: {
            LeftBumper = input.ReadBool();
            break;
          }
          case 224: {
            LeftTrigger = input.ReadBool();
            break;
          }
          case 232: {
            L4 = input.ReadBool();
            break;
          }
          case 240: {
            L5 = input.ReadBool();
            break;
          }
          case 248: {
            LeftAux = input.ReadBool();
            break;
          }
          case 256: {
            RightBumper = input.ReadBool();
            break;
          }
          case 264: {
            RightTrigger = input.ReadBool();
            break;
          }
          case 272: {
            R4 = input.ReadBool();
            break;
          }
          case 280: {
            R5 = input.ReadBool();
            break;
          }
          case 288: {
            RightAux = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            DpadUp = input.ReadBool();
            break;
          }
          case 24: {
            DpadDown = input.ReadBool();
            break;
          }
          case 32: {
            DpadLeft = input.ReadBool();
            break;
          }
          case 40: {
            DpadRight = input.ReadBool();
            break;
          }
          case 48: {
            ButtonSouth = input.ReadBool();
            break;
          }
          case 56: {
            ButtonEast = input.ReadBool();
            break;
          }
          case 64: {
            ButtonWest = input.ReadBool();
            break;
          }
          case 72: {
            ButtonNorth = input.ReadBool();
            break;
          }
          case 80: {
            ButtonBacview = input.ReadBool();
            break;
          }
          case 88: {
            ButtonStartOptions = input.ReadBool();
            break;
          }
          case 96: {
            ButtonSteam = input.ReadBool();
            break;
          }
          case 104: {
            ButtonQuicaccess = input.ReadBool();
            break;
          }
          case 112: {
            ButtonMuteCapture = input.ReadBool();
            break;
          }
          case 120: {
            LeftSticclick = input.ReadBool();
            break;
          }
          case 128: {
            LeftStictouch = input.ReadBool();
            break;
          }
          case 136: {
            LeftSticdeflect = input.ReadBool();
            break;
          }
          case 144: {
            RightSticclick = input.ReadBool();
            break;
          }
          case 152: {
            RightStictouch = input.ReadBool();
            break;
          }
          case 160: {
            RightSticdeflect = input.ReadBool();
            break;
          }
          case 168: {
            CenterTrackpadTouch = input.ReadBool();
            break;
          }
          case 176: {
            CenterTrackpadClick = input.ReadBool();
            break;
          }
          case 184: {
            LeftTrackpadTouch = input.ReadBool();
            break;
          }
          case 192: {
            LeftTrackpadClick = input.ReadBool();
            break;
          }
          case 200: {
            RightTrackpadTouch = input.ReadBool();
            break;
          }
          case 208: {
            RightTrackpadClick = input.ReadBool();
            break;
          }
          case 216: {
            LeftBumper = input.ReadBool();
            break;
          }
          case 224: {
            LeftTrigger = input.ReadBool();
            break;
          }
          case 232: {
            L4 = input.ReadBool();
            break;
          }
          case 240: {
            L5 = input.ReadBool();
            break;
          }
          case 248: {
            LeftAux = input.ReadBool();
            break;
          }
          case 256: {
            RightBumper = input.ReadBool();
            break;
          }
          case 264: {
            RightTrigger = input.ReadBool();
            break;
          }
          case 272: {
            R4 = input.ReadBool();
            break;
          }
          case 280: {
            R5 = input.ReadBool();
            break;
          }
          case 288: {
            RightAux = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ControllerVector2 : pb::IMessage<ControllerVector2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ControllerVector2> _parser = new pb::MessageParser<ControllerVector2>(() => new ControllerVector2());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ControllerVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerVector2(ControllerVector2 other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerVector2 Clone() {
      return new ControllerVector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static float XDefaultValue = 0F;

    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static float YDefaultValue = 0F;

    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ControllerVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ControllerVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 4;
      }
      if (HasY) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ControllerVector2 other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ControllerVector3 : pb::IMessage<ControllerVector3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ControllerVector3> _parser = new pb::MessageParser<ControllerVector3>(() => new ControllerVector3());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ControllerVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerVector3(ControllerVector3 other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerVector3 Clone() {
      return new ControllerVector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static float XDefaultValue = 0F;

    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static float YDefaultValue = 0F;

    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private readonly static float ZDefaultValue = 0F;

    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
      set {
        _hasBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ControllerVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ControllerVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasX) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (HasZ) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasX) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (HasZ) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 4;
      }
      if (HasY) {
        size += 1 + 4;
      }
      if (HasZ) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ControllerVector3 other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ControllerQuaternion : pb::IMessage<ControllerQuaternion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ControllerQuaternion> _parser = new pb::MessageParser<ControllerQuaternion>(() => new ControllerQuaternion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ControllerQuaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerQuaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerQuaternion(ControllerQuaternion other) : this() {
      _hasBits0 = other._hasBits0;
      w_ = other.w_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerQuaternion Clone() {
      return new ControllerQuaternion(this);
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 1;
    private readonly static float WDefaultValue = 0F;

    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float W {
      get { if ((_hasBits0 & 1) != 0) { return w_; } else { return WDefaultValue; } }
      set {
        _hasBits0 |= 1;
        w_ = value;
      }
    }
    /// <summary>Gets whether the "w" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasW {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "w" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearW() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private readonly static float XDefaultValue = 0F;

    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float X {
      get { if ((_hasBits0 & 2) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 2;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearX() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private readonly static float YDefaultValue = 0F;

    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Y {
      get { if ((_hasBits0 & 4) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 4;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasY {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearY() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private readonly static float ZDefaultValue = 0F;

    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Z {
      get { if ((_hasBits0 & 8) != 0) { return z_; } else { return ZDefaultValue; } }
      set {
        _hasBits0 |= 8;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasZ {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearZ() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ControllerQuaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ControllerQuaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasW) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasW) {
        output.WriteRawTag(13);
        output.WriteFloat(W);
      }
      if (HasX) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (HasZ) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasW) {
        output.WriteRawTag(13);
        output.WriteFloat(W);
      }
      if (HasX) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (HasZ) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasW) {
        size += 1 + 4;
      }
      if (HasX) {
        size += 1 + 4;
      }
      if (HasY) {
        size += 1 + 4;
      }
      if (HasZ) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ControllerQuaternion other) {
      if (other == null) {
        return;
      }
      if (other.HasW) {
        W = other.W;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            W = input.ReadFloat();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            W = input.ReadFloat();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ControllerGyroEulerAngles : pb::IMessage<ControllerGyroEulerAngles>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ControllerGyroEulerAngles> _parser = new pb::MessageParser<ControllerGyroEulerAngles>(() => new ControllerGyroEulerAngles());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ControllerGyroEulerAngles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerGyroEulerAngles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerGyroEulerAngles(ControllerGyroEulerAngles other) : this() {
      _hasBits0 = other._hasBits0;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      roll_ = other.roll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControllerGyroEulerAngles Clone() {
      return new ControllerGyroEulerAngles(this);
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 1;
    private readonly static float PitchDefaultValue = 0F;

    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Pitch {
      get { if ((_hasBits0 & 1) != 0) { return pitch_; } else { return PitchDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pitch_ = value;
      }
    }
    /// <summary>Gets whether the "pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitch {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitch() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 2;
    private readonly static float YawDefaultValue = 0F;

    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Yaw {
      get { if ((_hasBits0 & 2) != 0) { return yaw_; } else { return YawDefaultValue; } }
      set {
        _hasBits0 |= 2;
        yaw_ = value;
      }
    }
    /// <summary>Gets whether the "yaw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYaw {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "yaw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYaw() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 3;
    private readonly static float RollDefaultValue = 0F;

    private float roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Roll {
      get { if ((_hasBits0 & 4) != 0) { return roll_; } else { return RollDefaultValue; } }
      set {
        _hasBits0 |= 4;
        roll_ = value;
      }
    }
    /// <summary>Gets whether the "roll" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoll {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "roll" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoll() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ControllerGyroEulerAngles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ControllerGyroEulerAngles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roll, other.Roll)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
      if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      if (HasRoll) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roll);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPitch) {
        output.WriteRawTag(13);
        output.WriteFloat(Pitch);
      }
      if (HasYaw) {
        output.WriteRawTag(21);
        output.WriteFloat(Yaw);
      }
      if (HasRoll) {
        output.WriteRawTag(29);
        output.WriteFloat(Roll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPitch) {
        output.WriteRawTag(13);
        output.WriteFloat(Pitch);
      }
      if (HasYaw) {
        output.WriteRawTag(21);
        output.WriteFloat(Yaw);
      }
      if (HasRoll) {
        output.WriteRawTag(29);
        output.WriteFloat(Roll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPitch) {
        size += 1 + 4;
      }
      if (HasYaw) {
        size += 1 + 4;
      }
      if (HasRoll) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ControllerGyroEulerAngles other) {
      if (other == null) {
        return;
      }
      if (other.HasPitch) {
        Pitch = other.Pitch;
      }
      if (other.HasYaw) {
        Yaw = other.Yaw;
      }
      if (other.HasRoll) {
        Roll = other.Roll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Pitch = input.ReadFloat();
            break;
          }
          case 21: {
            Yaw = input.ReadFloat();
            break;
          }
          case 29: {
            Roll = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Pitch = input.ReadFloat();
            break;
          }
          case 21: {
            Yaw = input.ReadFloat();
            break;
          }
          case 29: {
            Roll = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSteamInputService_ControllerAxesStateChange_Notification : pb::IMessage<CSteamInputService_ControllerAxesStateChange_Notification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSteamInputService_ControllerAxesStateChange_Notification> _parser = new pb::MessageParser<CSteamInputService_ControllerAxesStateChange_Notification>(() => new CSteamInputService_ControllerAxesStateChange_Notification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSteamInputService_ControllerAxesStateChange_Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerAxesStateChange_Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerAxesStateChange_Notification(CSteamInputService_ControllerAxesStateChange_Notification other) : this() {
      _hasBits0 = other._hasBits0;
      controllerIndex_ = other.controllerIndex_;
      joysticleft_ = other.joysticleft_ != null ? other.joysticleft_.Clone() : null;
      joysticright_ = other.joysticright_ != null ? other.joysticright_.Clone() : null;
      trackpadLeft_ = other.trackpadLeft_ != null ? other.trackpadLeft_.Clone() : null;
      trackpadRight_ = other.trackpadRight_ != null ? other.trackpadRight_.Clone() : null;
      trackpadCenter_ = other.trackpadCenter_ != null ? other.trackpadCenter_.Clone() : null;
      trackpadPressureLeft_ = other.trackpadPressureLeft_;
      trackpadPressureRight_ = other.trackpadPressureRight_;
      triggerLeft_ = other.triggerLeft_;
      triggerRight_ = other.triggerRight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerAxesStateChange_Notification Clone() {
      return new CSteamInputService_ControllerAxesStateChange_Notification(this);
    }

    /// <summary>Field number for the "controller_index" field.</summary>
    public const int ControllerIndexFieldNumber = 1;
    private readonly static uint ControllerIndexDefaultValue = 0;

    private uint controllerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ControllerIndex {
      get { if ((_hasBits0 & 1) != 0) { return controllerIndex_; } else { return ControllerIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        controllerIndex_ = value;
      }
    }
    /// <summary>Gets whether the "controller_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControllerIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "controller_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControllerIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "joysticleft" field.</summary>
    public const int JoysticleftFieldNumber = 2;
    private global::OpenSteamworks.Protobuf.ControllerVector2 joysticleft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerVector2 Joysticleft {
      get { return joysticleft_; }
      set {
        joysticleft_ = value;
      }
    }

    /// <summary>Field number for the "joysticright" field.</summary>
    public const int JoysticrightFieldNumber = 3;
    private global::OpenSteamworks.Protobuf.ControllerVector2 joysticright_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerVector2 Joysticright {
      get { return joysticright_; }
      set {
        joysticright_ = value;
      }
    }

    /// <summary>Field number for the "trackpad_left" field.</summary>
    public const int TrackpadLeftFieldNumber = 4;
    private global::OpenSteamworks.Protobuf.ControllerVector2 trackpadLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerVector2 TrackpadLeft {
      get { return trackpadLeft_; }
      set {
        trackpadLeft_ = value;
      }
    }

    /// <summary>Field number for the "trackpad_right" field.</summary>
    public const int TrackpadRightFieldNumber = 5;
    private global::OpenSteamworks.Protobuf.ControllerVector2 trackpadRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerVector2 TrackpadRight {
      get { return trackpadRight_; }
      set {
        trackpadRight_ = value;
      }
    }

    /// <summary>Field number for the "trackpad_center" field.</summary>
    public const int TrackpadCenterFieldNumber = 6;
    private global::OpenSteamworks.Protobuf.ControllerVector2 trackpadCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerVector2 TrackpadCenter {
      get { return trackpadCenter_; }
      set {
        trackpadCenter_ = value;
      }
    }

    /// <summary>Field number for the "trackpad_pressure_left" field.</summary>
    public const int TrackpadPressureLeftFieldNumber = 7;
    private readonly static float TrackpadPressureLeftDefaultValue = 0F;

    private float trackpadPressureLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackpadPressureLeft {
      get { if ((_hasBits0 & 2) != 0) { return trackpadPressureLeft_; } else { return TrackpadPressureLeftDefaultValue; } }
      set {
        _hasBits0 |= 2;
        trackpadPressureLeft_ = value;
      }
    }
    /// <summary>Gets whether the "trackpad_pressure_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTrackpadPressureLeft {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "trackpad_pressure_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTrackpadPressureLeft() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trackpad_pressure_right" field.</summary>
    public const int TrackpadPressureRightFieldNumber = 8;
    private readonly static float TrackpadPressureRightDefaultValue = 0F;

    private float trackpadPressureRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrackpadPressureRight {
      get { if ((_hasBits0 & 4) != 0) { return trackpadPressureRight_; } else { return TrackpadPressureRightDefaultValue; } }
      set {
        _hasBits0 |= 4;
        trackpadPressureRight_ = value;
      }
    }
    /// <summary>Gets whether the "trackpad_pressure_right" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTrackpadPressureRight {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trackpad_pressure_right" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTrackpadPressureRight() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "trigger_left" field.</summary>
    public const int TriggerLeftFieldNumber = 9;
    private readonly static float TriggerLeftDefaultValue = 0F;

    private float triggerLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TriggerLeft {
      get { if ((_hasBits0 & 8) != 0) { return triggerLeft_; } else { return TriggerLeftDefaultValue; } }
      set {
        _hasBits0 |= 8;
        triggerLeft_ = value;
      }
    }
    /// <summary>Gets whether the "trigger_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTriggerLeft {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "trigger_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTriggerLeft() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "trigger_right" field.</summary>
    public const int TriggerRightFieldNumber = 10;
    private readonly static float TriggerRightDefaultValue = 0F;

    private float triggerRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TriggerRight {
      get { if ((_hasBits0 & 16) != 0) { return triggerRight_; } else { return TriggerRightDefaultValue; } }
      set {
        _hasBits0 |= 16;
        triggerRight_ = value;
      }
    }
    /// <summary>Gets whether the "trigger_right" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTriggerRight {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "trigger_right" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTriggerRight() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSteamInputService_ControllerAxesStateChange_Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSteamInputService_ControllerAxesStateChange_Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControllerIndex != other.ControllerIndex) return false;
      if (!object.Equals(Joysticleft, other.Joysticleft)) return false;
      if (!object.Equals(Joysticright, other.Joysticright)) return false;
      if (!object.Equals(TrackpadLeft, other.TrackpadLeft)) return false;
      if (!object.Equals(TrackpadRight, other.TrackpadRight)) return false;
      if (!object.Equals(TrackpadCenter, other.TrackpadCenter)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackpadPressureLeft, other.TrackpadPressureLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackpadPressureRight, other.TrackpadPressureRight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TriggerLeft, other.TriggerLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TriggerRight, other.TriggerRight)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasControllerIndex) hash ^= ControllerIndex.GetHashCode();
      if (joysticleft_ != null) hash ^= Joysticleft.GetHashCode();
      if (joysticright_ != null) hash ^= Joysticright.GetHashCode();
      if (trackpadLeft_ != null) hash ^= TrackpadLeft.GetHashCode();
      if (trackpadRight_ != null) hash ^= TrackpadRight.GetHashCode();
      if (trackpadCenter_ != null) hash ^= TrackpadCenter.GetHashCode();
      if (HasTrackpadPressureLeft) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackpadPressureLeft);
      if (HasTrackpadPressureRight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackpadPressureRight);
      if (HasTriggerLeft) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TriggerLeft);
      if (HasTriggerRight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TriggerRight);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (joysticleft_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Joysticleft);
      }
      if (joysticright_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Joysticright);
      }
      if (trackpadLeft_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TrackpadLeft);
      }
      if (trackpadRight_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TrackpadRight);
      }
      if (trackpadCenter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TrackpadCenter);
      }
      if (HasTrackpadPressureLeft) {
        output.WriteRawTag(61);
        output.WriteFloat(TrackpadPressureLeft);
      }
      if (HasTrackpadPressureRight) {
        output.WriteRawTag(69);
        output.WriteFloat(TrackpadPressureRight);
      }
      if (HasTriggerLeft) {
        output.WriteRawTag(77);
        output.WriteFloat(TriggerLeft);
      }
      if (HasTriggerRight) {
        output.WriteRawTag(85);
        output.WriteFloat(TriggerRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (joysticleft_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Joysticleft);
      }
      if (joysticright_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Joysticright);
      }
      if (trackpadLeft_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TrackpadLeft);
      }
      if (trackpadRight_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TrackpadRight);
      }
      if (trackpadCenter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TrackpadCenter);
      }
      if (HasTrackpadPressureLeft) {
        output.WriteRawTag(61);
        output.WriteFloat(TrackpadPressureLeft);
      }
      if (HasTrackpadPressureRight) {
        output.WriteRawTag(69);
        output.WriteFloat(TrackpadPressureRight);
      }
      if (HasTriggerLeft) {
        output.WriteRawTag(77);
        output.WriteFloat(TriggerLeft);
      }
      if (HasTriggerRight) {
        output.WriteRawTag(85);
        output.WriteFloat(TriggerRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasControllerIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerIndex);
      }
      if (joysticleft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Joysticleft);
      }
      if (joysticright_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Joysticright);
      }
      if (trackpadLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackpadLeft);
      }
      if (trackpadRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackpadRight);
      }
      if (trackpadCenter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackpadCenter);
      }
      if (HasTrackpadPressureLeft) {
        size += 1 + 4;
      }
      if (HasTrackpadPressureRight) {
        size += 1 + 4;
      }
      if (HasTriggerLeft) {
        size += 1 + 4;
      }
      if (HasTriggerRight) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSteamInputService_ControllerAxesStateChange_Notification other) {
      if (other == null) {
        return;
      }
      if (other.HasControllerIndex) {
        ControllerIndex = other.ControllerIndex;
      }
      if (other.joysticleft_ != null) {
        if (joysticleft_ == null) {
          Joysticleft = new global::OpenSteamworks.Protobuf.ControllerVector2();
        }
        Joysticleft.MergeFrom(other.Joysticleft);
      }
      if (other.joysticright_ != null) {
        if (joysticright_ == null) {
          Joysticright = new global::OpenSteamworks.Protobuf.ControllerVector2();
        }
        Joysticright.MergeFrom(other.Joysticright);
      }
      if (other.trackpadLeft_ != null) {
        if (trackpadLeft_ == null) {
          TrackpadLeft = new global::OpenSteamworks.Protobuf.ControllerVector2();
        }
        TrackpadLeft.MergeFrom(other.TrackpadLeft);
      }
      if (other.trackpadRight_ != null) {
        if (trackpadRight_ == null) {
          TrackpadRight = new global::OpenSteamworks.Protobuf.ControllerVector2();
        }
        TrackpadRight.MergeFrom(other.TrackpadRight);
      }
      if (other.trackpadCenter_ != null) {
        if (trackpadCenter_ == null) {
          TrackpadCenter = new global::OpenSteamworks.Protobuf.ControllerVector2();
        }
        TrackpadCenter.MergeFrom(other.TrackpadCenter);
      }
      if (other.HasTrackpadPressureLeft) {
        TrackpadPressureLeft = other.TrackpadPressureLeft;
      }
      if (other.HasTrackpadPressureRight) {
        TrackpadPressureRight = other.TrackpadPressureRight;
      }
      if (other.HasTriggerLeft) {
        TriggerLeft = other.TriggerLeft;
      }
      if (other.HasTriggerRight) {
        TriggerRight = other.TriggerRight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            if (joysticleft_ == null) {
              Joysticleft = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(Joysticleft);
            break;
          }
          case 26: {
            if (joysticright_ == null) {
              Joysticright = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(Joysticright);
            break;
          }
          case 34: {
            if (trackpadLeft_ == null) {
              TrackpadLeft = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(TrackpadLeft);
            break;
          }
          case 42: {
            if (trackpadRight_ == null) {
              TrackpadRight = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(TrackpadRight);
            break;
          }
          case 50: {
            if (trackpadCenter_ == null) {
              TrackpadCenter = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(TrackpadCenter);
            break;
          }
          case 61: {
            TrackpadPressureLeft = input.ReadFloat();
            break;
          }
          case 69: {
            TrackpadPressureRight = input.ReadFloat();
            break;
          }
          case 77: {
            TriggerLeft = input.ReadFloat();
            break;
          }
          case 85: {
            TriggerRight = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            if (joysticleft_ == null) {
              Joysticleft = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(Joysticleft);
            break;
          }
          case 26: {
            if (joysticright_ == null) {
              Joysticright = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(Joysticright);
            break;
          }
          case 34: {
            if (trackpadLeft_ == null) {
              TrackpadLeft = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(TrackpadLeft);
            break;
          }
          case 42: {
            if (trackpadRight_ == null) {
              TrackpadRight = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(TrackpadRight);
            break;
          }
          case 50: {
            if (trackpadCenter_ == null) {
              TrackpadCenter = new global::OpenSteamworks.Protobuf.ControllerVector2();
            }
            input.ReadMessage(TrackpadCenter);
            break;
          }
          case 61: {
            TrackpadPressureLeft = input.ReadFloat();
            break;
          }
          case 69: {
            TrackpadPressureRight = input.ReadFloat();
            break;
          }
          case 77: {
            TriggerLeft = input.ReadFloat();
            break;
          }
          case 85: {
            TriggerRight = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSteamInputService_GyroQuaternionChanged_Notification : pb::IMessage<CSteamInputService_GyroQuaternionChanged_Notification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSteamInputService_GyroQuaternionChanged_Notification> _parser = new pb::MessageParser<CSteamInputService_GyroQuaternionChanged_Notification>(() => new CSteamInputService_GyroQuaternionChanged_Notification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSteamInputService_GyroQuaternionChanged_Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroQuaternionChanged_Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroQuaternionChanged_Notification(CSteamInputService_GyroQuaternionChanged_Notification other) : this() {
      _hasBits0 = other._hasBits0;
      controllerIndex_ = other.controllerIndex_;
      imuIndex_ = other.imuIndex_;
      gyroRawQuaternion_ = other.gyroRawQuaternion_ != null ? other.gyroRawQuaternion_.Clone() : null;
      gyroFilteredQuaternion_ = other.gyroFilteredQuaternion_ != null ? other.gyroFilteredQuaternion_.Clone() : null;
      imuSensorDeltaTime_ = other.imuSensorDeltaTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroQuaternionChanged_Notification Clone() {
      return new CSteamInputService_GyroQuaternionChanged_Notification(this);
    }

    /// <summary>Field number for the "controller_index" field.</summary>
    public const int ControllerIndexFieldNumber = 1;
    private readonly static uint ControllerIndexDefaultValue = 0;

    private uint controllerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ControllerIndex {
      get { if ((_hasBits0 & 1) != 0) { return controllerIndex_; } else { return ControllerIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        controllerIndex_ = value;
      }
    }
    /// <summary>Gets whether the "controller_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControllerIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "controller_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControllerIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "imu_index" field.</summary>
    public const int ImuIndexFieldNumber = 2;
    private readonly static uint ImuIndexDefaultValue = 0;

    private uint imuIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ImuIndex {
      get { if ((_hasBits0 & 2) != 0) { return imuIndex_; } else { return ImuIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        imuIndex_ = value;
      }
    }
    /// <summary>Gets whether the "imu_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImuIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "imu_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImuIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "gyro_raw_quaternion" field.</summary>
    public const int GyroRawQuaternionFieldNumber = 3;
    private global::OpenSteamworks.Protobuf.ControllerQuaternion gyroRawQuaternion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerQuaternion GyroRawQuaternion {
      get { return gyroRawQuaternion_; }
      set {
        gyroRawQuaternion_ = value;
      }
    }

    /// <summary>Field number for the "gyro_filtered_quaternion" field.</summary>
    public const int GyroFilteredQuaternionFieldNumber = 4;
    private global::OpenSteamworks.Protobuf.ControllerQuaternion gyroFilteredQuaternion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerQuaternion GyroFilteredQuaternion {
      get { return gyroFilteredQuaternion_; }
      set {
        gyroFilteredQuaternion_ = value;
      }
    }

    /// <summary>Field number for the "imu_sensor_delta_time" field.</summary>
    public const int ImuSensorDeltaTimeFieldNumber = 5;
    private readonly static uint ImuSensorDeltaTimeDefaultValue = 0;

    private uint imuSensorDeltaTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ImuSensorDeltaTime {
      get { if ((_hasBits0 & 4) != 0) { return imuSensorDeltaTime_; } else { return ImuSensorDeltaTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        imuSensorDeltaTime_ = value;
      }
    }
    /// <summary>Gets whether the "imu_sensor_delta_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImuSensorDeltaTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "imu_sensor_delta_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImuSensorDeltaTime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSteamInputService_GyroQuaternionChanged_Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSteamInputService_GyroQuaternionChanged_Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControllerIndex != other.ControllerIndex) return false;
      if (ImuIndex != other.ImuIndex) return false;
      if (!object.Equals(GyroRawQuaternion, other.GyroRawQuaternion)) return false;
      if (!object.Equals(GyroFilteredQuaternion, other.GyroFilteredQuaternion)) return false;
      if (ImuSensorDeltaTime != other.ImuSensorDeltaTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasControllerIndex) hash ^= ControllerIndex.GetHashCode();
      if (HasImuIndex) hash ^= ImuIndex.GetHashCode();
      if (gyroRawQuaternion_ != null) hash ^= GyroRawQuaternion.GetHashCode();
      if (gyroFilteredQuaternion_ != null) hash ^= GyroFilteredQuaternion.GetHashCode();
      if (HasImuSensorDeltaTime) hash ^= ImuSensorDeltaTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasImuIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImuIndex);
      }
      if (gyroRawQuaternion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GyroRawQuaternion);
      }
      if (gyroFilteredQuaternion_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GyroFilteredQuaternion);
      }
      if (HasImuSensorDeltaTime) {
        output.WriteRawTag(40);
        output.WriteUInt32(ImuSensorDeltaTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasImuIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImuIndex);
      }
      if (gyroRawQuaternion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GyroRawQuaternion);
      }
      if (gyroFilteredQuaternion_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GyroFilteredQuaternion);
      }
      if (HasImuSensorDeltaTime) {
        output.WriteRawTag(40);
        output.WriteUInt32(ImuSensorDeltaTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasControllerIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerIndex);
      }
      if (HasImuIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImuIndex);
      }
      if (gyroRawQuaternion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GyroRawQuaternion);
      }
      if (gyroFilteredQuaternion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GyroFilteredQuaternion);
      }
      if (HasImuSensorDeltaTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImuSensorDeltaTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSteamInputService_GyroQuaternionChanged_Notification other) {
      if (other == null) {
        return;
      }
      if (other.HasControllerIndex) {
        ControllerIndex = other.ControllerIndex;
      }
      if (other.HasImuIndex) {
        ImuIndex = other.ImuIndex;
      }
      if (other.gyroRawQuaternion_ != null) {
        if (gyroRawQuaternion_ == null) {
          GyroRawQuaternion = new global::OpenSteamworks.Protobuf.ControllerQuaternion();
        }
        GyroRawQuaternion.MergeFrom(other.GyroRawQuaternion);
      }
      if (other.gyroFilteredQuaternion_ != null) {
        if (gyroFilteredQuaternion_ == null) {
          GyroFilteredQuaternion = new global::OpenSteamworks.Protobuf.ControllerQuaternion();
        }
        GyroFilteredQuaternion.MergeFrom(other.GyroFilteredQuaternion);
      }
      if (other.HasImuSensorDeltaTime) {
        ImuSensorDeltaTime = other.ImuSensorDeltaTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            ImuIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (gyroRawQuaternion_ == null) {
              GyroRawQuaternion = new global::OpenSteamworks.Protobuf.ControllerQuaternion();
            }
            input.ReadMessage(GyroRawQuaternion);
            break;
          }
          case 34: {
            if (gyroFilteredQuaternion_ == null) {
              GyroFilteredQuaternion = new global::OpenSteamworks.Protobuf.ControllerQuaternion();
            }
            input.ReadMessage(GyroFilteredQuaternion);
            break;
          }
          case 40: {
            ImuSensorDeltaTime = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            ImuIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (gyroRawQuaternion_ == null) {
              GyroRawQuaternion = new global::OpenSteamworks.Protobuf.ControllerQuaternion();
            }
            input.ReadMessage(GyroRawQuaternion);
            break;
          }
          case 34: {
            if (gyroFilteredQuaternion_ == null) {
              GyroFilteredQuaternion = new global::OpenSteamworks.Protobuf.ControllerQuaternion();
            }
            input.ReadMessage(GyroFilteredQuaternion);
            break;
          }
          case 40: {
            ImuSensorDeltaTime = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSteamInputService_GyroSpeedChanged_Notification : pb::IMessage<CSteamInputService_GyroSpeedChanged_Notification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSteamInputService_GyroSpeedChanged_Notification> _parser = new pb::MessageParser<CSteamInputService_GyroSpeedChanged_Notification>(() => new CSteamInputService_GyroSpeedChanged_Notification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSteamInputService_GyroSpeedChanged_Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroSpeedChanged_Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroSpeedChanged_Notification(CSteamInputService_GyroSpeedChanged_Notification other) : this() {
      _hasBits0 = other._hasBits0;
      controllerIndex_ = other.controllerIndex_;
      imuIndex_ = other.imuIndex_;
      gyroRawSpeed_ = other.gyroRawSpeed_ != null ? other.gyroRawSpeed_.Clone() : null;
      gyroFilteredSpeed_ = other.gyroFilteredSpeed_ != null ? other.gyroFilteredSpeed_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroSpeedChanged_Notification Clone() {
      return new CSteamInputService_GyroSpeedChanged_Notification(this);
    }

    /// <summary>Field number for the "controller_index" field.</summary>
    public const int ControllerIndexFieldNumber = 1;
    private readonly static uint ControllerIndexDefaultValue = 0;

    private uint controllerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ControllerIndex {
      get { if ((_hasBits0 & 1) != 0) { return controllerIndex_; } else { return ControllerIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        controllerIndex_ = value;
      }
    }
    /// <summary>Gets whether the "controller_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControllerIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "controller_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControllerIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "imu_index" field.</summary>
    public const int ImuIndexFieldNumber = 2;
    private readonly static uint ImuIndexDefaultValue = 0;

    private uint imuIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ImuIndex {
      get { if ((_hasBits0 & 2) != 0) { return imuIndex_; } else { return ImuIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        imuIndex_ = value;
      }
    }
    /// <summary>Gets whether the "imu_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImuIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "imu_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImuIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "gyro_raw_speed" field.</summary>
    public const int GyroRawSpeedFieldNumber = 3;
    private global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles gyroRawSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles GyroRawSpeed {
      get { return gyroRawSpeed_; }
      set {
        gyroRawSpeed_ = value;
      }
    }

    /// <summary>Field number for the "gyro_filtered_speed" field.</summary>
    public const int GyroFilteredSpeedFieldNumber = 4;
    private global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles gyroFilteredSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles GyroFilteredSpeed {
      get { return gyroFilteredSpeed_; }
      set {
        gyroFilteredSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSteamInputService_GyroSpeedChanged_Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSteamInputService_GyroSpeedChanged_Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControllerIndex != other.ControllerIndex) return false;
      if (ImuIndex != other.ImuIndex) return false;
      if (!object.Equals(GyroRawSpeed, other.GyroRawSpeed)) return false;
      if (!object.Equals(GyroFilteredSpeed, other.GyroFilteredSpeed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasControllerIndex) hash ^= ControllerIndex.GetHashCode();
      if (HasImuIndex) hash ^= ImuIndex.GetHashCode();
      if (gyroRawSpeed_ != null) hash ^= GyroRawSpeed.GetHashCode();
      if (gyroFilteredSpeed_ != null) hash ^= GyroFilteredSpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasImuIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImuIndex);
      }
      if (gyroRawSpeed_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GyroRawSpeed);
      }
      if (gyroFilteredSpeed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GyroFilteredSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasImuIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImuIndex);
      }
      if (gyroRawSpeed_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GyroRawSpeed);
      }
      if (gyroFilteredSpeed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GyroFilteredSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasControllerIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerIndex);
      }
      if (HasImuIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImuIndex);
      }
      if (gyroRawSpeed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GyroRawSpeed);
      }
      if (gyroFilteredSpeed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GyroFilteredSpeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSteamInputService_GyroSpeedChanged_Notification other) {
      if (other == null) {
        return;
      }
      if (other.HasControllerIndex) {
        ControllerIndex = other.ControllerIndex;
      }
      if (other.HasImuIndex) {
        ImuIndex = other.ImuIndex;
      }
      if (other.gyroRawSpeed_ != null) {
        if (gyroRawSpeed_ == null) {
          GyroRawSpeed = new global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles();
        }
        GyroRawSpeed.MergeFrom(other.GyroRawSpeed);
      }
      if (other.gyroFilteredSpeed_ != null) {
        if (gyroFilteredSpeed_ == null) {
          GyroFilteredSpeed = new global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles();
        }
        GyroFilteredSpeed.MergeFrom(other.GyroFilteredSpeed);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            ImuIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (gyroRawSpeed_ == null) {
              GyroRawSpeed = new global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles();
            }
            input.ReadMessage(GyroRawSpeed);
            break;
          }
          case 34: {
            if (gyroFilteredSpeed_ == null) {
              GyroFilteredSpeed = new global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles();
            }
            input.ReadMessage(GyroFilteredSpeed);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            ImuIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (gyroRawSpeed_ == null) {
              GyroRawSpeed = new global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles();
            }
            input.ReadMessage(GyroRawSpeed);
            break;
          }
          case 34: {
            if (gyroFilteredSpeed_ == null) {
              GyroFilteredSpeed = new global::OpenSteamworks.Protobuf.ControllerGyroEulerAngles();
            }
            input.ReadMessage(GyroFilteredSpeed);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSteamInputService_GyroAccelerometerChanged_Notification : pb::IMessage<CSteamInputService_GyroAccelerometerChanged_Notification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSteamInputService_GyroAccelerometerChanged_Notification> _parser = new pb::MessageParser<CSteamInputService_GyroAccelerometerChanged_Notification>(() => new CSteamInputService_GyroAccelerometerChanged_Notification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSteamInputService_GyroAccelerometerChanged_Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroAccelerometerChanged_Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroAccelerometerChanged_Notification(CSteamInputService_GyroAccelerometerChanged_Notification other) : this() {
      _hasBits0 = other._hasBits0;
      controllerIndex_ = other.controllerIndex_;
      imuIndex_ = other.imuIndex_;
      acceleromter1G_ = other.acceleromter1G_ != null ? other.acceleromter1G_.Clone() : null;
      trustedGravity1G_ = other.trustedGravity1G_ != null ? other.trustedGravity1G_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroAccelerometerChanged_Notification Clone() {
      return new CSteamInputService_GyroAccelerometerChanged_Notification(this);
    }

    /// <summary>Field number for the "controller_index" field.</summary>
    public const int ControllerIndexFieldNumber = 1;
    private readonly static uint ControllerIndexDefaultValue = 0;

    private uint controllerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ControllerIndex {
      get { if ((_hasBits0 & 1) != 0) { return controllerIndex_; } else { return ControllerIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        controllerIndex_ = value;
      }
    }
    /// <summary>Gets whether the "controller_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControllerIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "controller_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControllerIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "imu_index" field.</summary>
    public const int ImuIndexFieldNumber = 2;
    private readonly static uint ImuIndexDefaultValue = 0;

    private uint imuIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ImuIndex {
      get { if ((_hasBits0 & 2) != 0) { return imuIndex_; } else { return ImuIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        imuIndex_ = value;
      }
    }
    /// <summary>Gets whether the "imu_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImuIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "imu_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImuIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "acceleromter_1g" field.</summary>
    public const int Acceleromter1GFieldNumber = 4;
    private global::OpenSteamworks.Protobuf.ControllerVector3 acceleromter1G_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerVector3 Acceleromter1G {
      get { return acceleromter1G_; }
      set {
        acceleromter1G_ = value;
      }
    }

    /// <summary>Field number for the "trusted_gravity_1g" field.</summary>
    public const int TrustedGravity1GFieldNumber = 5;
    private global::OpenSteamworks.Protobuf.ControllerVector3 trustedGravity1G_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.ControllerVector3 TrustedGravity1G {
      get { return trustedGravity1G_; }
      set {
        trustedGravity1G_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSteamInputService_GyroAccelerometerChanged_Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSteamInputService_GyroAccelerometerChanged_Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControllerIndex != other.ControllerIndex) return false;
      if (ImuIndex != other.ImuIndex) return false;
      if (!object.Equals(Acceleromter1G, other.Acceleromter1G)) return false;
      if (!object.Equals(TrustedGravity1G, other.TrustedGravity1G)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasControllerIndex) hash ^= ControllerIndex.GetHashCode();
      if (HasImuIndex) hash ^= ImuIndex.GetHashCode();
      if (acceleromter1G_ != null) hash ^= Acceleromter1G.GetHashCode();
      if (trustedGravity1G_ != null) hash ^= TrustedGravity1G.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasImuIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImuIndex);
      }
      if (acceleromter1G_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Acceleromter1G);
      }
      if (trustedGravity1G_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TrustedGravity1G);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasImuIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImuIndex);
      }
      if (acceleromter1G_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Acceleromter1G);
      }
      if (trustedGravity1G_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TrustedGravity1G);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasControllerIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerIndex);
      }
      if (HasImuIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImuIndex);
      }
      if (acceleromter1G_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleromter1G);
      }
      if (trustedGravity1G_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrustedGravity1G);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSteamInputService_GyroAccelerometerChanged_Notification other) {
      if (other == null) {
        return;
      }
      if (other.HasControllerIndex) {
        ControllerIndex = other.ControllerIndex;
      }
      if (other.HasImuIndex) {
        ImuIndex = other.ImuIndex;
      }
      if (other.acceleromter1G_ != null) {
        if (acceleromter1G_ == null) {
          Acceleromter1G = new global::OpenSteamworks.Protobuf.ControllerVector3();
        }
        Acceleromter1G.MergeFrom(other.Acceleromter1G);
      }
      if (other.trustedGravity1G_ != null) {
        if (trustedGravity1G_ == null) {
          TrustedGravity1G = new global::OpenSteamworks.Protobuf.ControllerVector3();
        }
        TrustedGravity1G.MergeFrom(other.TrustedGravity1G);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            ImuIndex = input.ReadUInt32();
            break;
          }
          case 34: {
            if (acceleromter1G_ == null) {
              Acceleromter1G = new global::OpenSteamworks.Protobuf.ControllerVector3();
            }
            input.ReadMessage(Acceleromter1G);
            break;
          }
          case 42: {
            if (trustedGravity1G_ == null) {
              TrustedGravity1G = new global::OpenSteamworks.Protobuf.ControllerVector3();
            }
            input.ReadMessage(TrustedGravity1G);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            ImuIndex = input.ReadUInt32();
            break;
          }
          case 34: {
            if (acceleromter1G_ == null) {
              Acceleromter1G = new global::OpenSteamworks.Protobuf.ControllerVector3();
            }
            input.ReadMessage(Acceleromter1G);
            break;
          }
          case 42: {
            if (trustedGravity1G_ == null) {
              TrustedGravity1G = new global::OpenSteamworks.Protobuf.ControllerVector3();
            }
            input.ReadMessage(TrustedGravity1G);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSteamInputService_GyroCalibration_Notification : pb::IMessage<CSteamInputService_GyroCalibration_Notification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSteamInputService_GyroCalibration_Notification> _parser = new pb::MessageParser<CSteamInputService_GyroCalibration_Notification>(() => new CSteamInputService_GyroCalibration_Notification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSteamInputService_GyroCalibration_Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroCalibration_Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroCalibration_Notification(CSteamInputService_GyroCalibration_Notification other) : this() {
      _hasBits0 = other._hasBits0;
      controllerIndex_ = other.controllerIndex_;
      imuIndex_ = other.imuIndex_;
      acceleromterNoise_ = other.acceleromterNoise_;
      gyroscopeNoise_ = other.gyroscopeNoise_;
      calibrationProgress_ = other.calibrationProgress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_GyroCalibration_Notification Clone() {
      return new CSteamInputService_GyroCalibration_Notification(this);
    }

    /// <summary>Field number for the "controller_index" field.</summary>
    public const int ControllerIndexFieldNumber = 1;
    private readonly static uint ControllerIndexDefaultValue = 0;

    private uint controllerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ControllerIndex {
      get { if ((_hasBits0 & 1) != 0) { return controllerIndex_; } else { return ControllerIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        controllerIndex_ = value;
      }
    }
    /// <summary>Gets whether the "controller_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControllerIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "controller_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControllerIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "imu_index" field.</summary>
    public const int ImuIndexFieldNumber = 2;
    private readonly static uint ImuIndexDefaultValue = 0;

    private uint imuIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ImuIndex {
      get { if ((_hasBits0 & 2) != 0) { return imuIndex_; } else { return ImuIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        imuIndex_ = value;
      }
    }
    /// <summary>Gets whether the "imu_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImuIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "imu_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImuIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "acceleromter_noise" field.</summary>
    public const int AcceleromterNoiseFieldNumber = 3;
    private readonly static float AcceleromterNoiseDefaultValue = 0F;

    private float acceleromterNoise_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AcceleromterNoise {
      get { if ((_hasBits0 & 4) != 0) { return acceleromterNoise_; } else { return AcceleromterNoiseDefaultValue; } }
      set {
        _hasBits0 |= 4;
        acceleromterNoise_ = value;
      }
    }
    /// <summary>Gets whether the "acceleromter_noise" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAcceleromterNoise {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "acceleromter_noise" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAcceleromterNoise() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gyroscope_noise" field.</summary>
    public const int GyroscopeNoiseFieldNumber = 4;
    private readonly static float GyroscopeNoiseDefaultValue = 0F;

    private float gyroscopeNoise_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GyroscopeNoise {
      get { if ((_hasBits0 & 8) != 0) { return gyroscopeNoise_; } else { return GyroscopeNoiseDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gyroscopeNoise_ = value;
      }
    }
    /// <summary>Gets whether the "gyroscope_noise" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGyroscopeNoise {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gyroscope_noise" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGyroscopeNoise() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "calibration_progress" field.</summary>
    public const int CalibrationProgressFieldNumber = 5;
    private readonly static float CalibrationProgressDefaultValue = 0F;

    private float calibrationProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CalibrationProgress {
      get { if ((_hasBits0 & 16) != 0) { return calibrationProgress_; } else { return CalibrationProgressDefaultValue; } }
      set {
        _hasBits0 |= 16;
        calibrationProgress_ = value;
      }
    }
    /// <summary>Gets whether the "calibration_progress" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCalibrationProgress {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "calibration_progress" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCalibrationProgress() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSteamInputService_GyroCalibration_Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSteamInputService_GyroCalibration_Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControllerIndex != other.ControllerIndex) return false;
      if (ImuIndex != other.ImuIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AcceleromterNoise, other.AcceleromterNoise)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GyroscopeNoise, other.GyroscopeNoise)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CalibrationProgress, other.CalibrationProgress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasControllerIndex) hash ^= ControllerIndex.GetHashCode();
      if (HasImuIndex) hash ^= ImuIndex.GetHashCode();
      if (HasAcceleromterNoise) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AcceleromterNoise);
      if (HasGyroscopeNoise) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GyroscopeNoise);
      if (HasCalibrationProgress) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CalibrationProgress);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasImuIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImuIndex);
      }
      if (HasAcceleromterNoise) {
        output.WriteRawTag(29);
        output.WriteFloat(AcceleromterNoise);
      }
      if (HasGyroscopeNoise) {
        output.WriteRawTag(37);
        output.WriteFloat(GyroscopeNoise);
      }
      if (HasCalibrationProgress) {
        output.WriteRawTag(45);
        output.WriteFloat(CalibrationProgress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasImuIndex) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImuIndex);
      }
      if (HasAcceleromterNoise) {
        output.WriteRawTag(29);
        output.WriteFloat(AcceleromterNoise);
      }
      if (HasGyroscopeNoise) {
        output.WriteRawTag(37);
        output.WriteFloat(GyroscopeNoise);
      }
      if (HasCalibrationProgress) {
        output.WriteRawTag(45);
        output.WriteFloat(CalibrationProgress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasControllerIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerIndex);
      }
      if (HasImuIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImuIndex);
      }
      if (HasAcceleromterNoise) {
        size += 1 + 4;
      }
      if (HasGyroscopeNoise) {
        size += 1 + 4;
      }
      if (HasCalibrationProgress) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSteamInputService_GyroCalibration_Notification other) {
      if (other == null) {
        return;
      }
      if (other.HasControllerIndex) {
        ControllerIndex = other.ControllerIndex;
      }
      if (other.HasImuIndex) {
        ImuIndex = other.ImuIndex;
      }
      if (other.HasAcceleromterNoise) {
        AcceleromterNoise = other.AcceleromterNoise;
      }
      if (other.HasGyroscopeNoise) {
        GyroscopeNoise = other.GyroscopeNoise;
      }
      if (other.HasCalibrationProgress) {
        CalibrationProgress = other.CalibrationProgress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            ImuIndex = input.ReadUInt32();
            break;
          }
          case 29: {
            AcceleromterNoise = input.ReadFloat();
            break;
          }
          case 37: {
            GyroscopeNoise = input.ReadFloat();
            break;
          }
          case 45: {
            CalibrationProgress = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            ImuIndex = input.ReadUInt32();
            break;
          }
          case 29: {
            AcceleromterNoise = input.ReadFloat();
            break;
          }
          case 37: {
            GyroscopeNoise = input.ReadFloat();
            break;
          }
          case 45: {
            CalibrationProgress = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSteamInputService_ControllerStateFlow_Request : pb::IMessage<CSteamInputService_ControllerStateFlow_Request>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSteamInputService_ControllerStateFlow_Request> _parser = new pb::MessageParser<CSteamInputService_ControllerStateFlow_Request>(() => new CSteamInputService_ControllerStateFlow_Request());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSteamInputService_ControllerStateFlow_Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerStateFlow_Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerStateFlow_Request(CSteamInputService_ControllerStateFlow_Request other) : this() {
      _hasBits0 = other._hasBits0;
      controllerIndex_ = other.controllerIndex_;
      flowMode_ = other.flowMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerStateFlow_Request Clone() {
      return new CSteamInputService_ControllerStateFlow_Request(this);
    }

    /// <summary>Field number for the "controller_index" field.</summary>
    public const int ControllerIndexFieldNumber = 1;
    private readonly static uint ControllerIndexDefaultValue = 0;

    private uint controllerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ControllerIndex {
      get { if ((_hasBits0 & 1) != 0) { return controllerIndex_; } else { return ControllerIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        controllerIndex_ = value;
      }
    }
    /// <summary>Gets whether the "controller_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControllerIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "controller_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControllerIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "flow_mode" field.</summary>
    public const int FlowModeFieldNumber = 2;
    private readonly static uint FlowModeDefaultValue = 0;

    private uint flowMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FlowMode {
      get { if ((_hasBits0 & 2) != 0) { return flowMode_; } else { return FlowModeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        flowMode_ = value;
      }
    }
    /// <summary>Gets whether the "flow_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlowMode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "flow_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlowMode() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSteamInputService_ControllerStateFlow_Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSteamInputService_ControllerStateFlow_Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ControllerIndex != other.ControllerIndex) return false;
      if (FlowMode != other.FlowMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasControllerIndex) hash ^= ControllerIndex.GetHashCode();
      if (HasFlowMode) hash ^= FlowMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasFlowMode) {
        output.WriteRawTag(16);
        output.WriteUInt32(FlowMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasControllerIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(ControllerIndex);
      }
      if (HasFlowMode) {
        output.WriteRawTag(16);
        output.WriteUInt32(FlowMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasControllerIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerIndex);
      }
      if (HasFlowMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FlowMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSteamInputService_ControllerStateFlow_Request other) {
      if (other == null) {
        return;
      }
      if (other.HasControllerIndex) {
        ControllerIndex = other.ControllerIndex;
      }
      if (other.HasFlowMode) {
        FlowMode = other.FlowMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            FlowMode = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ControllerIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            FlowMode = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CSteamInputService_ControllerStateFlow_Response : pb::IMessage<CSteamInputService_ControllerStateFlow_Response>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSteamInputService_ControllerStateFlow_Response> _parser = new pb::MessageParser<CSteamInputService_ControllerStateFlow_Response>(() => new CSteamInputService_ControllerStateFlow_Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CSteamInputService_ControllerStateFlow_Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesSteaminputReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerStateFlow_Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerStateFlow_Response(CSteamInputService_ControllerStateFlow_Response other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CSteamInputService_ControllerStateFlow_Response Clone() {
      return new CSteamInputService_ControllerStateFlow_Response(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CSteamInputService_ControllerStateFlow_Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CSteamInputService_ControllerStateFlow_Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CSteamInputService_ControllerStateFlow_Response other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
