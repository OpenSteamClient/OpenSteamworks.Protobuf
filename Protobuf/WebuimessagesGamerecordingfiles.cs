// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: webuimessages_gamerecordingfiles.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenSteamworks.Protobuf {

  /// <summary>Holder for reflection information generated from webuimessages_gamerecordingfiles.proto</summary>
  public static partial class WebuimessagesGamerecordingfilesReflection {

    #region Descriptor
    /// <summary>File descriptor for webuimessages_gamerecordingfiles.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WebuimessagesGamerecordingfilesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZ3ZWJ1aW1lc3NhZ2VzX2dhbWVyZWNvcmRpbmdmaWxlcy5wcm90bxogZ29v",
            "Z2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8aC2VudW1zLnByb3RvGhhz",
            "dGVhbW1lc3NhZ2VzX2Jhc2UucHJvdG8aGHdlYnVpbWVzc2FnZXNfYmFzZS5w",
            "cm90byKaAQoSQ0dhbWVSZWNvcmRpbmdGaWxlEjIKCXRpbWVsaW5lcxgBIAMo",
            "CzIfLkNHYW1lUmVjb3JkaW5nVGltZWxpbmVNZXRhZGF0YRI3Cg9wb3N0Z2Ft",
            "ZV9ldmVudHMYAiADKAsyHi5DR2FtZVJlY29yZGluZ1Bvc3RHYW1lU3VtbWFy",
            "eRIXCg90ZW1wb3JhcnlfY2xpcHMYAyADKAki+QIKFkNHYW1lUmVjb3JkaW5n",
            "Q2xpcEZpbGUSMgoJdGltZWxpbmVzGAEgAygLMh8uQ0dhbWVSZWNvcmRpbmdU",
            "aW1lbGluZU1ldGFkYXRhEiYKHmZpcnN0X3RpbWVsaW5lX3N0YXJ0X29mZnNl",
            "dF9tcxgCIAEoBBIVCg1kYXRlX3JlY29yZGVkGAMgASgNEg8KB2dhbWVfaWQY",
            "BCABKAQSGQoRcHVibGlzaGVkX2ZpbGVfaWQYBSABKAYSFQoNc2l6ZV9pbl9i",
            "eXRlcxgGIAEoBBIMCgRuYW1lGAcgASgJEhEKCXRlbXBvcmFyeRgIIAEoCBIX",
            "Cg9vcmlnaW5hbF9kZXZpY2UYCSABKAkSIwobb3JpZ2luYWxfZ2FtaW5nX2Rl",
            "dmljZV90eXBlGAogASgNEhcKD2RhdGVfZG93bmxvYWRlZBgLIAEoDRIXCg90",
            "aHVtYm5haWxfd2lkdGgYDCABKA0SGAoQdGh1bWJuYWlsX2hlaWdodBgNIAEo",
            "DSL+AwoeQ0dhbWVSZWNvcmRpbmdUaW1lbGluZU1ldGFkYXRhEhMKC3RpbWVs",
            "aW5lX2lkGAEgASgJEg8KB2dhbWVfaWQYAiABKAQSFQoNZGF0ZV9yZWNvcmRl",
            "ZBgDIAEoDRITCgtkdXJhdGlvbl9tcxgEIAEoBBI9CgpyZWNvcmRpbmdzGAUg",
            "AygLMikuQ0dhbWVSZWNvcmRpbmdUaW1lbGluZU1ldGFkYXRhLlJlY29yZGlu",
            "ZxrKAgoJUmVjb3JkaW5nEhQKDHJlY29yZGluZ19pZBgBIAEoCRIXCg9zdGFy",
            "dF9vZmZzZXRfbXMYAiABKAQSEwoLZHVyYXRpb25fbXMYAyABKAQSRwoOcmVj",
            "b3JkaW5nX3R5cGUYBCABKA4yEy5FR2FtZVJlY29yZGluZ1R5cGU6GkVHYW1l",
            "UmVjb3JkaW5nVHlwZV9Vbmtub3duEhkKEWRlbGV0ZV9vbl9jbGVhbnVwGAUg",
            "ASgIEh0KFXZpZGVvX21hbmFnZXJfY2xpcF9pZBgGIAEoBBIeChZ2aWRlb19t",
            "YW5hZ2VyX3ZpZGVvX2lkGAcgASgEEhgKEGNkbl9tYW5pZmVzdF91cmwYCCAB",
            "KAkSEQoJZmlsZV9zaXplGAkgASgEEikKIXJlY29yZGluZ196ZXJvX3RpbWVs",
            "aW5lX29mZnNldF9tcxgKIAEoBCJeCh1DR2FtZVJlY29yZGluZ1Bvc3RHYW1l",
            "U3VtbWFyeRIPCgdnYW1lX2lkGAEgASgEEiwKBmV2ZW50cxgCIAMoCzIcLkNH",
            "YW1lUmVjb3JkaW5nVGltZWxpbmVFdmVudCLxAQobQ0dhbWVSZWNvcmRpbmdU",
            "aW1lbGluZUV2ZW50Eg8KB2dhbWVfaWQYASABKAQSEgoKcnRfY3JlYXRlZBgC",
            "IAEoDRIVCg1wb3NzaWJsZV9jbGlwGAMgASgFEhMKC3RpbWVsaW5lX2lkGAQg",
            "ASgJEhAKCGVudHJ5X2lkGAUgASgEEhoKEnRpbWVsaW5lX29mZnNldF9tcxgG",
            "IAEoBBITCgtkdXJhdGlvbl9tcxgHIAEoBBITCgttYXJrZXJfaWNvbhgIIAEo",
            "CRIUCgxtYXJrZXJfdGl0bGUYCSABKAkSEwoLdXNlcl9tYXJrZXIYCiABKAhC",
            "H0gBgAEBqgIXT3BlblN0ZWFtd29ya3MuUHJvdG9idWY="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, global::OpenSteamworks.Protobuf.EnumsReflection.Descriptor, global::OpenSteamworks.Protobuf.SteammessagesBaseReflection.Descriptor, global::OpenSteamworks.Protobuf.WebuimessagesBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CGameRecordingFile), global::OpenSteamworks.Protobuf.CGameRecordingFile.Parser, new[]{ "Timelines", "PostgameEvents", "TemporaryClips" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CGameRecordingClipFile), global::OpenSteamworks.Protobuf.CGameRecordingClipFile.Parser, new[]{ "Timelines", "FirstTimelineStartOffsetMs", "DateRecorded", "GameId", "PublishedFileId", "SizeInBytes", "Name", "Temporary", "OriginalDevice", "OriginalGamingDeviceType", "DateDownloaded", "ThumbnailWidth", "ThumbnailHeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata), global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Parser, new[]{ "TimelineId", "GameId", "DateRecorded", "DurationMs", "Recordings" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Types.Recording), global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Types.Recording.Parser, new[]{ "RecordingId", "StartOffsetMs", "DurationMs", "RecordingType", "DeleteOnCleanup", "VideoManagerClipId", "VideoManagerVideoId", "CdnManifestUrl", "FileSize", "RecordingZeroTimelineOffsetMs" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CGameRecordingPostGameSummary), global::OpenSteamworks.Protobuf.CGameRecordingPostGameSummary.Parser, new[]{ "GameId", "Events" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CGameRecordingTimelineEvent), global::OpenSteamworks.Protobuf.CGameRecordingTimelineEvent.Parser, new[]{ "GameId", "RtCreated", "PossibleClip", "TimelineId", "EntryId", "TimelineOffsetMs", "DurationMs", "MarkerIcon", "MarkerTitle", "UserMarker" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CGameRecordingFile : pb::IMessage<CGameRecordingFile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGameRecordingFile> _parser = new pb::MessageParser<CGameRecordingFile>(() => new CGameRecordingFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CGameRecordingFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesGamerecordingfilesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingFile(CGameRecordingFile other) : this() {
      timelines_ = other.timelines_.Clone();
      postgameEvents_ = other.postgameEvents_.Clone();
      temporaryClips_ = other.temporaryClips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingFile Clone() {
      return new CGameRecordingFile(this);
    }

    /// <summary>Field number for the "timelines" field.</summary>
    public const int TimelinesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata> _repeated_timelines_codec
        = pb::FieldCodec.ForMessage(10, global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata> timelines_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata> Timelines {
      get { return timelines_; }
    }

    /// <summary>Field number for the "postgame_events" field.</summary>
    public const int PostgameEventsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CGameRecordingPostGameSummary> _repeated_postgameEvents_codec
        = pb::FieldCodec.ForMessage(18, global::OpenSteamworks.Protobuf.CGameRecordingPostGameSummary.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingPostGameSummary> postgameEvents_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingPostGameSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingPostGameSummary> PostgameEvents {
      get { return postgameEvents_; }
    }

    /// <summary>Field number for the "temporary_clips" field.</summary>
    public const int TemporaryClipsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_temporaryClips_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> temporaryClips_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> TemporaryClips {
      get { return temporaryClips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CGameRecordingFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CGameRecordingFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!timelines_.Equals(other.timelines_)) return false;
      if(!postgameEvents_.Equals(other.postgameEvents_)) return false;
      if(!temporaryClips_.Equals(other.temporaryClips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= timelines_.GetHashCode();
      hash ^= postgameEvents_.GetHashCode();
      hash ^= temporaryClips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      timelines_.WriteTo(output, _repeated_timelines_codec);
      postgameEvents_.WriteTo(output, _repeated_postgameEvents_codec);
      temporaryClips_.WriteTo(output, _repeated_temporaryClips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      timelines_.WriteTo(ref output, _repeated_timelines_codec);
      postgameEvents_.WriteTo(ref output, _repeated_postgameEvents_codec);
      temporaryClips_.WriteTo(ref output, _repeated_temporaryClips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += timelines_.CalculateSize(_repeated_timelines_codec);
      size += postgameEvents_.CalculateSize(_repeated_postgameEvents_codec);
      size += temporaryClips_.CalculateSize(_repeated_temporaryClips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CGameRecordingFile other) {
      if (other == null) {
        return;
      }
      timelines_.Add(other.timelines_);
      postgameEvents_.Add(other.postgameEvents_);
      temporaryClips_.Add(other.temporaryClips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            timelines_.AddEntriesFrom(input, _repeated_timelines_codec);
            break;
          }
          case 18: {
            postgameEvents_.AddEntriesFrom(input, _repeated_postgameEvents_codec);
            break;
          }
          case 26: {
            temporaryClips_.AddEntriesFrom(input, _repeated_temporaryClips_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            timelines_.AddEntriesFrom(ref input, _repeated_timelines_codec);
            break;
          }
          case 18: {
            postgameEvents_.AddEntriesFrom(ref input, _repeated_postgameEvents_codec);
            break;
          }
          case 26: {
            temporaryClips_.AddEntriesFrom(ref input, _repeated_temporaryClips_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CGameRecordingClipFile : pb::IMessage<CGameRecordingClipFile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGameRecordingClipFile> _parser = new pb::MessageParser<CGameRecordingClipFile>(() => new CGameRecordingClipFile());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CGameRecordingClipFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesGamerecordingfilesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingClipFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingClipFile(CGameRecordingClipFile other) : this() {
      _hasBits0 = other._hasBits0;
      timelines_ = other.timelines_.Clone();
      firstTimelineStartOffsetMs_ = other.firstTimelineStartOffsetMs_;
      dateRecorded_ = other.dateRecorded_;
      gameId_ = other.gameId_;
      publishedFileId_ = other.publishedFileId_;
      sizeInBytes_ = other.sizeInBytes_;
      name_ = other.name_;
      temporary_ = other.temporary_;
      originalDevice_ = other.originalDevice_;
      originalGamingDeviceType_ = other.originalGamingDeviceType_;
      dateDownloaded_ = other.dateDownloaded_;
      thumbnailWidth_ = other.thumbnailWidth_;
      thumbnailHeight_ = other.thumbnailHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingClipFile Clone() {
      return new CGameRecordingClipFile(this);
    }

    /// <summary>Field number for the "timelines" field.</summary>
    public const int TimelinesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata> _repeated_timelines_codec
        = pb::FieldCodec.ForMessage(10, global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata> timelines_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata> Timelines {
      get { return timelines_; }
    }

    /// <summary>Field number for the "first_timeline_start_offset_ms" field.</summary>
    public const int FirstTimelineStartOffsetMsFieldNumber = 2;
    private readonly static ulong FirstTimelineStartOffsetMsDefaultValue = 0UL;

    private ulong firstTimelineStartOffsetMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FirstTimelineStartOffsetMs {
      get { if ((_hasBits0 & 1) != 0) { return firstTimelineStartOffsetMs_; } else { return FirstTimelineStartOffsetMsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        firstTimelineStartOffsetMs_ = value;
      }
    }
    /// <summary>Gets whether the "first_timeline_start_offset_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFirstTimelineStartOffsetMs {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "first_timeline_start_offset_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFirstTimelineStartOffsetMs() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "date_recorded" field.</summary>
    public const int DateRecordedFieldNumber = 3;
    private readonly static uint DateRecordedDefaultValue = 0;

    private uint dateRecorded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DateRecorded {
      get { if ((_hasBits0 & 2) != 0) { return dateRecorded_; } else { return DateRecordedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dateRecorded_ = value;
      }
    }
    /// <summary>Gets whether the "date_recorded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDateRecorded {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "date_recorded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDateRecorded() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 4;
    private readonly static ulong GameIdDefaultValue = 0UL;

    private ulong gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong GameId {
      get { if ((_hasBits0 & 4) != 0) { return gameId_; } else { return GameIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gameId_ = value;
      }
    }
    /// <summary>Gets whether the "game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "published_file_id" field.</summary>
    public const int PublishedFileIdFieldNumber = 5;
    private readonly static ulong PublishedFileIdDefaultValue = 0UL;

    private ulong publishedFileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PublishedFileId {
      get { if ((_hasBits0 & 8) != 0) { return publishedFileId_; } else { return PublishedFileIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        publishedFileId_ = value;
      }
    }
    /// <summary>Gets whether the "published_file_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPublishedFileId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "published_file_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPublishedFileId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "size_in_bytes" field.</summary>
    public const int SizeInBytesFieldNumber = 6;
    private readonly static ulong SizeInBytesDefaultValue = 0UL;

    private ulong sizeInBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SizeInBytes {
      get { if ((_hasBits0 & 16) != 0) { return sizeInBytes_; } else { return SizeInBytesDefaultValue; } }
      set {
        _hasBits0 |= 16;
        sizeInBytes_ = value;
      }
    }
    /// <summary>Gets whether the "size_in_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSizeInBytes {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "size_in_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSizeInBytes() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "temporary" field.</summary>
    public const int TemporaryFieldNumber = 8;
    private readonly static bool TemporaryDefaultValue = false;

    private bool temporary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Temporary {
      get { if ((_hasBits0 & 32) != 0) { return temporary_; } else { return TemporaryDefaultValue; } }
      set {
        _hasBits0 |= 32;
        temporary_ = value;
      }
    }
    /// <summary>Gets whether the "temporary" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTemporary {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "temporary" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTemporary() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "original_device" field.</summary>
    public const int OriginalDeviceFieldNumber = 9;
    private readonly static string OriginalDeviceDefaultValue = "";

    private string originalDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OriginalDevice {
      get { return originalDevice_ ?? OriginalDeviceDefaultValue; }
      set {
        originalDevice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_device" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOriginalDevice {
      get { return originalDevice_ != null; }
    }
    /// <summary>Clears the value of the "original_device" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOriginalDevice() {
      originalDevice_ = null;
    }

    /// <summary>Field number for the "original_gaming_device_type" field.</summary>
    public const int OriginalGamingDeviceTypeFieldNumber = 10;
    private readonly static uint OriginalGamingDeviceTypeDefaultValue = 0;

    private uint originalGamingDeviceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OriginalGamingDeviceType {
      get { if ((_hasBits0 & 64) != 0) { return originalGamingDeviceType_; } else { return OriginalGamingDeviceTypeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        originalGamingDeviceType_ = value;
      }
    }
    /// <summary>Gets whether the "original_gaming_device_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOriginalGamingDeviceType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "original_gaming_device_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOriginalGamingDeviceType() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "date_downloaded" field.</summary>
    public const int DateDownloadedFieldNumber = 11;
    private readonly static uint DateDownloadedDefaultValue = 0;

    private uint dateDownloaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DateDownloaded {
      get { if ((_hasBits0 & 128) != 0) { return dateDownloaded_; } else { return DateDownloadedDefaultValue; } }
      set {
        _hasBits0 |= 128;
        dateDownloaded_ = value;
      }
    }
    /// <summary>Gets whether the "date_downloaded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDateDownloaded {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "date_downloaded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDateDownloaded() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "thumbnail_width" field.</summary>
    public const int ThumbnailWidthFieldNumber = 12;
    private readonly static uint ThumbnailWidthDefaultValue = 0;

    private uint thumbnailWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ThumbnailWidth {
      get { if ((_hasBits0 & 256) != 0) { return thumbnailWidth_; } else { return ThumbnailWidthDefaultValue; } }
      set {
        _hasBits0 |= 256;
        thumbnailWidth_ = value;
      }
    }
    /// <summary>Gets whether the "thumbnail_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThumbnailWidth {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "thumbnail_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThumbnailWidth() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "thumbnail_height" field.</summary>
    public const int ThumbnailHeightFieldNumber = 13;
    private readonly static uint ThumbnailHeightDefaultValue = 0;

    private uint thumbnailHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ThumbnailHeight {
      get { if ((_hasBits0 & 512) != 0) { return thumbnailHeight_; } else { return ThumbnailHeightDefaultValue; } }
      set {
        _hasBits0 |= 512;
        thumbnailHeight_ = value;
      }
    }
    /// <summary>Gets whether the "thumbnail_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThumbnailHeight {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "thumbnail_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThumbnailHeight() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CGameRecordingClipFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CGameRecordingClipFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!timelines_.Equals(other.timelines_)) return false;
      if (FirstTimelineStartOffsetMs != other.FirstTimelineStartOffsetMs) return false;
      if (DateRecorded != other.DateRecorded) return false;
      if (GameId != other.GameId) return false;
      if (PublishedFileId != other.PublishedFileId) return false;
      if (SizeInBytes != other.SizeInBytes) return false;
      if (Name != other.Name) return false;
      if (Temporary != other.Temporary) return false;
      if (OriginalDevice != other.OriginalDevice) return false;
      if (OriginalGamingDeviceType != other.OriginalGamingDeviceType) return false;
      if (DateDownloaded != other.DateDownloaded) return false;
      if (ThumbnailWidth != other.ThumbnailWidth) return false;
      if (ThumbnailHeight != other.ThumbnailHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= timelines_.GetHashCode();
      if (HasFirstTimelineStartOffsetMs) hash ^= FirstTimelineStartOffsetMs.GetHashCode();
      if (HasDateRecorded) hash ^= DateRecorded.GetHashCode();
      if (HasGameId) hash ^= GameId.GetHashCode();
      if (HasPublishedFileId) hash ^= PublishedFileId.GetHashCode();
      if (HasSizeInBytes) hash ^= SizeInBytes.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasTemporary) hash ^= Temporary.GetHashCode();
      if (HasOriginalDevice) hash ^= OriginalDevice.GetHashCode();
      if (HasOriginalGamingDeviceType) hash ^= OriginalGamingDeviceType.GetHashCode();
      if (HasDateDownloaded) hash ^= DateDownloaded.GetHashCode();
      if (HasThumbnailWidth) hash ^= ThumbnailWidth.GetHashCode();
      if (HasThumbnailHeight) hash ^= ThumbnailHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      timelines_.WriteTo(output, _repeated_timelines_codec);
      if (HasFirstTimelineStartOffsetMs) {
        output.WriteRawTag(16);
        output.WriteUInt64(FirstTimelineStartOffsetMs);
      }
      if (HasDateRecorded) {
        output.WriteRawTag(24);
        output.WriteUInt32(DateRecorded);
      }
      if (HasGameId) {
        output.WriteRawTag(32);
        output.WriteUInt64(GameId);
      }
      if (HasPublishedFileId) {
        output.WriteRawTag(41);
        output.WriteFixed64(PublishedFileId);
      }
      if (HasSizeInBytes) {
        output.WriteRawTag(48);
        output.WriteUInt64(SizeInBytes);
      }
      if (HasName) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (HasTemporary) {
        output.WriteRawTag(64);
        output.WriteBool(Temporary);
      }
      if (HasOriginalDevice) {
        output.WriteRawTag(74);
        output.WriteString(OriginalDevice);
      }
      if (HasOriginalGamingDeviceType) {
        output.WriteRawTag(80);
        output.WriteUInt32(OriginalGamingDeviceType);
      }
      if (HasDateDownloaded) {
        output.WriteRawTag(88);
        output.WriteUInt32(DateDownloaded);
      }
      if (HasThumbnailWidth) {
        output.WriteRawTag(96);
        output.WriteUInt32(ThumbnailWidth);
      }
      if (HasThumbnailHeight) {
        output.WriteRawTag(104);
        output.WriteUInt32(ThumbnailHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      timelines_.WriteTo(ref output, _repeated_timelines_codec);
      if (HasFirstTimelineStartOffsetMs) {
        output.WriteRawTag(16);
        output.WriteUInt64(FirstTimelineStartOffsetMs);
      }
      if (HasDateRecorded) {
        output.WriteRawTag(24);
        output.WriteUInt32(DateRecorded);
      }
      if (HasGameId) {
        output.WriteRawTag(32);
        output.WriteUInt64(GameId);
      }
      if (HasPublishedFileId) {
        output.WriteRawTag(41);
        output.WriteFixed64(PublishedFileId);
      }
      if (HasSizeInBytes) {
        output.WriteRawTag(48);
        output.WriteUInt64(SizeInBytes);
      }
      if (HasName) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (HasTemporary) {
        output.WriteRawTag(64);
        output.WriteBool(Temporary);
      }
      if (HasOriginalDevice) {
        output.WriteRawTag(74);
        output.WriteString(OriginalDevice);
      }
      if (HasOriginalGamingDeviceType) {
        output.WriteRawTag(80);
        output.WriteUInt32(OriginalGamingDeviceType);
      }
      if (HasDateDownloaded) {
        output.WriteRawTag(88);
        output.WriteUInt32(DateDownloaded);
      }
      if (HasThumbnailWidth) {
        output.WriteRawTag(96);
        output.WriteUInt32(ThumbnailWidth);
      }
      if (HasThumbnailHeight) {
        output.WriteRawTag(104);
        output.WriteUInt32(ThumbnailHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += timelines_.CalculateSize(_repeated_timelines_codec);
      if (HasFirstTimelineStartOffsetMs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstTimelineStartOffsetMs);
      }
      if (HasDateRecorded) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DateRecorded);
      }
      if (HasGameId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameId);
      }
      if (HasPublishedFileId) {
        size += 1 + 8;
      }
      if (HasSizeInBytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SizeInBytes);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasTemporary) {
        size += 1 + 1;
      }
      if (HasOriginalDevice) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalDevice);
      }
      if (HasOriginalGamingDeviceType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginalGamingDeviceType);
      }
      if (HasDateDownloaded) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DateDownloaded);
      }
      if (HasThumbnailWidth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThumbnailWidth);
      }
      if (HasThumbnailHeight) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThumbnailHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CGameRecordingClipFile other) {
      if (other == null) {
        return;
      }
      timelines_.Add(other.timelines_);
      if (other.HasFirstTimelineStartOffsetMs) {
        FirstTimelineStartOffsetMs = other.FirstTimelineStartOffsetMs;
      }
      if (other.HasDateRecorded) {
        DateRecorded = other.DateRecorded;
      }
      if (other.HasGameId) {
        GameId = other.GameId;
      }
      if (other.HasPublishedFileId) {
        PublishedFileId = other.PublishedFileId;
      }
      if (other.HasSizeInBytes) {
        SizeInBytes = other.SizeInBytes;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasTemporary) {
        Temporary = other.Temporary;
      }
      if (other.HasOriginalDevice) {
        OriginalDevice = other.OriginalDevice;
      }
      if (other.HasOriginalGamingDeviceType) {
        OriginalGamingDeviceType = other.OriginalGamingDeviceType;
      }
      if (other.HasDateDownloaded) {
        DateDownloaded = other.DateDownloaded;
      }
      if (other.HasThumbnailWidth) {
        ThumbnailWidth = other.ThumbnailWidth;
      }
      if (other.HasThumbnailHeight) {
        ThumbnailHeight = other.ThumbnailHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            timelines_.AddEntriesFrom(input, _repeated_timelines_codec);
            break;
          }
          case 16: {
            FirstTimelineStartOffsetMs = input.ReadUInt64();
            break;
          }
          case 24: {
            DateRecorded = input.ReadUInt32();
            break;
          }
          case 32: {
            GameId = input.ReadUInt64();
            break;
          }
          case 41: {
            PublishedFileId = input.ReadFixed64();
            break;
          }
          case 48: {
            SizeInBytes = input.ReadUInt64();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            Temporary = input.ReadBool();
            break;
          }
          case 74: {
            OriginalDevice = input.ReadString();
            break;
          }
          case 80: {
            OriginalGamingDeviceType = input.ReadUInt32();
            break;
          }
          case 88: {
            DateDownloaded = input.ReadUInt32();
            break;
          }
          case 96: {
            ThumbnailWidth = input.ReadUInt32();
            break;
          }
          case 104: {
            ThumbnailHeight = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            timelines_.AddEntriesFrom(ref input, _repeated_timelines_codec);
            break;
          }
          case 16: {
            FirstTimelineStartOffsetMs = input.ReadUInt64();
            break;
          }
          case 24: {
            DateRecorded = input.ReadUInt32();
            break;
          }
          case 32: {
            GameId = input.ReadUInt64();
            break;
          }
          case 41: {
            PublishedFileId = input.ReadFixed64();
            break;
          }
          case 48: {
            SizeInBytes = input.ReadUInt64();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            Temporary = input.ReadBool();
            break;
          }
          case 74: {
            OriginalDevice = input.ReadString();
            break;
          }
          case 80: {
            OriginalGamingDeviceType = input.ReadUInt32();
            break;
          }
          case 88: {
            DateDownloaded = input.ReadUInt32();
            break;
          }
          case 96: {
            ThumbnailWidth = input.ReadUInt32();
            break;
          }
          case 104: {
            ThumbnailHeight = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CGameRecordingTimelineMetadata : pb::IMessage<CGameRecordingTimelineMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGameRecordingTimelineMetadata> _parser = new pb::MessageParser<CGameRecordingTimelineMetadata>(() => new CGameRecordingTimelineMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CGameRecordingTimelineMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesGamerecordingfilesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingTimelineMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingTimelineMetadata(CGameRecordingTimelineMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      timelineId_ = other.timelineId_;
      gameId_ = other.gameId_;
      dateRecorded_ = other.dateRecorded_;
      durationMs_ = other.durationMs_;
      recordings_ = other.recordings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingTimelineMetadata Clone() {
      return new CGameRecordingTimelineMetadata(this);
    }

    /// <summary>Field number for the "timeline_id" field.</summary>
    public const int TimelineIdFieldNumber = 1;
    private readonly static string TimelineIdDefaultValue = "";

    private string timelineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TimelineId {
      get { return timelineId_ ?? TimelineIdDefaultValue; }
      set {
        timelineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timeline_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimelineId {
      get { return timelineId_ != null; }
    }
    /// <summary>Clears the value of the "timeline_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimelineId() {
      timelineId_ = null;
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private readonly static ulong GameIdDefaultValue = 0UL;

    private ulong gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong GameId {
      get { if ((_hasBits0 & 1) != 0) { return gameId_; } else { return GameIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameId_ = value;
      }
    }
    /// <summary>Gets whether the "game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "date_recorded" field.</summary>
    public const int DateRecordedFieldNumber = 3;
    private readonly static uint DateRecordedDefaultValue = 0;

    private uint dateRecorded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DateRecorded {
      get { if ((_hasBits0 & 2) != 0) { return dateRecorded_; } else { return DateRecordedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dateRecorded_ = value;
      }
    }
    /// <summary>Gets whether the "date_recorded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDateRecorded {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "date_recorded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDateRecorded() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration_ms" field.</summary>
    public const int DurationMsFieldNumber = 4;
    private readonly static ulong DurationMsDefaultValue = 0UL;

    private ulong durationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong DurationMs {
      get { if ((_hasBits0 & 4) != 0) { return durationMs_; } else { return DurationMsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        durationMs_ = value;
      }
    }
    /// <summary>Gets whether the "duration_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDurationMs {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDurationMs() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "recordings" field.</summary>
    public const int RecordingsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Types.Recording> _repeated_recordings_codec
        = pb::FieldCodec.ForMessage(42, global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Types.Recording.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Types.Recording> recordings_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Types.Recording>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Types.Recording> Recordings {
      get { return recordings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CGameRecordingTimelineMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CGameRecordingTimelineMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimelineId != other.TimelineId) return false;
      if (GameId != other.GameId) return false;
      if (DateRecorded != other.DateRecorded) return false;
      if (DurationMs != other.DurationMs) return false;
      if(!recordings_.Equals(other.recordings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimelineId) hash ^= TimelineId.GetHashCode();
      if (HasGameId) hash ^= GameId.GetHashCode();
      if (HasDateRecorded) hash ^= DateRecorded.GetHashCode();
      if (HasDurationMs) hash ^= DurationMs.GetHashCode();
      hash ^= recordings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimelineId) {
        output.WriteRawTag(10);
        output.WriteString(TimelineId);
      }
      if (HasGameId) {
        output.WriteRawTag(16);
        output.WriteUInt64(GameId);
      }
      if (HasDateRecorded) {
        output.WriteRawTag(24);
        output.WriteUInt32(DateRecorded);
      }
      if (HasDurationMs) {
        output.WriteRawTag(32);
        output.WriteUInt64(DurationMs);
      }
      recordings_.WriteTo(output, _repeated_recordings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimelineId) {
        output.WriteRawTag(10);
        output.WriteString(TimelineId);
      }
      if (HasGameId) {
        output.WriteRawTag(16);
        output.WriteUInt64(GameId);
      }
      if (HasDateRecorded) {
        output.WriteRawTag(24);
        output.WriteUInt32(DateRecorded);
      }
      if (HasDurationMs) {
        output.WriteRawTag(32);
        output.WriteUInt64(DurationMs);
      }
      recordings_.WriteTo(ref output, _repeated_recordings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTimelineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimelineId);
      }
      if (HasGameId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameId);
      }
      if (HasDateRecorded) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DateRecorded);
      }
      if (HasDurationMs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DurationMs);
      }
      size += recordings_.CalculateSize(_repeated_recordings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CGameRecordingTimelineMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasTimelineId) {
        TimelineId = other.TimelineId;
      }
      if (other.HasGameId) {
        GameId = other.GameId;
      }
      if (other.HasDateRecorded) {
        DateRecorded = other.DateRecorded;
      }
      if (other.HasDurationMs) {
        DurationMs = other.DurationMs;
      }
      recordings_.Add(other.recordings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TimelineId = input.ReadString();
            break;
          }
          case 16: {
            GameId = input.ReadUInt64();
            break;
          }
          case 24: {
            DateRecorded = input.ReadUInt32();
            break;
          }
          case 32: {
            DurationMs = input.ReadUInt64();
            break;
          }
          case 42: {
            recordings_.AddEntriesFrom(input, _repeated_recordings_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TimelineId = input.ReadString();
            break;
          }
          case 16: {
            GameId = input.ReadUInt64();
            break;
          }
          case 24: {
            DateRecorded = input.ReadUInt32();
            break;
          }
          case 32: {
            DurationMs = input.ReadUInt64();
            break;
          }
          case 42: {
            recordings_.AddEntriesFrom(ref input, _repeated_recordings_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CGameRecordingTimelineMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Recording : pb::IMessage<Recording>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Recording> _parser = new pb::MessageParser<Recording>(() => new Recording());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Recording> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenSteamworks.Protobuf.CGameRecordingTimelineMetadata.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Recording() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Recording(Recording other) : this() {
          _hasBits0 = other._hasBits0;
          recordingId_ = other.recordingId_;
          startOffsetMs_ = other.startOffsetMs_;
          durationMs_ = other.durationMs_;
          recordingType_ = other.recordingType_;
          deleteOnCleanup_ = other.deleteOnCleanup_;
          videoManagerClipId_ = other.videoManagerClipId_;
          videoManagerVideoId_ = other.videoManagerVideoId_;
          cdnManifestUrl_ = other.cdnManifestUrl_;
          fileSize_ = other.fileSize_;
          recordingZeroTimelineOffsetMs_ = other.recordingZeroTimelineOffsetMs_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Recording Clone() {
          return new Recording(this);
        }

        /// <summary>Field number for the "recording_id" field.</summary>
        public const int RecordingIdFieldNumber = 1;
        private readonly static string RecordingIdDefaultValue = "";

        private string recordingId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string RecordingId {
          get { return recordingId_ ?? RecordingIdDefaultValue; }
          set {
            recordingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "recording_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRecordingId {
          get { return recordingId_ != null; }
        }
        /// <summary>Clears the value of the "recording_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRecordingId() {
          recordingId_ = null;
        }

        /// <summary>Field number for the "start_offset_ms" field.</summary>
        public const int StartOffsetMsFieldNumber = 2;
        private readonly static ulong StartOffsetMsDefaultValue = 0UL;

        private ulong startOffsetMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong StartOffsetMs {
          get { if ((_hasBits0 & 1) != 0) { return startOffsetMs_; } else { return StartOffsetMsDefaultValue; } }
          set {
            _hasBits0 |= 1;
            startOffsetMs_ = value;
          }
        }
        /// <summary>Gets whether the "start_offset_ms" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasStartOffsetMs {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "start_offset_ms" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearStartOffsetMs() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "duration_ms" field.</summary>
        public const int DurationMsFieldNumber = 3;
        private readonly static ulong DurationMsDefaultValue = 0UL;

        private ulong durationMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong DurationMs {
          get { if ((_hasBits0 & 2) != 0) { return durationMs_; } else { return DurationMsDefaultValue; } }
          set {
            _hasBits0 |= 2;
            durationMs_ = value;
          }
        }
        /// <summary>Gets whether the "duration_ms" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDurationMs {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "duration_ms" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDurationMs() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "recording_type" field.</summary>
        public const int RecordingTypeFieldNumber = 4;
        private readonly static global::OpenSteamworks.Protobuf.EGameRecordingType RecordingTypeDefaultValue = global::OpenSteamworks.Protobuf.EGameRecordingType.Unknown;

        private global::OpenSteamworks.Protobuf.EGameRecordingType recordingType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenSteamworks.Protobuf.EGameRecordingType RecordingType {
          get { if ((_hasBits0 & 4) != 0) { return recordingType_; } else { return RecordingTypeDefaultValue; } }
          set {
            _hasBits0 |= 4;
            recordingType_ = value;
          }
        }
        /// <summary>Gets whether the "recording_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRecordingType {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "recording_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRecordingType() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "delete_on_cleanup" field.</summary>
        public const int DeleteOnCleanupFieldNumber = 5;
        private readonly static bool DeleteOnCleanupDefaultValue = false;

        private bool deleteOnCleanup_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool DeleteOnCleanup {
          get { if ((_hasBits0 & 8) != 0) { return deleteOnCleanup_; } else { return DeleteOnCleanupDefaultValue; } }
          set {
            _hasBits0 |= 8;
            deleteOnCleanup_ = value;
          }
        }
        /// <summary>Gets whether the "delete_on_cleanup" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDeleteOnCleanup {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "delete_on_cleanup" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDeleteOnCleanup() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "video_manager_clip_id" field.</summary>
        public const int VideoManagerClipIdFieldNumber = 6;
        private readonly static ulong VideoManagerClipIdDefaultValue = 0UL;

        private ulong videoManagerClipId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong VideoManagerClipId {
          get { if ((_hasBits0 & 16) != 0) { return videoManagerClipId_; } else { return VideoManagerClipIdDefaultValue; } }
          set {
            _hasBits0 |= 16;
            videoManagerClipId_ = value;
          }
        }
        /// <summary>Gets whether the "video_manager_clip_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasVideoManagerClipId {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "video_manager_clip_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearVideoManagerClipId() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "video_manager_video_id" field.</summary>
        public const int VideoManagerVideoIdFieldNumber = 7;
        private readonly static ulong VideoManagerVideoIdDefaultValue = 0UL;

        private ulong videoManagerVideoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong VideoManagerVideoId {
          get { if ((_hasBits0 & 32) != 0) { return videoManagerVideoId_; } else { return VideoManagerVideoIdDefaultValue; } }
          set {
            _hasBits0 |= 32;
            videoManagerVideoId_ = value;
          }
        }
        /// <summary>Gets whether the "video_manager_video_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasVideoManagerVideoId {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "video_manager_video_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearVideoManagerVideoId() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "cdn_manifest_url" field.</summary>
        public const int CdnManifestUrlFieldNumber = 8;
        private readonly static string CdnManifestUrlDefaultValue = "";

        private string cdnManifestUrl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string CdnManifestUrl {
          get { return cdnManifestUrl_ ?? CdnManifestUrlDefaultValue; }
          set {
            cdnManifestUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "cdn_manifest_url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCdnManifestUrl {
          get { return cdnManifestUrl_ != null; }
        }
        /// <summary>Clears the value of the "cdn_manifest_url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCdnManifestUrl() {
          cdnManifestUrl_ = null;
        }

        /// <summary>Field number for the "file_size" field.</summary>
        public const int FileSizeFieldNumber = 9;
        private readonly static ulong FileSizeDefaultValue = 0UL;

        private ulong fileSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong FileSize {
          get { if ((_hasBits0 & 64) != 0) { return fileSize_; } else { return FileSizeDefaultValue; } }
          set {
            _hasBits0 |= 64;
            fileSize_ = value;
          }
        }
        /// <summary>Gets whether the "file_size" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFileSize {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "file_size" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFileSize() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "recording_zero_timeline_offset_ms" field.</summary>
        public const int RecordingZeroTimelineOffsetMsFieldNumber = 10;
        private readonly static ulong RecordingZeroTimelineOffsetMsDefaultValue = 0UL;

        private ulong recordingZeroTimelineOffsetMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong RecordingZeroTimelineOffsetMs {
          get { if ((_hasBits0 & 128) != 0) { return recordingZeroTimelineOffsetMs_; } else { return RecordingZeroTimelineOffsetMsDefaultValue; } }
          set {
            _hasBits0 |= 128;
            recordingZeroTimelineOffsetMs_ = value;
          }
        }
        /// <summary>Gets whether the "recording_zero_timeline_offset_ms" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRecordingZeroTimelineOffsetMs {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "recording_zero_timeline_offset_ms" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRecordingZeroTimelineOffsetMs() {
          _hasBits0 &= ~128;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Recording);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Recording other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RecordingId != other.RecordingId) return false;
          if (StartOffsetMs != other.StartOffsetMs) return false;
          if (DurationMs != other.DurationMs) return false;
          if (RecordingType != other.RecordingType) return false;
          if (DeleteOnCleanup != other.DeleteOnCleanup) return false;
          if (VideoManagerClipId != other.VideoManagerClipId) return false;
          if (VideoManagerVideoId != other.VideoManagerVideoId) return false;
          if (CdnManifestUrl != other.CdnManifestUrl) return false;
          if (FileSize != other.FileSize) return false;
          if (RecordingZeroTimelineOffsetMs != other.RecordingZeroTimelineOffsetMs) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasRecordingId) hash ^= RecordingId.GetHashCode();
          if (HasStartOffsetMs) hash ^= StartOffsetMs.GetHashCode();
          if (HasDurationMs) hash ^= DurationMs.GetHashCode();
          if (HasRecordingType) hash ^= RecordingType.GetHashCode();
          if (HasDeleteOnCleanup) hash ^= DeleteOnCleanup.GetHashCode();
          if (HasVideoManagerClipId) hash ^= VideoManagerClipId.GetHashCode();
          if (HasVideoManagerVideoId) hash ^= VideoManagerVideoId.GetHashCode();
          if (HasCdnManifestUrl) hash ^= CdnManifestUrl.GetHashCode();
          if (HasFileSize) hash ^= FileSize.GetHashCode();
          if (HasRecordingZeroTimelineOffsetMs) hash ^= RecordingZeroTimelineOffsetMs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasRecordingId) {
            output.WriteRawTag(10);
            output.WriteString(RecordingId);
          }
          if (HasStartOffsetMs) {
            output.WriteRawTag(16);
            output.WriteUInt64(StartOffsetMs);
          }
          if (HasDurationMs) {
            output.WriteRawTag(24);
            output.WriteUInt64(DurationMs);
          }
          if (HasRecordingType) {
            output.WriteRawTag(32);
            output.WriteEnum((int) RecordingType);
          }
          if (HasDeleteOnCleanup) {
            output.WriteRawTag(40);
            output.WriteBool(DeleteOnCleanup);
          }
          if (HasVideoManagerClipId) {
            output.WriteRawTag(48);
            output.WriteUInt64(VideoManagerClipId);
          }
          if (HasVideoManagerVideoId) {
            output.WriteRawTag(56);
            output.WriteUInt64(VideoManagerVideoId);
          }
          if (HasCdnManifestUrl) {
            output.WriteRawTag(66);
            output.WriteString(CdnManifestUrl);
          }
          if (HasFileSize) {
            output.WriteRawTag(72);
            output.WriteUInt64(FileSize);
          }
          if (HasRecordingZeroTimelineOffsetMs) {
            output.WriteRawTag(80);
            output.WriteUInt64(RecordingZeroTimelineOffsetMs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasRecordingId) {
            output.WriteRawTag(10);
            output.WriteString(RecordingId);
          }
          if (HasStartOffsetMs) {
            output.WriteRawTag(16);
            output.WriteUInt64(StartOffsetMs);
          }
          if (HasDurationMs) {
            output.WriteRawTag(24);
            output.WriteUInt64(DurationMs);
          }
          if (HasRecordingType) {
            output.WriteRawTag(32);
            output.WriteEnum((int) RecordingType);
          }
          if (HasDeleteOnCleanup) {
            output.WriteRawTag(40);
            output.WriteBool(DeleteOnCleanup);
          }
          if (HasVideoManagerClipId) {
            output.WriteRawTag(48);
            output.WriteUInt64(VideoManagerClipId);
          }
          if (HasVideoManagerVideoId) {
            output.WriteRawTag(56);
            output.WriteUInt64(VideoManagerVideoId);
          }
          if (HasCdnManifestUrl) {
            output.WriteRawTag(66);
            output.WriteString(CdnManifestUrl);
          }
          if (HasFileSize) {
            output.WriteRawTag(72);
            output.WriteUInt64(FileSize);
          }
          if (HasRecordingZeroTimelineOffsetMs) {
            output.WriteRawTag(80);
            output.WriteUInt64(RecordingZeroTimelineOffsetMs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasRecordingId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RecordingId);
          }
          if (HasStartOffsetMs) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartOffsetMs);
          }
          if (HasDurationMs) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DurationMs);
          }
          if (HasRecordingType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordingType);
          }
          if (HasDeleteOnCleanup) {
            size += 1 + 1;
          }
          if (HasVideoManagerClipId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoManagerClipId);
          }
          if (HasVideoManagerVideoId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoManagerVideoId);
          }
          if (HasCdnManifestUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CdnManifestUrl);
          }
          if (HasFileSize) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FileSize);
          }
          if (HasRecordingZeroTimelineOffsetMs) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RecordingZeroTimelineOffsetMs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Recording other) {
          if (other == null) {
            return;
          }
          if (other.HasRecordingId) {
            RecordingId = other.RecordingId;
          }
          if (other.HasStartOffsetMs) {
            StartOffsetMs = other.StartOffsetMs;
          }
          if (other.HasDurationMs) {
            DurationMs = other.DurationMs;
          }
          if (other.HasRecordingType) {
            RecordingType = other.RecordingType;
          }
          if (other.HasDeleteOnCleanup) {
            DeleteOnCleanup = other.DeleteOnCleanup;
          }
          if (other.HasVideoManagerClipId) {
            VideoManagerClipId = other.VideoManagerClipId;
          }
          if (other.HasVideoManagerVideoId) {
            VideoManagerVideoId = other.VideoManagerVideoId;
          }
          if (other.HasCdnManifestUrl) {
            CdnManifestUrl = other.CdnManifestUrl;
          }
          if (other.HasFileSize) {
            FileSize = other.FileSize;
          }
          if (other.HasRecordingZeroTimelineOffsetMs) {
            RecordingZeroTimelineOffsetMs = other.RecordingZeroTimelineOffsetMs;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                RecordingId = input.ReadString();
                break;
              }
              case 16: {
                StartOffsetMs = input.ReadUInt64();
                break;
              }
              case 24: {
                DurationMs = input.ReadUInt64();
                break;
              }
              case 32: {
                RecordingType = (global::OpenSteamworks.Protobuf.EGameRecordingType) input.ReadEnum();
                break;
              }
              case 40: {
                DeleteOnCleanup = input.ReadBool();
                break;
              }
              case 48: {
                VideoManagerClipId = input.ReadUInt64();
                break;
              }
              case 56: {
                VideoManagerVideoId = input.ReadUInt64();
                break;
              }
              case 66: {
                CdnManifestUrl = input.ReadString();
                break;
              }
              case 72: {
                FileSize = input.ReadUInt64();
                break;
              }
              case 80: {
                RecordingZeroTimelineOffsetMs = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                RecordingId = input.ReadString();
                break;
              }
              case 16: {
                StartOffsetMs = input.ReadUInt64();
                break;
              }
              case 24: {
                DurationMs = input.ReadUInt64();
                break;
              }
              case 32: {
                RecordingType = (global::OpenSteamworks.Protobuf.EGameRecordingType) input.ReadEnum();
                break;
              }
              case 40: {
                DeleteOnCleanup = input.ReadBool();
                break;
              }
              case 48: {
                VideoManagerClipId = input.ReadUInt64();
                break;
              }
              case 56: {
                VideoManagerVideoId = input.ReadUInt64();
                break;
              }
              case 66: {
                CdnManifestUrl = input.ReadString();
                break;
              }
              case 72: {
                FileSize = input.ReadUInt64();
                break;
              }
              case 80: {
                RecordingZeroTimelineOffsetMs = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CGameRecordingPostGameSummary : pb::IMessage<CGameRecordingPostGameSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGameRecordingPostGameSummary> _parser = new pb::MessageParser<CGameRecordingPostGameSummary>(() => new CGameRecordingPostGameSummary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CGameRecordingPostGameSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesGamerecordingfilesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingPostGameSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingPostGameSummary(CGameRecordingPostGameSummary other) : this() {
      _hasBits0 = other._hasBits0;
      gameId_ = other.gameId_;
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingPostGameSummary Clone() {
      return new CGameRecordingPostGameSummary(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private readonly static ulong GameIdDefaultValue = 0UL;

    private ulong gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong GameId {
      get { if ((_hasBits0 & 1) != 0) { return gameId_; } else { return GameIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameId_ = value;
      }
    }
    /// <summary>Gets whether the "game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CGameRecordingTimelineEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(18, global::OpenSteamworks.Protobuf.CGameRecordingTimelineEvent.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineEvent> events_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CGameRecordingTimelineEvent> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CGameRecordingPostGameSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CGameRecordingPostGameSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameId) hash ^= GameId.GetHashCode();
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GameId);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GameId);
      }
      events_.WriteTo(ref output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasGameId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameId);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CGameRecordingPostGameSummary other) {
      if (other == null) {
        return;
      }
      if (other.HasGameId) {
        GameId = other.GameId;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadUInt64();
            break;
          }
          case 18: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameId = input.ReadUInt64();
            break;
          }
          case 18: {
            events_.AddEntriesFrom(ref input, _repeated_events_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CGameRecordingTimelineEvent : pb::IMessage<CGameRecordingTimelineEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CGameRecordingTimelineEvent> _parser = new pb::MessageParser<CGameRecordingTimelineEvent>(() => new CGameRecordingTimelineEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CGameRecordingTimelineEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.WebuimessagesGamerecordingfilesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingTimelineEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingTimelineEvent(CGameRecordingTimelineEvent other) : this() {
      _hasBits0 = other._hasBits0;
      gameId_ = other.gameId_;
      rtCreated_ = other.rtCreated_;
      possibleClip_ = other.possibleClip_;
      timelineId_ = other.timelineId_;
      entryId_ = other.entryId_;
      timelineOffsetMs_ = other.timelineOffsetMs_;
      durationMs_ = other.durationMs_;
      markerIcon_ = other.markerIcon_;
      markerTitle_ = other.markerTitle_;
      userMarker_ = other.userMarker_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CGameRecordingTimelineEvent Clone() {
      return new CGameRecordingTimelineEvent(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private readonly static ulong GameIdDefaultValue = 0UL;

    private ulong gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong GameId {
      get { if ((_hasBits0 & 1) != 0) { return gameId_; } else { return GameIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        gameId_ = value;
      }
    }
    /// <summary>Gets whether the "game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rt_created" field.</summary>
    public const int RtCreatedFieldNumber = 2;
    private readonly static uint RtCreatedDefaultValue = 0;

    private uint rtCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtCreated {
      get { if ((_hasBits0 & 2) != 0) { return rtCreated_; } else { return RtCreatedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rtCreated_ = value;
      }
    }
    /// <summary>Gets whether the "rt_created" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtCreated {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "rt_created" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtCreated() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "possible_clip" field.</summary>
    public const int PossibleClipFieldNumber = 3;
    private readonly static int PossibleClipDefaultValue = 0;

    private int possibleClip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PossibleClip {
      get { if ((_hasBits0 & 4) != 0) { return possibleClip_; } else { return PossibleClipDefaultValue; } }
      set {
        _hasBits0 |= 4;
        possibleClip_ = value;
      }
    }
    /// <summary>Gets whether the "possible_clip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPossibleClip {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "possible_clip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPossibleClip() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "timeline_id" field.</summary>
    public const int TimelineIdFieldNumber = 4;
    private readonly static string TimelineIdDefaultValue = "";

    private string timelineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TimelineId {
      get { return timelineId_ ?? TimelineIdDefaultValue; }
      set {
        timelineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timeline_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimelineId {
      get { return timelineId_ != null; }
    }
    /// <summary>Clears the value of the "timeline_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimelineId() {
      timelineId_ = null;
    }

    /// <summary>Field number for the "entry_id" field.</summary>
    public const int EntryIdFieldNumber = 5;
    private readonly static ulong EntryIdDefaultValue = 0UL;

    private ulong entryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong EntryId {
      get { if ((_hasBits0 & 8) != 0) { return entryId_; } else { return EntryIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        entryId_ = value;
      }
    }
    /// <summary>Gets whether the "entry_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEntryId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "entry_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEntryId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "timeline_offset_ms" field.</summary>
    public const int TimelineOffsetMsFieldNumber = 6;
    private readonly static ulong TimelineOffsetMsDefaultValue = 0UL;

    private ulong timelineOffsetMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TimelineOffsetMs {
      get { if ((_hasBits0 & 16) != 0) { return timelineOffsetMs_; } else { return TimelineOffsetMsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        timelineOffsetMs_ = value;
      }
    }
    /// <summary>Gets whether the "timeline_offset_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimelineOffsetMs {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "timeline_offset_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimelineOffsetMs() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "duration_ms" field.</summary>
    public const int DurationMsFieldNumber = 7;
    private readonly static ulong DurationMsDefaultValue = 0UL;

    private ulong durationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong DurationMs {
      get { if ((_hasBits0 & 32) != 0) { return durationMs_; } else { return DurationMsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        durationMs_ = value;
      }
    }
    /// <summary>Gets whether the "duration_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDurationMs {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "duration_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDurationMs() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "marker_icon" field.</summary>
    public const int MarkerIconFieldNumber = 8;
    private readonly static string MarkerIconDefaultValue = "";

    private string markerIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MarkerIcon {
      get { return markerIcon_ ?? MarkerIconDefaultValue; }
      set {
        markerIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "marker_icon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarkerIcon {
      get { return markerIcon_ != null; }
    }
    /// <summary>Clears the value of the "marker_icon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarkerIcon() {
      markerIcon_ = null;
    }

    /// <summary>Field number for the "marker_title" field.</summary>
    public const int MarkerTitleFieldNumber = 9;
    private readonly static string MarkerTitleDefaultValue = "";

    private string markerTitle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MarkerTitle {
      get { return markerTitle_ ?? MarkerTitleDefaultValue; }
      set {
        markerTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "marker_title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarkerTitle {
      get { return markerTitle_ != null; }
    }
    /// <summary>Clears the value of the "marker_title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarkerTitle() {
      markerTitle_ = null;
    }

    /// <summary>Field number for the "user_marker" field.</summary>
    public const int UserMarkerFieldNumber = 10;
    private readonly static bool UserMarkerDefaultValue = false;

    private bool userMarker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UserMarker {
      get { if ((_hasBits0 & 64) != 0) { return userMarker_; } else { return UserMarkerDefaultValue; } }
      set {
        _hasBits0 |= 64;
        userMarker_ = value;
      }
    }
    /// <summary>Gets whether the "user_marker" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserMarker {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "user_marker" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserMarker() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CGameRecordingTimelineEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CGameRecordingTimelineEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (RtCreated != other.RtCreated) return false;
      if (PossibleClip != other.PossibleClip) return false;
      if (TimelineId != other.TimelineId) return false;
      if (EntryId != other.EntryId) return false;
      if (TimelineOffsetMs != other.TimelineOffsetMs) return false;
      if (DurationMs != other.DurationMs) return false;
      if (MarkerIcon != other.MarkerIcon) return false;
      if (MarkerTitle != other.MarkerTitle) return false;
      if (UserMarker != other.UserMarker) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameId) hash ^= GameId.GetHashCode();
      if (HasRtCreated) hash ^= RtCreated.GetHashCode();
      if (HasPossibleClip) hash ^= PossibleClip.GetHashCode();
      if (HasTimelineId) hash ^= TimelineId.GetHashCode();
      if (HasEntryId) hash ^= EntryId.GetHashCode();
      if (HasTimelineOffsetMs) hash ^= TimelineOffsetMs.GetHashCode();
      if (HasDurationMs) hash ^= DurationMs.GetHashCode();
      if (HasMarkerIcon) hash ^= MarkerIcon.GetHashCode();
      if (HasMarkerTitle) hash ^= MarkerTitle.GetHashCode();
      if (HasUserMarker) hash ^= UserMarker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasGameId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GameId);
      }
      if (HasRtCreated) {
        output.WriteRawTag(16);
        output.WriteUInt32(RtCreated);
      }
      if (HasPossibleClip) {
        output.WriteRawTag(24);
        output.WriteInt32(PossibleClip);
      }
      if (HasTimelineId) {
        output.WriteRawTag(34);
        output.WriteString(TimelineId);
      }
      if (HasEntryId) {
        output.WriteRawTag(40);
        output.WriteUInt64(EntryId);
      }
      if (HasTimelineOffsetMs) {
        output.WriteRawTag(48);
        output.WriteUInt64(TimelineOffsetMs);
      }
      if (HasDurationMs) {
        output.WriteRawTag(56);
        output.WriteUInt64(DurationMs);
      }
      if (HasMarkerIcon) {
        output.WriteRawTag(66);
        output.WriteString(MarkerIcon);
      }
      if (HasMarkerTitle) {
        output.WriteRawTag(74);
        output.WriteString(MarkerTitle);
      }
      if (HasUserMarker) {
        output.WriteRawTag(80);
        output.WriteBool(UserMarker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasGameId) {
        output.WriteRawTag(8);
        output.WriteUInt64(GameId);
      }
      if (HasRtCreated) {
        output.WriteRawTag(16);
        output.WriteUInt32(RtCreated);
      }
      if (HasPossibleClip) {
        output.WriteRawTag(24);
        output.WriteInt32(PossibleClip);
      }
      if (HasTimelineId) {
        output.WriteRawTag(34);
        output.WriteString(TimelineId);
      }
      if (HasEntryId) {
        output.WriteRawTag(40);
        output.WriteUInt64(EntryId);
      }
      if (HasTimelineOffsetMs) {
        output.WriteRawTag(48);
        output.WriteUInt64(TimelineOffsetMs);
      }
      if (HasDurationMs) {
        output.WriteRawTag(56);
        output.WriteUInt64(DurationMs);
      }
      if (HasMarkerIcon) {
        output.WriteRawTag(66);
        output.WriteString(MarkerIcon);
      }
      if (HasMarkerTitle) {
        output.WriteRawTag(74);
        output.WriteString(MarkerTitle);
      }
      if (HasUserMarker) {
        output.WriteRawTag(80);
        output.WriteBool(UserMarker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasGameId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameId);
      }
      if (HasRtCreated) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RtCreated);
      }
      if (HasPossibleClip) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PossibleClip);
      }
      if (HasTimelineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimelineId);
      }
      if (HasEntryId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntryId);
      }
      if (HasTimelineOffsetMs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimelineOffsetMs);
      }
      if (HasDurationMs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DurationMs);
      }
      if (HasMarkerIcon) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarkerIcon);
      }
      if (HasMarkerTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarkerTitle);
      }
      if (HasUserMarker) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CGameRecordingTimelineEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasGameId) {
        GameId = other.GameId;
      }
      if (other.HasRtCreated) {
        RtCreated = other.RtCreated;
      }
      if (other.HasPossibleClip) {
        PossibleClip = other.PossibleClip;
      }
      if (other.HasTimelineId) {
        TimelineId = other.TimelineId;
      }
      if (other.HasEntryId) {
        EntryId = other.EntryId;
      }
      if (other.HasTimelineOffsetMs) {
        TimelineOffsetMs = other.TimelineOffsetMs;
      }
      if (other.HasDurationMs) {
        DurationMs = other.DurationMs;
      }
      if (other.HasMarkerIcon) {
        MarkerIcon = other.MarkerIcon;
      }
      if (other.HasMarkerTitle) {
        MarkerTitle = other.MarkerTitle;
      }
      if (other.HasUserMarker) {
        UserMarker = other.UserMarker;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadUInt64();
            break;
          }
          case 16: {
            RtCreated = input.ReadUInt32();
            break;
          }
          case 24: {
            PossibleClip = input.ReadInt32();
            break;
          }
          case 34: {
            TimelineId = input.ReadString();
            break;
          }
          case 40: {
            EntryId = input.ReadUInt64();
            break;
          }
          case 48: {
            TimelineOffsetMs = input.ReadUInt64();
            break;
          }
          case 56: {
            DurationMs = input.ReadUInt64();
            break;
          }
          case 66: {
            MarkerIcon = input.ReadString();
            break;
          }
          case 74: {
            MarkerTitle = input.ReadString();
            break;
          }
          case 80: {
            UserMarker = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameId = input.ReadUInt64();
            break;
          }
          case 16: {
            RtCreated = input.ReadUInt32();
            break;
          }
          case 24: {
            PossibleClip = input.ReadInt32();
            break;
          }
          case 34: {
            TimelineId = input.ReadString();
            break;
          }
          case 40: {
            EntryId = input.ReadUInt64();
            break;
          }
          case 48: {
            TimelineOffsetMs = input.ReadUInt64();
            break;
          }
          case 56: {
            DurationMs = input.ReadUInt64();
            break;
          }
          case 66: {
            MarkerIcon = input.ReadString();
            break;
          }
          case 74: {
            MarkerTitle = input.ReadString();
            break;
          }
          case 80: {
            UserMarker = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
