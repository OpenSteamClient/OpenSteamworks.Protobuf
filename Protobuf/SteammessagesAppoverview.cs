// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: steammessages_appoverview.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenSteamworks.Protobuf {

  /// <summary>Holder for reflection information generated from steammessages_appoverview.proto</summary>
  public static partial class SteammessagesAppoverviewReflection {

    #region Descriptor
    /// <summary>File descriptor for steammessages_appoverview.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SteammessagesAppoverviewReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9zdGVhbW1lc3NhZ2VzX2FwcG92ZXJ2aWV3LnByb3RvGiBnb29nbGUvcHJv",
            "dG9idWYvZGVzY3JpcHRvci5wcm90bxoLZW51bXMucHJvdG8irwMKGkNBcHBP",
            "dmVydmlld19QZXJDbGllbnREYXRhEhMKCGNsaWVudGlkGAEgASgEOgEwEhMK",
            "C2NsaWVudF9uYW1lGAIgASgJEj4KDmRpc3BsYXlfc3RhdHVzGAMgASgOMg8u",
            "RURpc3BsYXlTdGF0dXM6FUVEaXNwbGF5U3RhdHVzSW52YWxpZBIcChFzdGF0",
            "dXNfcGVyY2VudGFnZRgEIAEoDToBMBITCgthY3RpdmVfYmV0YRgFIAEoCRIR",
            "CglpbnN0YWxsZWQYBiABKAgSGwoQYnl0ZXNfZG93bmxvYWRlZBgHIAEoBDoB",
            "MBIWCgtieXRlc190b3RhbBgIIAEoBDoBMBIhChlzdHJlYW1pbmdfdG9fbG9j",
            "YWxfY2xpZW50GAkgASgIEigKIGlzX2F2YWlsYWJsZV9vbl9jdXJyZW50X3Bs",
            "YXRmb3JtGAogASgIEhoKEmlzX2ludmFsaWRfb3NfdHlwZRgLIAEoCBIVCg1w",
            "bGF5dGltZV9sZWZ0GAwgASgNEiwKJHVwZGF0ZV9hdmFpbGFibGVfYnV0X2Rp",
            "c2FibGVkX2J5X2FwcBgOIAEoCCLVCwoMQ0FwcE92ZXJ2aWV3Eg0KBWFwcGlk",
            "GAEgASgNEhQKDGRpc3BsYXlfbmFtZRgCIAEoCRIcChR2aXNpYmxlX2luX2dh",
            "bWVfbGlzdBgEIAEoCBIVCg1zdWJzY3JpYmVkX3RvGAUgASgIEg8KB3NvcnRf",
            "YXMYBiABKAkSMQoIYXBwX3R5cGUYByABKA4yDi5FUHJvdG9BcHBUeXBlOg9F",
            "QXBwVHlwZUludmFsaWQSEQoJbXJ1X2luZGV4GA0gASgNEiIKF3J0X3JlY2Vu",
            "dF9hY3Rpdml0eV90aW1lGA4gASgNOgEwEiMKGG1pbnV0ZXNfcGxheXRpbWVf",
            "Zm9yZXZlchgQIAEoDToBMBIqCh9taW51dGVzX3BsYXl0aW1lX2xhc3RfdHdv",
            "X3dlZWtzGBEgASgNOgEwEh4KE3J0X2xhc3RfdGltZV9wbGF5ZWQYEiABKA06",
            "ATASEQoJc3RvcmVfdGFnGBMgAygNEhYKDnN0b3JlX2NhdGVnb3J5GBcgAygN",
            "EiMKGHJ0X29yaWdpbmFsX3JlbGVhc2VfZGF0ZRgZIAEoDToBMBIgChVydF9z",
            "dGVhbV9yZWxlYXNlX2RhdGUYGiABKA06ATASEQoJaWNvbl9oYXNoGBsgASgJ",
            "ElwKF3hib3hfY29udHJvbGxlcl9zdXBwb3J0GB8gASgOMhsuRUFwcENvbnRy",
            "b2xsZXJTdXBwb3J0TGV2ZWw6HkVBcHBDb250cm9sbGVyU3VwcG9ydExldmVs",
            "Tm9uZRIUCgx2cl9zdXBwb3J0ZWQYICABKAgSGAoQbWV0YWNyaXRpY19zY29y",
            "ZRgkIAEoDRIUCgxzaXplX29uX2Rpc2sYJSABKAQSFwoPdGhpcmRfcGFydHlf",
            "bW9kGCYgASgIEhEKCWljb25fZGF0YRgnIAEoCRIYChBpY29uX2RhdGFfZm9y",
            "bWF0GCggASgJEg4KBmdhbWVpZBgpIAEoCRIgChhsaWJyYXJ5X2NhcHN1bGVf",
            "ZmlsZW5hbWUYKiABKAkSNAoPcGVyX2NsaWVudF9kYXRhGCsgAygLMhsuQ0Fw",
            "cE92ZXJ2aWV3X1BlckNsaWVudERhdGESIgoXbW9zdF9hdmFpbGFibGVfY2xp",
            "ZW50aWQYLCABKAQ6ATASHAoRc2VsZWN0ZWRfY2xpZW50aWQYLSABKAQ6ATAS",
            "HAoUcnRfc3RvcmVfYXNzZXRfbXRpbWUYLiABKA0SHQoVcnRfY3VzdG9tX2lt",
            "YWdlX210aW1lGC8gASgNEh4KFm9wdGlvbmFsX3BhcmVudF9hcHBfaWQYMCAB",
            "KA0SGAoQb3duZXJfYWNjb3VudF9pZBgxIAEoDRIfChdyZXZpZXdfc2NvcmVf",
            "d2l0aF9ib21icxg1IAEoDRIkChxyZXZpZXdfcGVyY2VudGFnZV93aXRoX2Jv",
            "bWJzGDYgASgNEiIKGnJldmlld19zY29yZV93aXRob3V0X2JvbWJzGDcgASgN",
            "EicKH3Jldmlld19wZXJjZW50YWdlX3dpdGhvdXRfYm9tYnMYOCABKA0SEgoK",
            "bGlicmFyeV9pZBg5IAEoCRIPCgd2cl9vbmx5GDogASgIEhcKD21hc3RlcnN1",
            "Yl9hcHBpZBg7IAEoDRIjChttYXN0ZXJzdWJfaW5jbHVkZWR3aXRoX2xvZ28Y",
            "PCABKAkSHgoWc2l0ZV9saWNlbnNlX3NpdGVfbmFtZRg+IAEoCRIfChdzaG9y",
            "dGN1dF9vdmVycmlkZV9hcHBpZBg/IAEoDRIjChtydF9sYXN0X3RpbWVfbG9j",
            "YWxseV9wbGF5ZWQYQSABKA0SGQoRcnRfcHVyY2hhc2VkX3RpbWUYQiABKA0S",
            "FwoPaGVhZGVyX2ZpbGVuYW1lGEMgASgJEhsKE2xvY2FsX2NhY2hlX3ZlcnNp",
            "b24YRCABKA0SGAoQbnVtYmVyX29mX2NvcGllcxhIIAEoDRInCh9zdGVhbV9o",
            "d19jb21wYXRfY2F0ZWdvcnlfcGFja2VkGEkgASgNIn8KE0NBcHBPdmVydmll",
            "d19DaGFuZ2USIwoMYXBwX292ZXJ2aWV3GAEgAygLMg0uQ0FwcE92ZXJ2aWV3",
            "EhUKDXJlbW92ZWRfYXBwaWQYAiADKA0SEwoLZnVsbF91cGRhdGUYAyABKAgS",
            "FwoPdXBkYXRlX2NvbXBsZXRlGAQgASgIIkQKEUNBcHBCb290c3RyYXBEYXRh",
            "Eg0KBWFwcGlkGAEgASgNEg4KBmhpZGRlbhgCIAEoCBIQCgh1c2VyX3RhZxgD",
            "IAMoCSI9ChVDTGlicmFyeUJvb3RzdHJhcERhdGESJAoIYXBwX2RhdGEYASAD",
            "KAsyEi5DQXBwQm9vdHN0cmFwRGF0YSr+CQoORURpc3BsYXlTdGF0dXMSGQoV",
            "RURpc3BsYXlTdGF0dXNJbnZhbGlkEAASGwoXRURpc3BsYXlTdGF0dXNMYXVu",
            "Y2hpbmcQARIeChpFRGlzcGxheVN0YXR1c1VuaW5zdGFsbGluZxACEhwKGEVE",
            "aXNwbGF5U3RhdHVzSW5zdGFsbGluZxADEhkKFUVEaXNwbGF5U3RhdHVzUnVu",
            "bmluZxAEEhwKGEVEaXNwbGF5U3RhdHVzVmFsaWRhdGluZxAFEhoKFkVEaXNw",
            "bGF5U3RhdHVzVXBkYXRpbmcQBhIdChlFRGlzcGxheVN0YXR1c0Rvd25sb2Fk",
            "aW5nEAcSHwobRURpc3BsYXlTdGF0dXNTeW5jaHJvbml6aW5nEAgSIAocRURp",
            "c3BsYXlTdGF0dXNSZWFkeVRvSW5zdGFsbBAJEiAKHEVEaXNwbGF5U3RhdHVz",
            "UmVhZHlUb1ByZWxvYWQQChIfChtFRGlzcGxheVN0YXR1c1JlYWR5VG9MYXVu",
            "Y2gQCxIiCh5FRGlzcGxheVN0YXR1c1JlZ2lvblJlc3RyaWN0ZWQQDBIdChlF",
            "RGlzcGxheVN0YXR1c1ByZXNhbGVPbmx5EA0SIQodRURpc3BsYXlTdGF0dXNJ",
            "bnZhbGlkUGxhdGZvcm0QDhIhCh1FRGlzcGxheVN0YXR1c1ByZWxvYWRDb21w",
            "bGV0ZRAQEiAKHEVEaXNwbGF5U3RhdHVzQm9ycm93ZXJMb2NrZWQQERIeChpF",
            "RGlzcGxheVN0YXR1c1VwZGF0ZVBhdXNlZBASEh4KGkVEaXNwbGF5U3RhdHVz",
            "VXBkYXRlUXVldWVkEBMSIAocRURpc3BsYXlTdGF0dXNVcGRhdGVSZXF1aXJl",
            "ZBAUEiAKHEVEaXNwbGF5U3RhdHVzVXBkYXRlRGlzYWJsZWQQFRIgChxFRGlz",
            "cGxheVN0YXR1c0Rvd25sb2FkUGF1c2VkEBYSIAocRURpc3BsYXlTdGF0dXNE",
            "b3dubG9hZFF1ZXVlZBAXEiIKHkVEaXNwbGF5U3RhdHVzRG93bmxvYWRSZXF1",
            "aXJlZBAYEiIKHkVEaXNwbGF5U3RhdHVzRG93bmxvYWREaXNhYmxlZBAZEiAK",
            "HEVEaXNwbGF5U3RhdHVzTGljZW5zZVBlbmRpbmcQGhIgChxFRGlzcGxheVN0",
            "YXR1c0xpY2Vuc2VFeHBpcmVkEBsSHgoaRURpc3BsYXlTdGF0dXNBdmFpbEZv",
            "ckZyZWUQHBIfChtFRGlzcGxheVN0YXR1c0F2YWlsVG9Cb3Jyb3cQHRIgChxF",
            "RGlzcGxheVN0YXR1c0F2YWlsR3Vlc3RQYXNzEB4SGgoWRURpc3BsYXlTdGF0",
            "dXNQdXJjaGFzZRAfEh0KGUVEaXNwbGF5U3RhdHVzVW5hdmFpbGFibGUQIBIf",
            "ChtFRGlzcGxheVN0YXR1c05vdExhdW5jaGFibGUQIRIcChhFRGlzcGxheVN0",
            "YXR1c0Nsb3VkRXJyb3IQIhIgChxFRGlzcGxheVN0YXR1c0Nsb3VkT3V0T2ZE",
            "YXRlECMSHQoZRURpc3BsYXlTdGF0dXNUZXJtaW5hdGluZxAkEh0KGUVEaXNw",
            "bGF5U3RhdHVzT3duZXJMb2NrZWQQJRIgChxFRGlzcGxheVN0YXR1c0Rvd25s",
            "b2FkRmFpbGVkECYSHgoaRURpc3BsYXlTdGF0dXNVcGRhdGVGYWlsZWQQJyrh",
            "AgoPRUFwcENsb3VkU3RhdHVzEhoKFkVBcHBDbG91ZFN0YXR1c0ludmFsaWQQ",
            "ABIbChdFQXBwQ2xvdWRTdGF0dXNEaXNhYmxlZBABEhoKFkVBcHBDbG91ZFN0",
            "YXR1c1Vua25vd24QAhIfChtFQXBwQ2xvdWRTdGF0dXNTeW5jaHJvbml6ZWQQ",
            "AxIbChdFQXBwQ2xvdWRTdGF0dXNDaGVja2luZxAEEhwKGEVBcHBDbG91ZFN0",
            "YXR1c091dE9mU3luYxAFEhwKGEVBcHBDbG91ZFN0YXR1c1VwbG9hZGluZxAG",
            "Eh4KGkVBcHBDbG91ZFN0YXR1c0Rvd25sb2FkaW5nEAcSHQoZRUFwcENsb3Vk",
            "U3RhdHVzU3luY0ZhaWxlZBAIEhsKF0VBcHBDbG91ZFN0YXR1c0NvbmZsaWN0",
            "EAkSIwofRUFwcENsb3VkU3RhdHVzUGVuZGluZ0Vsc2V3aGVyZRAKKosBChpF",
            "QXBwQ29udHJvbGxlclN1cHBvcnRMZXZlbBIiCh5FQXBwQ29udHJvbGxlclN1",
            "cHBvcnRMZXZlbE5vbmUQABIlCiFFQXBwQ29udHJvbGxlclN1cHBvcnRMZXZl",
            "bFBhcnRpYWwQARIiCh5FQXBwQ29udHJvbGxlclN1cHBvcnRMZXZlbEZ1bGwQ",
            "Air1AQojRUFwcEdhbWVwYWRHeXJvVHJhY2twYWRTdXBwb3J0TGV2ZWwSNwoq",
            "RUFwcEdhbWVwYWRHeXJvVHJhY2twYWRTdXBwb3J0TGV2ZWxVbmtub3duEP//",
            "/////////wESMAosRUFwcEdhbWVwYWRHeXJvVHJhY2twYWRTdXBwb3J0TGV2",
            "ZWxOb0dhbWVwYWQQABIuCipFQXBwR2FtZXBhZEd5cm9UcmFja3BhZFN1cHBv",
            "cnRMZXZlbEdhbWVwYWQQARIzCi9FQXBwR2FtZXBhZEd5cm9UcmFja3BhZFN1",
            "cHBvcnRMZXZlbFNpbXVsdGFuZW91cxACKpcBCg5FQXBwSERSU3VwcG9ydBIX",
            "ChNFSERSU3VwcG9ydF9Vbmtub3duEAASEwoPRUhEUlN1cHBvcnRfU0RSEAES",
            "EwoPRUhEUlN1cHBvcnRfSERSEAISGgoWRUhEUlN1cHBvcnRfSERSX0Jyb2tl",
            "bhADEiYKIkVIRFJTdXBwb3J0X0hEUl9SZXF1aXJlc1VzZXJBY3Rpb24QBEIf",
            "SAGAAQGqAhdPcGVuU3RlYW13b3Jrcy5Qcm90b2J1Zg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, global::OpenSteamworks.Protobuf.EnumsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::OpenSteamworks.Protobuf.EDisplayStatus), typeof(global::OpenSteamworks.Protobuf.EAppCloudStatus), typeof(global::OpenSteamworks.Protobuf.EAppControllerSupportLevel), typeof(global::OpenSteamworks.Protobuf.EAppGamepadGyroTrackpadSupportLevel), typeof(global::OpenSteamworks.Protobuf.EAppHDRSupport), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CAppOverview_PerClientData), global::OpenSteamworks.Protobuf.CAppOverview_PerClientData.Parser, new[]{ "Clientid", "ClientName", "DisplayStatus", "StatusPercentage", "ActiveBeta", "Installed", "BytesDownloaded", "BytesTotal", "StreamingToLocalClient", "IsAvailableOnCurrentPlatform", "IsInvalidOsType", "PlaytimeLeft", "UpdateAvailableButDisabledByApp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CAppOverview), global::OpenSteamworks.Protobuf.CAppOverview.Parser, new[]{ "Appid", "DisplayName", "VisibleInGameList", "SubscribedTo", "SortAs", "AppType", "MruIndex", "RtRecentActivityTime", "MinutesPlaytimeForever", "MinutesPlaytimeLastTwoWeeks", "RtLastTimePlayed", "StoreTag", "StoreCategory", "RtOriginalReleaseDate", "RtSteamReleaseDate", "IconHash", "XboxControllerSupport", "VrSupported", "MetacriticScore", "SizeOnDisk", "ThirdPartyMod", "IconData", "IconDataFormat", "Gameid", "LibraryCapsuleFilename", "PerClientData", "MostAvailableClientid", "SelectedClientid", "RtStoreAssetMtime", "RtCustomImageMtime", "OptionalParentAppId", "OwnerAccountId", "ReviewScoreWithBombs", "ReviewPercentageWithBombs", "ReviewScoreWithoutBombs", "ReviewPercentageWithoutBombs", "LibraryId", "VrOnly", "MastersubAppid", "MastersubIncludedwithLogo", "SiteLicenseSiteName", "ShortcutOverrideAppid", "RtLastTimeLocallyPlayed", "RtPurchasedTime", "HeaderFilename", "LocalCacheVersion", "NumberOfCopies", "SteamHwCompatCategoryPacked" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CAppOverview_Change), global::OpenSteamworks.Protobuf.CAppOverview_Change.Parser, new[]{ "AppOverview", "RemovedAppid", "FullUpdate", "UpdateComplete" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CAppBootstrapData), global::OpenSteamworks.Protobuf.CAppBootstrapData.Parser, new[]{ "Appid", "Hidden", "UserTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenSteamworks.Protobuf.CLibraryBootstrapData), global::OpenSteamworks.Protobuf.CLibraryBootstrapData.Parser, new[]{ "AppData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EDisplayStatus {
    [pbr::OriginalName("EDisplayStatusInvalid")] Invalid = 0,
    [pbr::OriginalName("EDisplayStatusLaunching")] Launching = 1,
    [pbr::OriginalName("EDisplayStatusUninstalling")] Uninstalling = 2,
    [pbr::OriginalName("EDisplayStatusInstalling")] Installing = 3,
    [pbr::OriginalName("EDisplayStatusRunning")] Running = 4,
    [pbr::OriginalName("EDisplayStatusValidating")] Validating = 5,
    [pbr::OriginalName("EDisplayStatusUpdating")] Updating = 6,
    [pbr::OriginalName("EDisplayStatusDownloading")] Downloading = 7,
    [pbr::OriginalName("EDisplayStatusSynchronizing")] Synchronizing = 8,
    [pbr::OriginalName("EDisplayStatusReadyToInstall")] ReadyToInstall = 9,
    [pbr::OriginalName("EDisplayStatusReadyToPreload")] ReadyToPreload = 10,
    [pbr::OriginalName("EDisplayStatusReadyToLaunch")] ReadyToLaunch = 11,
    [pbr::OriginalName("EDisplayStatusRegionRestricted")] RegionRestricted = 12,
    [pbr::OriginalName("EDisplayStatusPresaleOnly")] PresaleOnly = 13,
    [pbr::OriginalName("EDisplayStatusInvalidPlatform")] InvalidPlatform = 14,
    [pbr::OriginalName("EDisplayStatusPreloadComplete")] PreloadComplete = 16,
    [pbr::OriginalName("EDisplayStatusBorrowerLocked")] BorrowerLocked = 17,
    [pbr::OriginalName("EDisplayStatusUpdatePaused")] UpdatePaused = 18,
    [pbr::OriginalName("EDisplayStatusUpdateQueued")] UpdateQueued = 19,
    [pbr::OriginalName("EDisplayStatusUpdateRequired")] UpdateRequired = 20,
    [pbr::OriginalName("EDisplayStatusUpdateDisabled")] UpdateDisabled = 21,
    [pbr::OriginalName("EDisplayStatusDownloadPaused")] DownloadPaused = 22,
    [pbr::OriginalName("EDisplayStatusDownloadQueued")] DownloadQueued = 23,
    [pbr::OriginalName("EDisplayStatusDownloadRequired")] DownloadRequired = 24,
    [pbr::OriginalName("EDisplayStatusDownloadDisabled")] DownloadDisabled = 25,
    [pbr::OriginalName("EDisplayStatusLicensePending")] LicensePending = 26,
    [pbr::OriginalName("EDisplayStatusLicenseExpired")] LicenseExpired = 27,
    [pbr::OriginalName("EDisplayStatusAvailForFree")] AvailForFree = 28,
    [pbr::OriginalName("EDisplayStatusAvailToBorrow")] AvailToBorrow = 29,
    [pbr::OriginalName("EDisplayStatusAvailGuestPass")] AvailGuestPass = 30,
    [pbr::OriginalName("EDisplayStatusPurchase")] Purchase = 31,
    [pbr::OriginalName("EDisplayStatusUnavailable")] Unavailable = 32,
    [pbr::OriginalName("EDisplayStatusNotLaunchable")] NotLaunchable = 33,
    [pbr::OriginalName("EDisplayStatusCloudError")] CloudError = 34,
    [pbr::OriginalName("EDisplayStatusCloudOutOfDate")] CloudOutOfDate = 35,
    [pbr::OriginalName("EDisplayStatusTerminating")] Terminating = 36,
    [pbr::OriginalName("EDisplayStatusOwnerLocked")] OwnerLocked = 37,
    [pbr::OriginalName("EDisplayStatusDownloadFailed")] DownloadFailed = 38,
    [pbr::OriginalName("EDisplayStatusUpdateFailed")] UpdateFailed = 39,
  }

  public enum EAppCloudStatus {
    [pbr::OriginalName("EAppCloudStatusInvalid")] Invalid = 0,
    [pbr::OriginalName("EAppCloudStatusDisabled")] Disabled = 1,
    [pbr::OriginalName("EAppCloudStatusUnknown")] Unknown = 2,
    [pbr::OriginalName("EAppCloudStatusSynchronized")] Synchronized = 3,
    [pbr::OriginalName("EAppCloudStatusChecking")] Checking = 4,
    [pbr::OriginalName("EAppCloudStatusOutOfSync")] OutOfSync = 5,
    [pbr::OriginalName("EAppCloudStatusUploading")] Uploading = 6,
    [pbr::OriginalName("EAppCloudStatusDownloading")] Downloading = 7,
    [pbr::OriginalName("EAppCloudStatusSyncFailed")] SyncFailed = 8,
    [pbr::OriginalName("EAppCloudStatusConflict")] Conflict = 9,
    [pbr::OriginalName("EAppCloudStatusPendingElsewhere")] PendingElsewhere = 10,
  }

  public enum EAppControllerSupportLevel {
    [pbr::OriginalName("EAppControllerSupportLevelNone")] None = 0,
    [pbr::OriginalName("EAppControllerSupportLevelPartial")] Partial = 1,
    [pbr::OriginalName("EAppControllerSupportLevelFull")] Full = 2,
  }

  public enum EAppGamepadGyroTrackpadSupportLevel {
    [pbr::OriginalName("EAppGamepadGyroTrackpadSupportLevelUnknown")] Unknown = -1,
    [pbr::OriginalName("EAppGamepadGyroTrackpadSupportLevelNoGamepad")] NoGamepad = 0,
    [pbr::OriginalName("EAppGamepadGyroTrackpadSupportLevelGamepad")] Gamepad = 1,
    [pbr::OriginalName("EAppGamepadGyroTrackpadSupportLevelSimultaneous")] Simultaneous = 2,
  }

  public enum EAppHDRSupport {
    [pbr::OriginalName("EHDRSupport_Unknown")] EhdrsupportUnknown = 0,
    [pbr::OriginalName("EHDRSupport_SDR")] EhdrsupportSdr = 1,
    [pbr::OriginalName("EHDRSupport_HDR")] EhdrsupportHdr = 2,
    [pbr::OriginalName("EHDRSupport_HDR_Broken")] EhdrsupportHdrBroken = 3,
    [pbr::OriginalName("EHDRSupport_HDR_RequiresUserAction")] EhdrsupportHdrRequiresUserAction = 4,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CAppOverview_PerClientData : pb::IMessage<CAppOverview_PerClientData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAppOverview_PerClientData> _parser = new pb::MessageParser<CAppOverview_PerClientData>(() => new CAppOverview_PerClientData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CAppOverview_PerClientData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.SteammessagesAppoverviewReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview_PerClientData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview_PerClientData(CAppOverview_PerClientData other) : this() {
      _hasBits0 = other._hasBits0;
      clientid_ = other.clientid_;
      clientName_ = other.clientName_;
      displayStatus_ = other.displayStatus_;
      statusPercentage_ = other.statusPercentage_;
      activeBeta_ = other.activeBeta_;
      installed_ = other.installed_;
      bytesDownloaded_ = other.bytesDownloaded_;
      bytesTotal_ = other.bytesTotal_;
      streamingToLocalClient_ = other.streamingToLocalClient_;
      isAvailableOnCurrentPlatform_ = other.isAvailableOnCurrentPlatform_;
      isInvalidOsType_ = other.isInvalidOsType_;
      playtimeLeft_ = other.playtimeLeft_;
      updateAvailableButDisabledByApp_ = other.updateAvailableButDisabledByApp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview_PerClientData Clone() {
      return new CAppOverview_PerClientData(this);
    }

    /// <summary>Field number for the "clientid" field.</summary>
    public const int ClientidFieldNumber = 1;
    private readonly static ulong ClientidDefaultValue = 0UL;

    private ulong clientid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Clientid {
      get { if ((_hasBits0 & 1) != 0) { return clientid_; } else { return ClientidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clientid_ = value;
      }
    }
    /// <summary>Gets whether the "clientid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClientid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "clientid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClientid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "client_name" field.</summary>
    public const int ClientNameFieldNumber = 2;
    private readonly static string ClientNameDefaultValue = "";

    private string clientName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientName {
      get { return clientName_ ?? ClientNameDefaultValue; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "client_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClientName {
      get { return clientName_ != null; }
    }
    /// <summary>Clears the value of the "client_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClientName() {
      clientName_ = null;
    }

    /// <summary>Field number for the "display_status" field.</summary>
    public const int DisplayStatusFieldNumber = 3;
    private readonly static global::OpenSteamworks.Protobuf.EDisplayStatus DisplayStatusDefaultValue = global::OpenSteamworks.Protobuf.EDisplayStatus.Invalid;

    private global::OpenSteamworks.Protobuf.EDisplayStatus displayStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.EDisplayStatus DisplayStatus {
      get { if ((_hasBits0 & 2) != 0) { return displayStatus_; } else { return DisplayStatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        displayStatus_ = value;
      }
    }
    /// <summary>Gets whether the "display_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisplayStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "display_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisplayStatus() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "status_percentage" field.</summary>
    public const int StatusPercentageFieldNumber = 4;
    private readonly static uint StatusPercentageDefaultValue = 0;

    private uint statusPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StatusPercentage {
      get { if ((_hasBits0 & 4) != 0) { return statusPercentage_; } else { return StatusPercentageDefaultValue; } }
      set {
        _hasBits0 |= 4;
        statusPercentage_ = value;
      }
    }
    /// <summary>Gets whether the "status_percentage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatusPercentage {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "status_percentage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatusPercentage() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "active_beta" field.</summary>
    public const int ActiveBetaFieldNumber = 5;
    private readonly static string ActiveBetaDefaultValue = "";

    private string activeBeta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveBeta {
      get { return activeBeta_ ?? ActiveBetaDefaultValue; }
      set {
        activeBeta_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "active_beta" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActiveBeta {
      get { return activeBeta_ != null; }
    }
    /// <summary>Clears the value of the "active_beta" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActiveBeta() {
      activeBeta_ = null;
    }

    /// <summary>Field number for the "installed" field.</summary>
    public const int InstalledFieldNumber = 6;
    private readonly static bool InstalledDefaultValue = false;

    private bool installed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Installed {
      get { if ((_hasBits0 & 8) != 0) { return installed_; } else { return InstalledDefaultValue; } }
      set {
        _hasBits0 |= 8;
        installed_ = value;
      }
    }
    /// <summary>Gets whether the "installed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstalled {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "installed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstalled() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "bytes_downloaded" field.</summary>
    public const int BytesDownloadedFieldNumber = 7;
    private readonly static ulong BytesDownloadedDefaultValue = 0UL;

    private ulong bytesDownloaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BytesDownloaded {
      get { if ((_hasBits0 & 16) != 0) { return bytesDownloaded_; } else { return BytesDownloadedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        bytesDownloaded_ = value;
      }
    }
    /// <summary>Gets whether the "bytes_downloaded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBytesDownloaded {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "bytes_downloaded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBytesDownloaded() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "bytes_total" field.</summary>
    public const int BytesTotalFieldNumber = 8;
    private readonly static ulong BytesTotalDefaultValue = 0UL;

    private ulong bytesTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BytesTotal {
      get { if ((_hasBits0 & 32) != 0) { return bytesTotal_; } else { return BytesTotalDefaultValue; } }
      set {
        _hasBits0 |= 32;
        bytesTotal_ = value;
      }
    }
    /// <summary>Gets whether the "bytes_total" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBytesTotal {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "bytes_total" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBytesTotal() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "streaming_to_local_client" field.</summary>
    public const int StreamingToLocalClientFieldNumber = 9;
    private readonly static bool StreamingToLocalClientDefaultValue = false;

    private bool streamingToLocalClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool StreamingToLocalClient {
      get { if ((_hasBits0 & 64) != 0) { return streamingToLocalClient_; } else { return StreamingToLocalClientDefaultValue; } }
      set {
        _hasBits0 |= 64;
        streamingToLocalClient_ = value;
      }
    }
    /// <summary>Gets whether the "streaming_to_local_client" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStreamingToLocalClient {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "streaming_to_local_client" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStreamingToLocalClient() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_available_on_current_platform" field.</summary>
    public const int IsAvailableOnCurrentPlatformFieldNumber = 10;
    private readonly static bool IsAvailableOnCurrentPlatformDefaultValue = false;

    private bool isAvailableOnCurrentPlatform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAvailableOnCurrentPlatform {
      get { if ((_hasBits0 & 128) != 0) { return isAvailableOnCurrentPlatform_; } else { return IsAvailableOnCurrentPlatformDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isAvailableOnCurrentPlatform_ = value;
      }
    }
    /// <summary>Gets whether the "is_available_on_current_platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAvailableOnCurrentPlatform {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_available_on_current_platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAvailableOnCurrentPlatform() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "is_invalid_os_type" field.</summary>
    public const int IsInvalidOsTypeFieldNumber = 11;
    private readonly static bool IsInvalidOsTypeDefaultValue = false;

    private bool isInvalidOsType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInvalidOsType {
      get { if ((_hasBits0 & 256) != 0) { return isInvalidOsType_; } else { return IsInvalidOsTypeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isInvalidOsType_ = value;
      }
    }
    /// <summary>Gets whether the "is_invalid_os_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInvalidOsType {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "is_invalid_os_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInvalidOsType() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "playtime_left" field.</summary>
    public const int PlaytimeLeftFieldNumber = 12;
    private readonly static uint PlaytimeLeftDefaultValue = 0;

    private uint playtimeLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PlaytimeLeft {
      get { if ((_hasBits0 & 512) != 0) { return playtimeLeft_; } else { return PlaytimeLeftDefaultValue; } }
      set {
        _hasBits0 |= 512;
        playtimeLeft_ = value;
      }
    }
    /// <summary>Gets whether the "playtime_left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlaytimeLeft {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "playtime_left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlaytimeLeft() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "update_available_but_disabled_by_app" field.</summary>
    public const int UpdateAvailableButDisabledByAppFieldNumber = 14;
    private readonly static bool UpdateAvailableButDisabledByAppDefaultValue = false;

    private bool updateAvailableButDisabledByApp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UpdateAvailableButDisabledByApp {
      get { if ((_hasBits0 & 1024) != 0) { return updateAvailableButDisabledByApp_; } else { return UpdateAvailableButDisabledByAppDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        updateAvailableButDisabledByApp_ = value;
      }
    }
    /// <summary>Gets whether the "update_available_but_disabled_by_app" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpdateAvailableButDisabledByApp {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "update_available_but_disabled_by_app" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpdateAvailableButDisabledByApp() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CAppOverview_PerClientData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CAppOverview_PerClientData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Clientid != other.Clientid) return false;
      if (ClientName != other.ClientName) return false;
      if (DisplayStatus != other.DisplayStatus) return false;
      if (StatusPercentage != other.StatusPercentage) return false;
      if (ActiveBeta != other.ActiveBeta) return false;
      if (Installed != other.Installed) return false;
      if (BytesDownloaded != other.BytesDownloaded) return false;
      if (BytesTotal != other.BytesTotal) return false;
      if (StreamingToLocalClient != other.StreamingToLocalClient) return false;
      if (IsAvailableOnCurrentPlatform != other.IsAvailableOnCurrentPlatform) return false;
      if (IsInvalidOsType != other.IsInvalidOsType) return false;
      if (PlaytimeLeft != other.PlaytimeLeft) return false;
      if (UpdateAvailableButDisabledByApp != other.UpdateAvailableButDisabledByApp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClientid) hash ^= Clientid.GetHashCode();
      if (HasClientName) hash ^= ClientName.GetHashCode();
      if (HasDisplayStatus) hash ^= DisplayStatus.GetHashCode();
      if (HasStatusPercentage) hash ^= StatusPercentage.GetHashCode();
      if (HasActiveBeta) hash ^= ActiveBeta.GetHashCode();
      if (HasInstalled) hash ^= Installed.GetHashCode();
      if (HasBytesDownloaded) hash ^= BytesDownloaded.GetHashCode();
      if (HasBytesTotal) hash ^= BytesTotal.GetHashCode();
      if (HasStreamingToLocalClient) hash ^= StreamingToLocalClient.GetHashCode();
      if (HasIsAvailableOnCurrentPlatform) hash ^= IsAvailableOnCurrentPlatform.GetHashCode();
      if (HasIsInvalidOsType) hash ^= IsInvalidOsType.GetHashCode();
      if (HasPlaytimeLeft) hash ^= PlaytimeLeft.GetHashCode();
      if (HasUpdateAvailableButDisabledByApp) hash ^= UpdateAvailableButDisabledByApp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClientid) {
        output.WriteRawTag(8);
        output.WriteUInt64(Clientid);
      }
      if (HasClientName) {
        output.WriteRawTag(18);
        output.WriteString(ClientName);
      }
      if (HasDisplayStatus) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DisplayStatus);
      }
      if (HasStatusPercentage) {
        output.WriteRawTag(32);
        output.WriteUInt32(StatusPercentage);
      }
      if (HasActiveBeta) {
        output.WriteRawTag(42);
        output.WriteString(ActiveBeta);
      }
      if (HasInstalled) {
        output.WriteRawTag(48);
        output.WriteBool(Installed);
      }
      if (HasBytesDownloaded) {
        output.WriteRawTag(56);
        output.WriteUInt64(BytesDownloaded);
      }
      if (HasBytesTotal) {
        output.WriteRawTag(64);
        output.WriteUInt64(BytesTotal);
      }
      if (HasStreamingToLocalClient) {
        output.WriteRawTag(72);
        output.WriteBool(StreamingToLocalClient);
      }
      if (HasIsAvailableOnCurrentPlatform) {
        output.WriteRawTag(80);
        output.WriteBool(IsAvailableOnCurrentPlatform);
      }
      if (HasIsInvalidOsType) {
        output.WriteRawTag(88);
        output.WriteBool(IsInvalidOsType);
      }
      if (HasPlaytimeLeft) {
        output.WriteRawTag(96);
        output.WriteUInt32(PlaytimeLeft);
      }
      if (HasUpdateAvailableButDisabledByApp) {
        output.WriteRawTag(112);
        output.WriteBool(UpdateAvailableButDisabledByApp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClientid) {
        output.WriteRawTag(8);
        output.WriteUInt64(Clientid);
      }
      if (HasClientName) {
        output.WriteRawTag(18);
        output.WriteString(ClientName);
      }
      if (HasDisplayStatus) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DisplayStatus);
      }
      if (HasStatusPercentage) {
        output.WriteRawTag(32);
        output.WriteUInt32(StatusPercentage);
      }
      if (HasActiveBeta) {
        output.WriteRawTag(42);
        output.WriteString(ActiveBeta);
      }
      if (HasInstalled) {
        output.WriteRawTag(48);
        output.WriteBool(Installed);
      }
      if (HasBytesDownloaded) {
        output.WriteRawTag(56);
        output.WriteUInt64(BytesDownloaded);
      }
      if (HasBytesTotal) {
        output.WriteRawTag(64);
        output.WriteUInt64(BytesTotal);
      }
      if (HasStreamingToLocalClient) {
        output.WriteRawTag(72);
        output.WriteBool(StreamingToLocalClient);
      }
      if (HasIsAvailableOnCurrentPlatform) {
        output.WriteRawTag(80);
        output.WriteBool(IsAvailableOnCurrentPlatform);
      }
      if (HasIsInvalidOsType) {
        output.WriteRawTag(88);
        output.WriteBool(IsInvalidOsType);
      }
      if (HasPlaytimeLeft) {
        output.WriteRawTag(96);
        output.WriteUInt32(PlaytimeLeft);
      }
      if (HasUpdateAvailableButDisabledByApp) {
        output.WriteRawTag(112);
        output.WriteBool(UpdateAvailableButDisabledByApp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasClientid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Clientid);
      }
      if (HasClientName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (HasDisplayStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisplayStatus);
      }
      if (HasStatusPercentage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusPercentage);
      }
      if (HasActiveBeta) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveBeta);
      }
      if (HasInstalled) {
        size += 1 + 1;
      }
      if (HasBytesDownloaded) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesDownloaded);
      }
      if (HasBytesTotal) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesTotal);
      }
      if (HasStreamingToLocalClient) {
        size += 1 + 1;
      }
      if (HasIsAvailableOnCurrentPlatform) {
        size += 1 + 1;
      }
      if (HasIsInvalidOsType) {
        size += 1 + 1;
      }
      if (HasPlaytimeLeft) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlaytimeLeft);
      }
      if (HasUpdateAvailableButDisabledByApp) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CAppOverview_PerClientData other) {
      if (other == null) {
        return;
      }
      if (other.HasClientid) {
        Clientid = other.Clientid;
      }
      if (other.HasClientName) {
        ClientName = other.ClientName;
      }
      if (other.HasDisplayStatus) {
        DisplayStatus = other.DisplayStatus;
      }
      if (other.HasStatusPercentage) {
        StatusPercentage = other.StatusPercentage;
      }
      if (other.HasActiveBeta) {
        ActiveBeta = other.ActiveBeta;
      }
      if (other.HasInstalled) {
        Installed = other.Installed;
      }
      if (other.HasBytesDownloaded) {
        BytesDownloaded = other.BytesDownloaded;
      }
      if (other.HasBytesTotal) {
        BytesTotal = other.BytesTotal;
      }
      if (other.HasStreamingToLocalClient) {
        StreamingToLocalClient = other.StreamingToLocalClient;
      }
      if (other.HasIsAvailableOnCurrentPlatform) {
        IsAvailableOnCurrentPlatform = other.IsAvailableOnCurrentPlatform;
      }
      if (other.HasIsInvalidOsType) {
        IsInvalidOsType = other.IsInvalidOsType;
      }
      if (other.HasPlaytimeLeft) {
        PlaytimeLeft = other.PlaytimeLeft;
      }
      if (other.HasUpdateAvailableButDisabledByApp) {
        UpdateAvailableButDisabledByApp = other.UpdateAvailableButDisabledByApp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Clientid = input.ReadUInt64();
            break;
          }
          case 18: {
            ClientName = input.ReadString();
            break;
          }
          case 24: {
            DisplayStatus = (global::OpenSteamworks.Protobuf.EDisplayStatus) input.ReadEnum();
            break;
          }
          case 32: {
            StatusPercentage = input.ReadUInt32();
            break;
          }
          case 42: {
            ActiveBeta = input.ReadString();
            break;
          }
          case 48: {
            Installed = input.ReadBool();
            break;
          }
          case 56: {
            BytesDownloaded = input.ReadUInt64();
            break;
          }
          case 64: {
            BytesTotal = input.ReadUInt64();
            break;
          }
          case 72: {
            StreamingToLocalClient = input.ReadBool();
            break;
          }
          case 80: {
            IsAvailableOnCurrentPlatform = input.ReadBool();
            break;
          }
          case 88: {
            IsInvalidOsType = input.ReadBool();
            break;
          }
          case 96: {
            PlaytimeLeft = input.ReadUInt32();
            break;
          }
          case 112: {
            UpdateAvailableButDisabledByApp = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Clientid = input.ReadUInt64();
            break;
          }
          case 18: {
            ClientName = input.ReadString();
            break;
          }
          case 24: {
            DisplayStatus = (global::OpenSteamworks.Protobuf.EDisplayStatus) input.ReadEnum();
            break;
          }
          case 32: {
            StatusPercentage = input.ReadUInt32();
            break;
          }
          case 42: {
            ActiveBeta = input.ReadString();
            break;
          }
          case 48: {
            Installed = input.ReadBool();
            break;
          }
          case 56: {
            BytesDownloaded = input.ReadUInt64();
            break;
          }
          case 64: {
            BytesTotal = input.ReadUInt64();
            break;
          }
          case 72: {
            StreamingToLocalClient = input.ReadBool();
            break;
          }
          case 80: {
            IsAvailableOnCurrentPlatform = input.ReadBool();
            break;
          }
          case 88: {
            IsInvalidOsType = input.ReadBool();
            break;
          }
          case 96: {
            PlaytimeLeft = input.ReadUInt32();
            break;
          }
          case 112: {
            UpdateAvailableButDisabledByApp = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CAppOverview : pb::IMessage<CAppOverview>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAppOverview> _parser = new pb::MessageParser<CAppOverview>(() => new CAppOverview());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CAppOverview> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.SteammessagesAppoverviewReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview(CAppOverview other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      appid_ = other.appid_;
      displayName_ = other.displayName_;
      visibleInGameList_ = other.visibleInGameList_;
      subscribedTo_ = other.subscribedTo_;
      sortAs_ = other.sortAs_;
      appType_ = other.appType_;
      mruIndex_ = other.mruIndex_;
      rtRecentActivityTime_ = other.rtRecentActivityTime_;
      minutesPlaytimeForever_ = other.minutesPlaytimeForever_;
      minutesPlaytimeLastTwoWeeks_ = other.minutesPlaytimeLastTwoWeeks_;
      rtLastTimePlayed_ = other.rtLastTimePlayed_;
      storeTag_ = other.storeTag_.Clone();
      storeCategory_ = other.storeCategory_.Clone();
      rtOriginalReleaseDate_ = other.rtOriginalReleaseDate_;
      rtSteamReleaseDate_ = other.rtSteamReleaseDate_;
      iconHash_ = other.iconHash_;
      xboxControllerSupport_ = other.xboxControllerSupport_;
      vrSupported_ = other.vrSupported_;
      metacriticScore_ = other.metacriticScore_;
      sizeOnDisk_ = other.sizeOnDisk_;
      thirdPartyMod_ = other.thirdPartyMod_;
      iconData_ = other.iconData_;
      iconDataFormat_ = other.iconDataFormat_;
      gameid_ = other.gameid_;
      libraryCapsuleFilename_ = other.libraryCapsuleFilename_;
      perClientData_ = other.perClientData_.Clone();
      mostAvailableClientid_ = other.mostAvailableClientid_;
      selectedClientid_ = other.selectedClientid_;
      rtStoreAssetMtime_ = other.rtStoreAssetMtime_;
      rtCustomImageMtime_ = other.rtCustomImageMtime_;
      optionalParentAppId_ = other.optionalParentAppId_;
      ownerAccountId_ = other.ownerAccountId_;
      reviewScoreWithBombs_ = other.reviewScoreWithBombs_;
      reviewPercentageWithBombs_ = other.reviewPercentageWithBombs_;
      reviewScoreWithoutBombs_ = other.reviewScoreWithoutBombs_;
      reviewPercentageWithoutBombs_ = other.reviewPercentageWithoutBombs_;
      libraryId_ = other.libraryId_;
      vrOnly_ = other.vrOnly_;
      mastersubAppid_ = other.mastersubAppid_;
      mastersubIncludedwithLogo_ = other.mastersubIncludedwithLogo_;
      siteLicenseSiteName_ = other.siteLicenseSiteName_;
      shortcutOverrideAppid_ = other.shortcutOverrideAppid_;
      rtLastTimeLocallyPlayed_ = other.rtLastTimeLocallyPlayed_;
      rtPurchasedTime_ = other.rtPurchasedTime_;
      headerFilename_ = other.headerFilename_;
      localCacheVersion_ = other.localCacheVersion_;
      numberOfCopies_ = other.numberOfCopies_;
      steamHwCompatCategoryPacked_ = other.steamHwCompatCategoryPacked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview Clone() {
      return new CAppOverview(this);
    }

    /// <summary>Field number for the "appid" field.</summary>
    public const int AppidFieldNumber = 1;
    private readonly static uint AppidDefaultValue = 0;

    private uint appid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Appid {
      get { if ((_hasBits0 & 1) != 0) { return appid_; } else { return AppidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        appid_ = value;
      }
    }
    /// <summary>Gets whether the "appid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAppid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "appid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAppid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private readonly static string DisplayNameDefaultValue = "";

    private string displayName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DisplayName {
      get { return displayName_ ?? DisplayNameDefaultValue; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "display_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisplayName {
      get { return displayName_ != null; }
    }
    /// <summary>Clears the value of the "display_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisplayName() {
      displayName_ = null;
    }

    /// <summary>Field number for the "visible_in_game_list" field.</summary>
    public const int VisibleInGameListFieldNumber = 4;
    private readonly static bool VisibleInGameListDefaultValue = false;

    private bool visibleInGameList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VisibleInGameList {
      get { if ((_hasBits0 & 2) != 0) { return visibleInGameList_; } else { return VisibleInGameListDefaultValue; } }
      set {
        _hasBits0 |= 2;
        visibleInGameList_ = value;
      }
    }
    /// <summary>Gets whether the "visible_in_game_list" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVisibleInGameList {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "visible_in_game_list" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVisibleInGameList() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "subscribed_to" field.</summary>
    public const int SubscribedToFieldNumber = 5;
    private readonly static bool SubscribedToDefaultValue = false;

    private bool subscribedTo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SubscribedTo {
      get { if ((_hasBits0 & 4) != 0) { return subscribedTo_; } else { return SubscribedToDefaultValue; } }
      set {
        _hasBits0 |= 4;
        subscribedTo_ = value;
      }
    }
    /// <summary>Gets whether the "subscribed_to" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSubscribedTo {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "subscribed_to" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubscribedTo() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "sort_as" field.</summary>
    public const int SortAsFieldNumber = 6;
    private readonly static string SortAsDefaultValue = "";

    private string sortAs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SortAs {
      get { return sortAs_ ?? SortAsDefaultValue; }
      set {
        sortAs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sort_as" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSortAs {
      get { return sortAs_ != null; }
    }
    /// <summary>Clears the value of the "sort_as" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSortAs() {
      sortAs_ = null;
    }

    /// <summary>Field number for the "app_type" field.</summary>
    public const int AppTypeFieldNumber = 7;
    private readonly static global::OpenSteamworks.Protobuf.EProtoAppType AppTypeDefaultValue = global::OpenSteamworks.Protobuf.EProtoAppType.EappTypeInvalid;

    private global::OpenSteamworks.Protobuf.EProtoAppType appType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.EProtoAppType AppType {
      get { if ((_hasBits0 & 8) != 0) { return appType_; } else { return AppTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        appType_ = value;
      }
    }
    /// <summary>Gets whether the "app_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAppType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "app_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAppType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "mru_index" field.</summary>
    public const int MruIndexFieldNumber = 13;
    private readonly static uint MruIndexDefaultValue = 0;

    private uint mruIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MruIndex {
      get { if ((_hasBits0 & 16) != 0) { return mruIndex_; } else { return MruIndexDefaultValue; } }
      set {
        _hasBits0 |= 16;
        mruIndex_ = value;
      }
    }
    /// <summary>Gets whether the "mru_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMruIndex {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "mru_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMruIndex() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "rt_recent_activity_time" field.</summary>
    public const int RtRecentActivityTimeFieldNumber = 14;
    private readonly static uint RtRecentActivityTimeDefaultValue = 0;

    private uint rtRecentActivityTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtRecentActivityTime {
      get { if ((_hasBits0 & 32) != 0) { return rtRecentActivityTime_; } else { return RtRecentActivityTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        rtRecentActivityTime_ = value;
      }
    }
    /// <summary>Gets whether the "rt_recent_activity_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtRecentActivityTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "rt_recent_activity_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtRecentActivityTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "minutes_playtime_forever" field.</summary>
    public const int MinutesPlaytimeForeverFieldNumber = 16;
    private readonly static uint MinutesPlaytimeForeverDefaultValue = 0;

    private uint minutesPlaytimeForever_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MinutesPlaytimeForever {
      get { if ((_hasBits0 & 64) != 0) { return minutesPlaytimeForever_; } else { return MinutesPlaytimeForeverDefaultValue; } }
      set {
        _hasBits0 |= 64;
        minutesPlaytimeForever_ = value;
      }
    }
    /// <summary>Gets whether the "minutes_playtime_forever" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinutesPlaytimeForever {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "minutes_playtime_forever" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinutesPlaytimeForever() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "minutes_playtime_last_two_weeks" field.</summary>
    public const int MinutesPlaytimeLastTwoWeeksFieldNumber = 17;
    private readonly static uint MinutesPlaytimeLastTwoWeeksDefaultValue = 0;

    private uint minutesPlaytimeLastTwoWeeks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MinutesPlaytimeLastTwoWeeks {
      get { if ((_hasBits0 & 128) != 0) { return minutesPlaytimeLastTwoWeeks_; } else { return MinutesPlaytimeLastTwoWeeksDefaultValue; } }
      set {
        _hasBits0 |= 128;
        minutesPlaytimeLastTwoWeeks_ = value;
      }
    }
    /// <summary>Gets whether the "minutes_playtime_last_two_weeks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinutesPlaytimeLastTwoWeeks {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "minutes_playtime_last_two_weeks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinutesPlaytimeLastTwoWeeks() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "rt_last_time_played" field.</summary>
    public const int RtLastTimePlayedFieldNumber = 18;
    private readonly static uint RtLastTimePlayedDefaultValue = 0;

    private uint rtLastTimePlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtLastTimePlayed {
      get { if ((_hasBits0 & 256) != 0) { return rtLastTimePlayed_; } else { return RtLastTimePlayedDefaultValue; } }
      set {
        _hasBits0 |= 256;
        rtLastTimePlayed_ = value;
      }
    }
    /// <summary>Gets whether the "rt_last_time_played" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtLastTimePlayed {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "rt_last_time_played" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtLastTimePlayed() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "store_tag" field.</summary>
    public const int StoreTagFieldNumber = 19;
    private static readonly pb::FieldCodec<uint> _repeated_storeTag_codec
        = pb::FieldCodec.ForUInt32(152);
    private readonly pbc::RepeatedField<uint> storeTag_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> StoreTag {
      get { return storeTag_; }
    }

    /// <summary>Field number for the "store_category" field.</summary>
    public const int StoreCategoryFieldNumber = 23;
    private static readonly pb::FieldCodec<uint> _repeated_storeCategory_codec
        = pb::FieldCodec.ForUInt32(184);
    private readonly pbc::RepeatedField<uint> storeCategory_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> StoreCategory {
      get { return storeCategory_; }
    }

    /// <summary>Field number for the "rt_original_release_date" field.</summary>
    public const int RtOriginalReleaseDateFieldNumber = 25;
    private readonly static uint RtOriginalReleaseDateDefaultValue = 0;

    private uint rtOriginalReleaseDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtOriginalReleaseDate {
      get { if ((_hasBits0 & 512) != 0) { return rtOriginalReleaseDate_; } else { return RtOriginalReleaseDateDefaultValue; } }
      set {
        _hasBits0 |= 512;
        rtOriginalReleaseDate_ = value;
      }
    }
    /// <summary>Gets whether the "rt_original_release_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtOriginalReleaseDate {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "rt_original_release_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtOriginalReleaseDate() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "rt_steam_release_date" field.</summary>
    public const int RtSteamReleaseDateFieldNumber = 26;
    private readonly static uint RtSteamReleaseDateDefaultValue = 0;

    private uint rtSteamReleaseDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtSteamReleaseDate {
      get { if ((_hasBits0 & 1024) != 0) { return rtSteamReleaseDate_; } else { return RtSteamReleaseDateDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        rtSteamReleaseDate_ = value;
      }
    }
    /// <summary>Gets whether the "rt_steam_release_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtSteamReleaseDate {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "rt_steam_release_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtSteamReleaseDate() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "icon_hash" field.</summary>
    public const int IconHashFieldNumber = 27;
    private readonly static string IconHashDefaultValue = "";

    private string iconHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IconHash {
      get { return iconHash_ ?? IconHashDefaultValue; }
      set {
        iconHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon_hash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIconHash {
      get { return iconHash_ != null; }
    }
    /// <summary>Clears the value of the "icon_hash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIconHash() {
      iconHash_ = null;
    }

    /// <summary>Field number for the "xbox_controller_support" field.</summary>
    public const int XboxControllerSupportFieldNumber = 31;
    private readonly static global::OpenSteamworks.Protobuf.EAppControllerSupportLevel XboxControllerSupportDefaultValue = global::OpenSteamworks.Protobuf.EAppControllerSupportLevel.None;

    private global::OpenSteamworks.Protobuf.EAppControllerSupportLevel xboxControllerSupport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenSteamworks.Protobuf.EAppControllerSupportLevel XboxControllerSupport {
      get { if ((_hasBits0 & 2048) != 0) { return xboxControllerSupport_; } else { return XboxControllerSupportDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        xboxControllerSupport_ = value;
      }
    }
    /// <summary>Gets whether the "xbox_controller_support" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasXboxControllerSupport {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "xbox_controller_support" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearXboxControllerSupport() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "vr_supported" field.</summary>
    public const int VrSupportedFieldNumber = 32;
    private readonly static bool VrSupportedDefaultValue = false;

    private bool vrSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VrSupported {
      get { if ((_hasBits0 & 4096) != 0) { return vrSupported_; } else { return VrSupportedDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        vrSupported_ = value;
      }
    }
    /// <summary>Gets whether the "vr_supported" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVrSupported {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "vr_supported" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVrSupported() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "metacritic_score" field.</summary>
    public const int MetacriticScoreFieldNumber = 36;
    private readonly static uint MetacriticScoreDefaultValue = 0;

    private uint metacriticScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MetacriticScore {
      get { if ((_hasBits0 & 8192) != 0) { return metacriticScore_; } else { return MetacriticScoreDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        metacriticScore_ = value;
      }
    }
    /// <summary>Gets whether the "metacritic_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMetacriticScore {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "metacritic_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMetacriticScore() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "size_on_disk" field.</summary>
    public const int SizeOnDiskFieldNumber = 37;
    private readonly static ulong SizeOnDiskDefaultValue = 0UL;

    private ulong sizeOnDisk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SizeOnDisk {
      get { if ((_hasBits0 & 16384) != 0) { return sizeOnDisk_; } else { return SizeOnDiskDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        sizeOnDisk_ = value;
      }
    }
    /// <summary>Gets whether the "size_on_disk" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSizeOnDisk {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "size_on_disk" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSizeOnDisk() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "third_party_mod" field.</summary>
    public const int ThirdPartyModFieldNumber = 38;
    private readonly static bool ThirdPartyModDefaultValue = false;

    private bool thirdPartyMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ThirdPartyMod {
      get { if ((_hasBits0 & 32768) != 0) { return thirdPartyMod_; } else { return ThirdPartyModDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        thirdPartyMod_ = value;
      }
    }
    /// <summary>Gets whether the "third_party_mod" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThirdPartyMod {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "third_party_mod" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThirdPartyMod() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "icon_data" field.</summary>
    public const int IconDataFieldNumber = 39;
    private readonly static string IconDataDefaultValue = "";

    private string iconData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IconData {
      get { return iconData_ ?? IconDataDefaultValue; }
      set {
        iconData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIconData {
      get { return iconData_ != null; }
    }
    /// <summary>Clears the value of the "icon_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIconData() {
      iconData_ = null;
    }

    /// <summary>Field number for the "icon_data_format" field.</summary>
    public const int IconDataFormatFieldNumber = 40;
    private readonly static string IconDataFormatDefaultValue = "";

    private string iconDataFormat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IconDataFormat {
      get { return iconDataFormat_ ?? IconDataFormatDefaultValue; }
      set {
        iconDataFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "icon_data_format" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIconDataFormat {
      get { return iconDataFormat_ != null; }
    }
    /// <summary>Clears the value of the "icon_data_format" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIconDataFormat() {
      iconDataFormat_ = null;
    }

    /// <summary>Field number for the "gameid" field.</summary>
    public const int GameidFieldNumber = 41;
    private readonly static string GameidDefaultValue = "";

    private string gameid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Gameid {
      get { return gameid_ ?? GameidDefaultValue; }
      set {
        gameid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gameid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameid {
      get { return gameid_ != null; }
    }
    /// <summary>Clears the value of the "gameid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameid() {
      gameid_ = null;
    }

    /// <summary>Field number for the "library_capsule_filename" field.</summary>
    public const int LibraryCapsuleFilenameFieldNumber = 42;
    private readonly static string LibraryCapsuleFilenameDefaultValue = "";

    private string libraryCapsuleFilename_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LibraryCapsuleFilename {
      get { return libraryCapsuleFilename_ ?? LibraryCapsuleFilenameDefaultValue; }
      set {
        libraryCapsuleFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "library_capsule_filename" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLibraryCapsuleFilename {
      get { return libraryCapsuleFilename_ != null; }
    }
    /// <summary>Clears the value of the "library_capsule_filename" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLibraryCapsuleFilename() {
      libraryCapsuleFilename_ = null;
    }

    /// <summary>Field number for the "per_client_data" field.</summary>
    public const int PerClientDataFieldNumber = 43;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CAppOverview_PerClientData> _repeated_perClientData_codec
        = pb::FieldCodec.ForMessage(346, global::OpenSteamworks.Protobuf.CAppOverview_PerClientData.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppOverview_PerClientData> perClientData_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppOverview_PerClientData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppOverview_PerClientData> PerClientData {
      get { return perClientData_; }
    }

    /// <summary>Field number for the "most_available_clientid" field.</summary>
    public const int MostAvailableClientidFieldNumber = 44;
    private readonly static ulong MostAvailableClientidDefaultValue = 0UL;

    private ulong mostAvailableClientid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MostAvailableClientid {
      get { if ((_hasBits0 & 65536) != 0) { return mostAvailableClientid_; } else { return MostAvailableClientidDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        mostAvailableClientid_ = value;
      }
    }
    /// <summary>Gets whether the "most_available_clientid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMostAvailableClientid {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "most_available_clientid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMostAvailableClientid() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "selected_clientid" field.</summary>
    public const int SelectedClientidFieldNumber = 45;
    private readonly static ulong SelectedClientidDefaultValue = 0UL;

    private ulong selectedClientid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SelectedClientid {
      get { if ((_hasBits0 & 131072) != 0) { return selectedClientid_; } else { return SelectedClientidDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        selectedClientid_ = value;
      }
    }
    /// <summary>Gets whether the "selected_clientid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSelectedClientid {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "selected_clientid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSelectedClientid() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "rt_store_asset_mtime" field.</summary>
    public const int RtStoreAssetMtimeFieldNumber = 46;
    private readonly static uint RtStoreAssetMtimeDefaultValue = 0;

    private uint rtStoreAssetMtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtStoreAssetMtime {
      get { if ((_hasBits0 & 262144) != 0) { return rtStoreAssetMtime_; } else { return RtStoreAssetMtimeDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        rtStoreAssetMtime_ = value;
      }
    }
    /// <summary>Gets whether the "rt_store_asset_mtime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtStoreAssetMtime {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "rt_store_asset_mtime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtStoreAssetMtime() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "rt_custom_image_mtime" field.</summary>
    public const int RtCustomImageMtimeFieldNumber = 47;
    private readonly static uint RtCustomImageMtimeDefaultValue = 0;

    private uint rtCustomImageMtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtCustomImageMtime {
      get { if ((_hasBits0 & 524288) != 0) { return rtCustomImageMtime_; } else { return RtCustomImageMtimeDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        rtCustomImageMtime_ = value;
      }
    }
    /// <summary>Gets whether the "rt_custom_image_mtime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtCustomImageMtime {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "rt_custom_image_mtime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtCustomImageMtime() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "optional_parent_app_id" field.</summary>
    public const int OptionalParentAppIdFieldNumber = 48;
    private readonly static uint OptionalParentAppIdDefaultValue = 0;

    private uint optionalParentAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OptionalParentAppId {
      get { if ((_hasBits0 & 1048576) != 0) { return optionalParentAppId_; } else { return OptionalParentAppIdDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        optionalParentAppId_ = value;
      }
    }
    /// <summary>Gets whether the "optional_parent_app_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOptionalParentAppId {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "optional_parent_app_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOptionalParentAppId() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "owner_account_id" field.</summary>
    public const int OwnerAccountIdFieldNumber = 49;
    private readonly static uint OwnerAccountIdDefaultValue = 0;

    private uint ownerAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OwnerAccountId {
      get { if ((_hasBits0 & 2097152) != 0) { return ownerAccountId_; } else { return OwnerAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        ownerAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "owner_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOwnerAccountId {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "owner_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOwnerAccountId() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "review_score_with_bombs" field.</summary>
    public const int ReviewScoreWithBombsFieldNumber = 53;
    private readonly static uint ReviewScoreWithBombsDefaultValue = 0;

    private uint reviewScoreWithBombs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ReviewScoreWithBombs {
      get { if ((_hasBits0 & 4194304) != 0) { return reviewScoreWithBombs_; } else { return ReviewScoreWithBombsDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        reviewScoreWithBombs_ = value;
      }
    }
    /// <summary>Gets whether the "review_score_with_bombs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReviewScoreWithBombs {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "review_score_with_bombs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReviewScoreWithBombs() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "review_percentage_with_bombs" field.</summary>
    public const int ReviewPercentageWithBombsFieldNumber = 54;
    private readonly static uint ReviewPercentageWithBombsDefaultValue = 0;

    private uint reviewPercentageWithBombs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ReviewPercentageWithBombs {
      get { if ((_hasBits0 & 8388608) != 0) { return reviewPercentageWithBombs_; } else { return ReviewPercentageWithBombsDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        reviewPercentageWithBombs_ = value;
      }
    }
    /// <summary>Gets whether the "review_percentage_with_bombs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReviewPercentageWithBombs {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "review_percentage_with_bombs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReviewPercentageWithBombs() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "review_score_without_bombs" field.</summary>
    public const int ReviewScoreWithoutBombsFieldNumber = 55;
    private readonly static uint ReviewScoreWithoutBombsDefaultValue = 0;

    private uint reviewScoreWithoutBombs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ReviewScoreWithoutBombs {
      get { if ((_hasBits0 & 16777216) != 0) { return reviewScoreWithoutBombs_; } else { return ReviewScoreWithoutBombsDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        reviewScoreWithoutBombs_ = value;
      }
    }
    /// <summary>Gets whether the "review_score_without_bombs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReviewScoreWithoutBombs {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "review_score_without_bombs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReviewScoreWithoutBombs() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "review_percentage_without_bombs" field.</summary>
    public const int ReviewPercentageWithoutBombsFieldNumber = 56;
    private readonly static uint ReviewPercentageWithoutBombsDefaultValue = 0;

    private uint reviewPercentageWithoutBombs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ReviewPercentageWithoutBombs {
      get { if ((_hasBits0 & 33554432) != 0) { return reviewPercentageWithoutBombs_; } else { return ReviewPercentageWithoutBombsDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        reviewPercentageWithoutBombs_ = value;
      }
    }
    /// <summary>Gets whether the "review_percentage_without_bombs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReviewPercentageWithoutBombs {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "review_percentage_without_bombs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReviewPercentageWithoutBombs() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "library_id" field.</summary>
    public const int LibraryIdFieldNumber = 57;
    private readonly static string LibraryIdDefaultValue = "";

    private string libraryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LibraryId {
      get { return libraryId_ ?? LibraryIdDefaultValue; }
      set {
        libraryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "library_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLibraryId {
      get { return libraryId_ != null; }
    }
    /// <summary>Clears the value of the "library_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLibraryId() {
      libraryId_ = null;
    }

    /// <summary>Field number for the "vr_only" field.</summary>
    public const int VrOnlyFieldNumber = 58;
    private readonly static bool VrOnlyDefaultValue = false;

    private bool vrOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VrOnly {
      get { if ((_hasBits0 & 67108864) != 0) { return vrOnly_; } else { return VrOnlyDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        vrOnly_ = value;
      }
    }
    /// <summary>Gets whether the "vr_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVrOnly {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "vr_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVrOnly() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "mastersub_appid" field.</summary>
    public const int MastersubAppidFieldNumber = 59;
    private readonly static uint MastersubAppidDefaultValue = 0;

    private uint mastersubAppid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MastersubAppid {
      get { if ((_hasBits0 & 134217728) != 0) { return mastersubAppid_; } else { return MastersubAppidDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        mastersubAppid_ = value;
      }
    }
    /// <summary>Gets whether the "mastersub_appid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMastersubAppid {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "mastersub_appid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMastersubAppid() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "mastersub_includedwith_logo" field.</summary>
    public const int MastersubIncludedwithLogoFieldNumber = 60;
    private readonly static string MastersubIncludedwithLogoDefaultValue = "";

    private string mastersubIncludedwithLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MastersubIncludedwithLogo {
      get { return mastersubIncludedwithLogo_ ?? MastersubIncludedwithLogoDefaultValue; }
      set {
        mastersubIncludedwithLogo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mastersub_includedwith_logo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMastersubIncludedwithLogo {
      get { return mastersubIncludedwithLogo_ != null; }
    }
    /// <summary>Clears the value of the "mastersub_includedwith_logo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMastersubIncludedwithLogo() {
      mastersubIncludedwithLogo_ = null;
    }

    /// <summary>Field number for the "site_license_site_name" field.</summary>
    public const int SiteLicenseSiteNameFieldNumber = 62;
    private readonly static string SiteLicenseSiteNameDefaultValue = "";

    private string siteLicenseSiteName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SiteLicenseSiteName {
      get { return siteLicenseSiteName_ ?? SiteLicenseSiteNameDefaultValue; }
      set {
        siteLicenseSiteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "site_license_site_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSiteLicenseSiteName {
      get { return siteLicenseSiteName_ != null; }
    }
    /// <summary>Clears the value of the "site_license_site_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSiteLicenseSiteName() {
      siteLicenseSiteName_ = null;
    }

    /// <summary>Field number for the "shortcut_override_appid" field.</summary>
    public const int ShortcutOverrideAppidFieldNumber = 63;
    private readonly static uint ShortcutOverrideAppidDefaultValue = 0;

    private uint shortcutOverrideAppid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ShortcutOverrideAppid {
      get { if ((_hasBits0 & 268435456) != 0) { return shortcutOverrideAppid_; } else { return ShortcutOverrideAppidDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        shortcutOverrideAppid_ = value;
      }
    }
    /// <summary>Gets whether the "shortcut_override_appid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShortcutOverrideAppid {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "shortcut_override_appid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShortcutOverrideAppid() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "rt_last_time_locally_played" field.</summary>
    public const int RtLastTimeLocallyPlayedFieldNumber = 65;
    private readonly static uint RtLastTimeLocallyPlayedDefaultValue = 0;

    private uint rtLastTimeLocallyPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtLastTimeLocallyPlayed {
      get { if ((_hasBits0 & 536870912) != 0) { return rtLastTimeLocallyPlayed_; } else { return RtLastTimeLocallyPlayedDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        rtLastTimeLocallyPlayed_ = value;
      }
    }
    /// <summary>Gets whether the "rt_last_time_locally_played" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtLastTimeLocallyPlayed {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "rt_last_time_locally_played" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtLastTimeLocallyPlayed() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "rt_purchased_time" field.</summary>
    public const int RtPurchasedTimeFieldNumber = 66;
    private readonly static uint RtPurchasedTimeDefaultValue = 0;

    private uint rtPurchasedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RtPurchasedTime {
      get { if ((_hasBits0 & 1073741824) != 0) { return rtPurchasedTime_; } else { return RtPurchasedTimeDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        rtPurchasedTime_ = value;
      }
    }
    /// <summary>Gets whether the "rt_purchased_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRtPurchasedTime {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "rt_purchased_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRtPurchasedTime() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "header_filename" field.</summary>
    public const int HeaderFilenameFieldNumber = 67;
    private readonly static string HeaderFilenameDefaultValue = "";

    private string headerFilename_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HeaderFilename {
      get { return headerFilename_ ?? HeaderFilenameDefaultValue; }
      set {
        headerFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "header_filename" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeaderFilename {
      get { return headerFilename_ != null; }
    }
    /// <summary>Clears the value of the "header_filename" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeaderFilename() {
      headerFilename_ = null;
    }

    /// <summary>Field number for the "local_cache_version" field.</summary>
    public const int LocalCacheVersionFieldNumber = 68;
    private readonly static uint LocalCacheVersionDefaultValue = 0;

    private uint localCacheVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LocalCacheVersion {
      get { if ((_hasBits0 & -2147483648) != 0) { return localCacheVersion_; } else { return LocalCacheVersionDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        localCacheVersion_ = value;
      }
    }
    /// <summary>Gets whether the "local_cache_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLocalCacheVersion {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "local_cache_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocalCacheVersion() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "number_of_copies" field.</summary>
    public const int NumberOfCopiesFieldNumber = 72;
    private readonly static uint NumberOfCopiesDefaultValue = 0;

    private uint numberOfCopies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumberOfCopies {
      get { if ((_hasBits1 & 1) != 0) { return numberOfCopies_; } else { return NumberOfCopiesDefaultValue; } }
      set {
        _hasBits1 |= 1;
        numberOfCopies_ = value;
      }
    }
    /// <summary>Gets whether the "number_of_copies" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumberOfCopies {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "number_of_copies" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumberOfCopies() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "steam_hw_compat_category_packed" field.</summary>
    public const int SteamHwCompatCategoryPackedFieldNumber = 73;
    private readonly static uint SteamHwCompatCategoryPackedDefaultValue = 0;

    private uint steamHwCompatCategoryPacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SteamHwCompatCategoryPacked {
      get { if ((_hasBits1 & 2) != 0) { return steamHwCompatCategoryPacked_; } else { return SteamHwCompatCategoryPackedDefaultValue; } }
      set {
        _hasBits1 |= 2;
        steamHwCompatCategoryPacked_ = value;
      }
    }
    /// <summary>Gets whether the "steam_hw_compat_category_packed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamHwCompatCategoryPacked {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "steam_hw_compat_category_packed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamHwCompatCategoryPacked() {
      _hasBits1 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CAppOverview);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CAppOverview other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Appid != other.Appid) return false;
      if (DisplayName != other.DisplayName) return false;
      if (VisibleInGameList != other.VisibleInGameList) return false;
      if (SubscribedTo != other.SubscribedTo) return false;
      if (SortAs != other.SortAs) return false;
      if (AppType != other.AppType) return false;
      if (MruIndex != other.MruIndex) return false;
      if (RtRecentActivityTime != other.RtRecentActivityTime) return false;
      if (MinutesPlaytimeForever != other.MinutesPlaytimeForever) return false;
      if (MinutesPlaytimeLastTwoWeeks != other.MinutesPlaytimeLastTwoWeeks) return false;
      if (RtLastTimePlayed != other.RtLastTimePlayed) return false;
      if(!storeTag_.Equals(other.storeTag_)) return false;
      if(!storeCategory_.Equals(other.storeCategory_)) return false;
      if (RtOriginalReleaseDate != other.RtOriginalReleaseDate) return false;
      if (RtSteamReleaseDate != other.RtSteamReleaseDate) return false;
      if (IconHash != other.IconHash) return false;
      if (XboxControllerSupport != other.XboxControllerSupport) return false;
      if (VrSupported != other.VrSupported) return false;
      if (MetacriticScore != other.MetacriticScore) return false;
      if (SizeOnDisk != other.SizeOnDisk) return false;
      if (ThirdPartyMod != other.ThirdPartyMod) return false;
      if (IconData != other.IconData) return false;
      if (IconDataFormat != other.IconDataFormat) return false;
      if (Gameid != other.Gameid) return false;
      if (LibraryCapsuleFilename != other.LibraryCapsuleFilename) return false;
      if(!perClientData_.Equals(other.perClientData_)) return false;
      if (MostAvailableClientid != other.MostAvailableClientid) return false;
      if (SelectedClientid != other.SelectedClientid) return false;
      if (RtStoreAssetMtime != other.RtStoreAssetMtime) return false;
      if (RtCustomImageMtime != other.RtCustomImageMtime) return false;
      if (OptionalParentAppId != other.OptionalParentAppId) return false;
      if (OwnerAccountId != other.OwnerAccountId) return false;
      if (ReviewScoreWithBombs != other.ReviewScoreWithBombs) return false;
      if (ReviewPercentageWithBombs != other.ReviewPercentageWithBombs) return false;
      if (ReviewScoreWithoutBombs != other.ReviewScoreWithoutBombs) return false;
      if (ReviewPercentageWithoutBombs != other.ReviewPercentageWithoutBombs) return false;
      if (LibraryId != other.LibraryId) return false;
      if (VrOnly != other.VrOnly) return false;
      if (MastersubAppid != other.MastersubAppid) return false;
      if (MastersubIncludedwithLogo != other.MastersubIncludedwithLogo) return false;
      if (SiteLicenseSiteName != other.SiteLicenseSiteName) return false;
      if (ShortcutOverrideAppid != other.ShortcutOverrideAppid) return false;
      if (RtLastTimeLocallyPlayed != other.RtLastTimeLocallyPlayed) return false;
      if (RtPurchasedTime != other.RtPurchasedTime) return false;
      if (HeaderFilename != other.HeaderFilename) return false;
      if (LocalCacheVersion != other.LocalCacheVersion) return false;
      if (NumberOfCopies != other.NumberOfCopies) return false;
      if (SteamHwCompatCategoryPacked != other.SteamHwCompatCategoryPacked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAppid) hash ^= Appid.GetHashCode();
      if (HasDisplayName) hash ^= DisplayName.GetHashCode();
      if (HasVisibleInGameList) hash ^= VisibleInGameList.GetHashCode();
      if (HasSubscribedTo) hash ^= SubscribedTo.GetHashCode();
      if (HasSortAs) hash ^= SortAs.GetHashCode();
      if (HasAppType) hash ^= AppType.GetHashCode();
      if (HasMruIndex) hash ^= MruIndex.GetHashCode();
      if (HasRtRecentActivityTime) hash ^= RtRecentActivityTime.GetHashCode();
      if (HasMinutesPlaytimeForever) hash ^= MinutesPlaytimeForever.GetHashCode();
      if (HasMinutesPlaytimeLastTwoWeeks) hash ^= MinutesPlaytimeLastTwoWeeks.GetHashCode();
      if (HasRtLastTimePlayed) hash ^= RtLastTimePlayed.GetHashCode();
      hash ^= storeTag_.GetHashCode();
      hash ^= storeCategory_.GetHashCode();
      if (HasRtOriginalReleaseDate) hash ^= RtOriginalReleaseDate.GetHashCode();
      if (HasRtSteamReleaseDate) hash ^= RtSteamReleaseDate.GetHashCode();
      if (HasIconHash) hash ^= IconHash.GetHashCode();
      if (HasXboxControllerSupport) hash ^= XboxControllerSupport.GetHashCode();
      if (HasVrSupported) hash ^= VrSupported.GetHashCode();
      if (HasMetacriticScore) hash ^= MetacriticScore.GetHashCode();
      if (HasSizeOnDisk) hash ^= SizeOnDisk.GetHashCode();
      if (HasThirdPartyMod) hash ^= ThirdPartyMod.GetHashCode();
      if (HasIconData) hash ^= IconData.GetHashCode();
      if (HasIconDataFormat) hash ^= IconDataFormat.GetHashCode();
      if (HasGameid) hash ^= Gameid.GetHashCode();
      if (HasLibraryCapsuleFilename) hash ^= LibraryCapsuleFilename.GetHashCode();
      hash ^= perClientData_.GetHashCode();
      if (HasMostAvailableClientid) hash ^= MostAvailableClientid.GetHashCode();
      if (HasSelectedClientid) hash ^= SelectedClientid.GetHashCode();
      if (HasRtStoreAssetMtime) hash ^= RtStoreAssetMtime.GetHashCode();
      if (HasRtCustomImageMtime) hash ^= RtCustomImageMtime.GetHashCode();
      if (HasOptionalParentAppId) hash ^= OptionalParentAppId.GetHashCode();
      if (HasOwnerAccountId) hash ^= OwnerAccountId.GetHashCode();
      if (HasReviewScoreWithBombs) hash ^= ReviewScoreWithBombs.GetHashCode();
      if (HasReviewPercentageWithBombs) hash ^= ReviewPercentageWithBombs.GetHashCode();
      if (HasReviewScoreWithoutBombs) hash ^= ReviewScoreWithoutBombs.GetHashCode();
      if (HasReviewPercentageWithoutBombs) hash ^= ReviewPercentageWithoutBombs.GetHashCode();
      if (HasLibraryId) hash ^= LibraryId.GetHashCode();
      if (HasVrOnly) hash ^= VrOnly.GetHashCode();
      if (HasMastersubAppid) hash ^= MastersubAppid.GetHashCode();
      if (HasMastersubIncludedwithLogo) hash ^= MastersubIncludedwithLogo.GetHashCode();
      if (HasSiteLicenseSiteName) hash ^= SiteLicenseSiteName.GetHashCode();
      if (HasShortcutOverrideAppid) hash ^= ShortcutOverrideAppid.GetHashCode();
      if (HasRtLastTimeLocallyPlayed) hash ^= RtLastTimeLocallyPlayed.GetHashCode();
      if (HasRtPurchasedTime) hash ^= RtPurchasedTime.GetHashCode();
      if (HasHeaderFilename) hash ^= HeaderFilename.GetHashCode();
      if (HasLocalCacheVersion) hash ^= LocalCacheVersion.GetHashCode();
      if (HasNumberOfCopies) hash ^= NumberOfCopies.GetHashCode();
      if (HasSteamHwCompatCategoryPacked) hash ^= SteamHwCompatCategoryPacked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAppid) {
        output.WriteRawTag(8);
        output.WriteUInt32(Appid);
      }
      if (HasDisplayName) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (HasVisibleInGameList) {
        output.WriteRawTag(32);
        output.WriteBool(VisibleInGameList);
      }
      if (HasSubscribedTo) {
        output.WriteRawTag(40);
        output.WriteBool(SubscribedTo);
      }
      if (HasSortAs) {
        output.WriteRawTag(50);
        output.WriteString(SortAs);
      }
      if (HasAppType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) AppType);
      }
      if (HasMruIndex) {
        output.WriteRawTag(104);
        output.WriteUInt32(MruIndex);
      }
      if (HasRtRecentActivityTime) {
        output.WriteRawTag(112);
        output.WriteUInt32(RtRecentActivityTime);
      }
      if (HasMinutesPlaytimeForever) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(MinutesPlaytimeForever);
      }
      if (HasMinutesPlaytimeLastTwoWeeks) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MinutesPlaytimeLastTwoWeeks);
      }
      if (HasRtLastTimePlayed) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(RtLastTimePlayed);
      }
      storeTag_.WriteTo(output, _repeated_storeTag_codec);
      storeCategory_.WriteTo(output, _repeated_storeCategory_codec);
      if (HasRtOriginalReleaseDate) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(RtOriginalReleaseDate);
      }
      if (HasRtSteamReleaseDate) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(RtSteamReleaseDate);
      }
      if (HasIconHash) {
        output.WriteRawTag(218, 1);
        output.WriteString(IconHash);
      }
      if (HasXboxControllerSupport) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) XboxControllerSupport);
      }
      if (HasVrSupported) {
        output.WriteRawTag(128, 2);
        output.WriteBool(VrSupported);
      }
      if (HasMetacriticScore) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(MetacriticScore);
      }
      if (HasSizeOnDisk) {
        output.WriteRawTag(168, 2);
        output.WriteUInt64(SizeOnDisk);
      }
      if (HasThirdPartyMod) {
        output.WriteRawTag(176, 2);
        output.WriteBool(ThirdPartyMod);
      }
      if (HasIconData) {
        output.WriteRawTag(186, 2);
        output.WriteString(IconData);
      }
      if (HasIconDataFormat) {
        output.WriteRawTag(194, 2);
        output.WriteString(IconDataFormat);
      }
      if (HasGameid) {
        output.WriteRawTag(202, 2);
        output.WriteString(Gameid);
      }
      if (HasLibraryCapsuleFilename) {
        output.WriteRawTag(210, 2);
        output.WriteString(LibraryCapsuleFilename);
      }
      perClientData_.WriteTo(output, _repeated_perClientData_codec);
      if (HasMostAvailableClientid) {
        output.WriteRawTag(224, 2);
        output.WriteUInt64(MostAvailableClientid);
      }
      if (HasSelectedClientid) {
        output.WriteRawTag(232, 2);
        output.WriteUInt64(SelectedClientid);
      }
      if (HasRtStoreAssetMtime) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(RtStoreAssetMtime);
      }
      if (HasRtCustomImageMtime) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(RtCustomImageMtime);
      }
      if (HasOptionalParentAppId) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(OptionalParentAppId);
      }
      if (HasOwnerAccountId) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(OwnerAccountId);
      }
      if (HasReviewScoreWithBombs) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(ReviewScoreWithBombs);
      }
      if (HasReviewPercentageWithBombs) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(ReviewPercentageWithBombs);
      }
      if (HasReviewScoreWithoutBombs) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(ReviewScoreWithoutBombs);
      }
      if (HasReviewPercentageWithoutBombs) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(ReviewPercentageWithoutBombs);
      }
      if (HasLibraryId) {
        output.WriteRawTag(202, 3);
        output.WriteString(LibraryId);
      }
      if (HasVrOnly) {
        output.WriteRawTag(208, 3);
        output.WriteBool(VrOnly);
      }
      if (HasMastersubAppid) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(MastersubAppid);
      }
      if (HasMastersubIncludedwithLogo) {
        output.WriteRawTag(226, 3);
        output.WriteString(MastersubIncludedwithLogo);
      }
      if (HasSiteLicenseSiteName) {
        output.WriteRawTag(242, 3);
        output.WriteString(SiteLicenseSiteName);
      }
      if (HasShortcutOverrideAppid) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(ShortcutOverrideAppid);
      }
      if (HasRtLastTimeLocallyPlayed) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(RtLastTimeLocallyPlayed);
      }
      if (HasRtPurchasedTime) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(RtPurchasedTime);
      }
      if (HasHeaderFilename) {
        output.WriteRawTag(154, 4);
        output.WriteString(HeaderFilename);
      }
      if (HasLocalCacheVersion) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(LocalCacheVersion);
      }
      if (HasNumberOfCopies) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(NumberOfCopies);
      }
      if (HasSteamHwCompatCategoryPacked) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(SteamHwCompatCategoryPacked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAppid) {
        output.WriteRawTag(8);
        output.WriteUInt32(Appid);
      }
      if (HasDisplayName) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (HasVisibleInGameList) {
        output.WriteRawTag(32);
        output.WriteBool(VisibleInGameList);
      }
      if (HasSubscribedTo) {
        output.WriteRawTag(40);
        output.WriteBool(SubscribedTo);
      }
      if (HasSortAs) {
        output.WriteRawTag(50);
        output.WriteString(SortAs);
      }
      if (HasAppType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) AppType);
      }
      if (HasMruIndex) {
        output.WriteRawTag(104);
        output.WriteUInt32(MruIndex);
      }
      if (HasRtRecentActivityTime) {
        output.WriteRawTag(112);
        output.WriteUInt32(RtRecentActivityTime);
      }
      if (HasMinutesPlaytimeForever) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(MinutesPlaytimeForever);
      }
      if (HasMinutesPlaytimeLastTwoWeeks) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MinutesPlaytimeLastTwoWeeks);
      }
      if (HasRtLastTimePlayed) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(RtLastTimePlayed);
      }
      storeTag_.WriteTo(ref output, _repeated_storeTag_codec);
      storeCategory_.WriteTo(ref output, _repeated_storeCategory_codec);
      if (HasRtOriginalReleaseDate) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(RtOriginalReleaseDate);
      }
      if (HasRtSteamReleaseDate) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(RtSteamReleaseDate);
      }
      if (HasIconHash) {
        output.WriteRawTag(218, 1);
        output.WriteString(IconHash);
      }
      if (HasXboxControllerSupport) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) XboxControllerSupport);
      }
      if (HasVrSupported) {
        output.WriteRawTag(128, 2);
        output.WriteBool(VrSupported);
      }
      if (HasMetacriticScore) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(MetacriticScore);
      }
      if (HasSizeOnDisk) {
        output.WriteRawTag(168, 2);
        output.WriteUInt64(SizeOnDisk);
      }
      if (HasThirdPartyMod) {
        output.WriteRawTag(176, 2);
        output.WriteBool(ThirdPartyMod);
      }
      if (HasIconData) {
        output.WriteRawTag(186, 2);
        output.WriteString(IconData);
      }
      if (HasIconDataFormat) {
        output.WriteRawTag(194, 2);
        output.WriteString(IconDataFormat);
      }
      if (HasGameid) {
        output.WriteRawTag(202, 2);
        output.WriteString(Gameid);
      }
      if (HasLibraryCapsuleFilename) {
        output.WriteRawTag(210, 2);
        output.WriteString(LibraryCapsuleFilename);
      }
      perClientData_.WriteTo(ref output, _repeated_perClientData_codec);
      if (HasMostAvailableClientid) {
        output.WriteRawTag(224, 2);
        output.WriteUInt64(MostAvailableClientid);
      }
      if (HasSelectedClientid) {
        output.WriteRawTag(232, 2);
        output.WriteUInt64(SelectedClientid);
      }
      if (HasRtStoreAssetMtime) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(RtStoreAssetMtime);
      }
      if (HasRtCustomImageMtime) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(RtCustomImageMtime);
      }
      if (HasOptionalParentAppId) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(OptionalParentAppId);
      }
      if (HasOwnerAccountId) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(OwnerAccountId);
      }
      if (HasReviewScoreWithBombs) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(ReviewScoreWithBombs);
      }
      if (HasReviewPercentageWithBombs) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(ReviewPercentageWithBombs);
      }
      if (HasReviewScoreWithoutBombs) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(ReviewScoreWithoutBombs);
      }
      if (HasReviewPercentageWithoutBombs) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(ReviewPercentageWithoutBombs);
      }
      if (HasLibraryId) {
        output.WriteRawTag(202, 3);
        output.WriteString(LibraryId);
      }
      if (HasVrOnly) {
        output.WriteRawTag(208, 3);
        output.WriteBool(VrOnly);
      }
      if (HasMastersubAppid) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(MastersubAppid);
      }
      if (HasMastersubIncludedwithLogo) {
        output.WriteRawTag(226, 3);
        output.WriteString(MastersubIncludedwithLogo);
      }
      if (HasSiteLicenseSiteName) {
        output.WriteRawTag(242, 3);
        output.WriteString(SiteLicenseSiteName);
      }
      if (HasShortcutOverrideAppid) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(ShortcutOverrideAppid);
      }
      if (HasRtLastTimeLocallyPlayed) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(RtLastTimeLocallyPlayed);
      }
      if (HasRtPurchasedTime) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(RtPurchasedTime);
      }
      if (HasHeaderFilename) {
        output.WriteRawTag(154, 4);
        output.WriteString(HeaderFilename);
      }
      if (HasLocalCacheVersion) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(LocalCacheVersion);
      }
      if (HasNumberOfCopies) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(NumberOfCopies);
      }
      if (HasSteamHwCompatCategoryPacked) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(SteamHwCompatCategoryPacked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAppid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
      }
      if (HasDisplayName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (HasVisibleInGameList) {
        size += 1 + 1;
      }
      if (HasSubscribedTo) {
        size += 1 + 1;
      }
      if (HasSortAs) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SortAs);
      }
      if (HasAppType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AppType);
      }
      if (HasMruIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MruIndex);
      }
      if (HasRtRecentActivityTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RtRecentActivityTime);
      }
      if (HasMinutesPlaytimeForever) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinutesPlaytimeForever);
      }
      if (HasMinutesPlaytimeLastTwoWeeks) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinutesPlaytimeLastTwoWeeks);
      }
      if (HasRtLastTimePlayed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RtLastTimePlayed);
      }
      size += storeTag_.CalculateSize(_repeated_storeTag_codec);
      size += storeCategory_.CalculateSize(_repeated_storeCategory_codec);
      if (HasRtOriginalReleaseDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RtOriginalReleaseDate);
      }
      if (HasRtSteamReleaseDate) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RtSteamReleaseDate);
      }
      if (HasIconHash) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IconHash);
      }
      if (HasXboxControllerSupport) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) XboxControllerSupport);
      }
      if (HasVrSupported) {
        size += 2 + 1;
      }
      if (HasMetacriticScore) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MetacriticScore);
      }
      if (HasSizeOnDisk) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SizeOnDisk);
      }
      if (HasThirdPartyMod) {
        size += 2 + 1;
      }
      if (HasIconData) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IconData);
      }
      if (HasIconDataFormat) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IconDataFormat);
      }
      if (HasGameid) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Gameid);
      }
      if (HasLibraryCapsuleFilename) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LibraryCapsuleFilename);
      }
      size += perClientData_.CalculateSize(_repeated_perClientData_codec);
      if (HasMostAvailableClientid) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MostAvailableClientid);
      }
      if (HasSelectedClientid) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SelectedClientid);
      }
      if (HasRtStoreAssetMtime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RtStoreAssetMtime);
      }
      if (HasRtCustomImageMtime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RtCustomImageMtime);
      }
      if (HasOptionalParentAppId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OptionalParentAppId);
      }
      if (HasOwnerAccountId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OwnerAccountId);
      }
      if (HasReviewScoreWithBombs) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviewScoreWithBombs);
      }
      if (HasReviewPercentageWithBombs) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviewPercentageWithBombs);
      }
      if (HasReviewScoreWithoutBombs) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviewScoreWithoutBombs);
      }
      if (HasReviewPercentageWithoutBombs) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviewPercentageWithoutBombs);
      }
      if (HasLibraryId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LibraryId);
      }
      if (HasVrOnly) {
        size += 2 + 1;
      }
      if (HasMastersubAppid) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MastersubAppid);
      }
      if (HasMastersubIncludedwithLogo) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MastersubIncludedwithLogo);
      }
      if (HasSiteLicenseSiteName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SiteLicenseSiteName);
      }
      if (HasShortcutOverrideAppid) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ShortcutOverrideAppid);
      }
      if (HasRtLastTimeLocallyPlayed) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RtLastTimeLocallyPlayed);
      }
      if (HasRtPurchasedTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RtPurchasedTime);
      }
      if (HasHeaderFilename) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeaderFilename);
      }
      if (HasLocalCacheVersion) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LocalCacheVersion);
      }
      if (HasNumberOfCopies) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfCopies);
      }
      if (HasSteamHwCompatCategoryPacked) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SteamHwCompatCategoryPacked);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CAppOverview other) {
      if (other == null) {
        return;
      }
      if (other.HasAppid) {
        Appid = other.Appid;
      }
      if (other.HasDisplayName) {
        DisplayName = other.DisplayName;
      }
      if (other.HasVisibleInGameList) {
        VisibleInGameList = other.VisibleInGameList;
      }
      if (other.HasSubscribedTo) {
        SubscribedTo = other.SubscribedTo;
      }
      if (other.HasSortAs) {
        SortAs = other.SortAs;
      }
      if (other.HasAppType) {
        AppType = other.AppType;
      }
      if (other.HasMruIndex) {
        MruIndex = other.MruIndex;
      }
      if (other.HasRtRecentActivityTime) {
        RtRecentActivityTime = other.RtRecentActivityTime;
      }
      if (other.HasMinutesPlaytimeForever) {
        MinutesPlaytimeForever = other.MinutesPlaytimeForever;
      }
      if (other.HasMinutesPlaytimeLastTwoWeeks) {
        MinutesPlaytimeLastTwoWeeks = other.MinutesPlaytimeLastTwoWeeks;
      }
      if (other.HasRtLastTimePlayed) {
        RtLastTimePlayed = other.RtLastTimePlayed;
      }
      storeTag_.Add(other.storeTag_);
      storeCategory_.Add(other.storeCategory_);
      if (other.HasRtOriginalReleaseDate) {
        RtOriginalReleaseDate = other.RtOriginalReleaseDate;
      }
      if (other.HasRtSteamReleaseDate) {
        RtSteamReleaseDate = other.RtSteamReleaseDate;
      }
      if (other.HasIconHash) {
        IconHash = other.IconHash;
      }
      if (other.HasXboxControllerSupport) {
        XboxControllerSupport = other.XboxControllerSupport;
      }
      if (other.HasVrSupported) {
        VrSupported = other.VrSupported;
      }
      if (other.HasMetacriticScore) {
        MetacriticScore = other.MetacriticScore;
      }
      if (other.HasSizeOnDisk) {
        SizeOnDisk = other.SizeOnDisk;
      }
      if (other.HasThirdPartyMod) {
        ThirdPartyMod = other.ThirdPartyMod;
      }
      if (other.HasIconData) {
        IconData = other.IconData;
      }
      if (other.HasIconDataFormat) {
        IconDataFormat = other.IconDataFormat;
      }
      if (other.HasGameid) {
        Gameid = other.Gameid;
      }
      if (other.HasLibraryCapsuleFilename) {
        LibraryCapsuleFilename = other.LibraryCapsuleFilename;
      }
      perClientData_.Add(other.perClientData_);
      if (other.HasMostAvailableClientid) {
        MostAvailableClientid = other.MostAvailableClientid;
      }
      if (other.HasSelectedClientid) {
        SelectedClientid = other.SelectedClientid;
      }
      if (other.HasRtStoreAssetMtime) {
        RtStoreAssetMtime = other.RtStoreAssetMtime;
      }
      if (other.HasRtCustomImageMtime) {
        RtCustomImageMtime = other.RtCustomImageMtime;
      }
      if (other.HasOptionalParentAppId) {
        OptionalParentAppId = other.OptionalParentAppId;
      }
      if (other.HasOwnerAccountId) {
        OwnerAccountId = other.OwnerAccountId;
      }
      if (other.HasReviewScoreWithBombs) {
        ReviewScoreWithBombs = other.ReviewScoreWithBombs;
      }
      if (other.HasReviewPercentageWithBombs) {
        ReviewPercentageWithBombs = other.ReviewPercentageWithBombs;
      }
      if (other.HasReviewScoreWithoutBombs) {
        ReviewScoreWithoutBombs = other.ReviewScoreWithoutBombs;
      }
      if (other.HasReviewPercentageWithoutBombs) {
        ReviewPercentageWithoutBombs = other.ReviewPercentageWithoutBombs;
      }
      if (other.HasLibraryId) {
        LibraryId = other.LibraryId;
      }
      if (other.HasVrOnly) {
        VrOnly = other.VrOnly;
      }
      if (other.HasMastersubAppid) {
        MastersubAppid = other.MastersubAppid;
      }
      if (other.HasMastersubIncludedwithLogo) {
        MastersubIncludedwithLogo = other.MastersubIncludedwithLogo;
      }
      if (other.HasSiteLicenseSiteName) {
        SiteLicenseSiteName = other.SiteLicenseSiteName;
      }
      if (other.HasShortcutOverrideAppid) {
        ShortcutOverrideAppid = other.ShortcutOverrideAppid;
      }
      if (other.HasRtLastTimeLocallyPlayed) {
        RtLastTimeLocallyPlayed = other.RtLastTimeLocallyPlayed;
      }
      if (other.HasRtPurchasedTime) {
        RtPurchasedTime = other.RtPurchasedTime;
      }
      if (other.HasHeaderFilename) {
        HeaderFilename = other.HeaderFilename;
      }
      if (other.HasLocalCacheVersion) {
        LocalCacheVersion = other.LocalCacheVersion;
      }
      if (other.HasNumberOfCopies) {
        NumberOfCopies = other.NumberOfCopies;
      }
      if (other.HasSteamHwCompatCategoryPacked) {
        SteamHwCompatCategoryPacked = other.SteamHwCompatCategoryPacked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Appid = input.ReadUInt32();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 32: {
            VisibleInGameList = input.ReadBool();
            break;
          }
          case 40: {
            SubscribedTo = input.ReadBool();
            break;
          }
          case 50: {
            SortAs = input.ReadString();
            break;
          }
          case 56: {
            AppType = (global::OpenSteamworks.Protobuf.EProtoAppType) input.ReadEnum();
            break;
          }
          case 104: {
            MruIndex = input.ReadUInt32();
            break;
          }
          case 112: {
            RtRecentActivityTime = input.ReadUInt32();
            break;
          }
          case 128: {
            MinutesPlaytimeForever = input.ReadUInt32();
            break;
          }
          case 136: {
            MinutesPlaytimeLastTwoWeeks = input.ReadUInt32();
            break;
          }
          case 144: {
            RtLastTimePlayed = input.ReadUInt32();
            break;
          }
          case 154:
          case 152: {
            storeTag_.AddEntriesFrom(input, _repeated_storeTag_codec);
            break;
          }
          case 186:
          case 184: {
            storeCategory_.AddEntriesFrom(input, _repeated_storeCategory_codec);
            break;
          }
          case 200: {
            RtOriginalReleaseDate = input.ReadUInt32();
            break;
          }
          case 208: {
            RtSteamReleaseDate = input.ReadUInt32();
            break;
          }
          case 218: {
            IconHash = input.ReadString();
            break;
          }
          case 248: {
            XboxControllerSupport = (global::OpenSteamworks.Protobuf.EAppControllerSupportLevel) input.ReadEnum();
            break;
          }
          case 256: {
            VrSupported = input.ReadBool();
            break;
          }
          case 288: {
            MetacriticScore = input.ReadUInt32();
            break;
          }
          case 296: {
            SizeOnDisk = input.ReadUInt64();
            break;
          }
          case 304: {
            ThirdPartyMod = input.ReadBool();
            break;
          }
          case 314: {
            IconData = input.ReadString();
            break;
          }
          case 322: {
            IconDataFormat = input.ReadString();
            break;
          }
          case 330: {
            Gameid = input.ReadString();
            break;
          }
          case 338: {
            LibraryCapsuleFilename = input.ReadString();
            break;
          }
          case 346: {
            perClientData_.AddEntriesFrom(input, _repeated_perClientData_codec);
            break;
          }
          case 352: {
            MostAvailableClientid = input.ReadUInt64();
            break;
          }
          case 360: {
            SelectedClientid = input.ReadUInt64();
            break;
          }
          case 368: {
            RtStoreAssetMtime = input.ReadUInt32();
            break;
          }
          case 376: {
            RtCustomImageMtime = input.ReadUInt32();
            break;
          }
          case 384: {
            OptionalParentAppId = input.ReadUInt32();
            break;
          }
          case 392: {
            OwnerAccountId = input.ReadUInt32();
            break;
          }
          case 424: {
            ReviewScoreWithBombs = input.ReadUInt32();
            break;
          }
          case 432: {
            ReviewPercentageWithBombs = input.ReadUInt32();
            break;
          }
          case 440: {
            ReviewScoreWithoutBombs = input.ReadUInt32();
            break;
          }
          case 448: {
            ReviewPercentageWithoutBombs = input.ReadUInt32();
            break;
          }
          case 458: {
            LibraryId = input.ReadString();
            break;
          }
          case 464: {
            VrOnly = input.ReadBool();
            break;
          }
          case 472: {
            MastersubAppid = input.ReadUInt32();
            break;
          }
          case 482: {
            MastersubIncludedwithLogo = input.ReadString();
            break;
          }
          case 498: {
            SiteLicenseSiteName = input.ReadString();
            break;
          }
          case 504: {
            ShortcutOverrideAppid = input.ReadUInt32();
            break;
          }
          case 520: {
            RtLastTimeLocallyPlayed = input.ReadUInt32();
            break;
          }
          case 528: {
            RtPurchasedTime = input.ReadUInt32();
            break;
          }
          case 538: {
            HeaderFilename = input.ReadString();
            break;
          }
          case 544: {
            LocalCacheVersion = input.ReadUInt32();
            break;
          }
          case 576: {
            NumberOfCopies = input.ReadUInt32();
            break;
          }
          case 584: {
            SteamHwCompatCategoryPacked = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Appid = input.ReadUInt32();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 32: {
            VisibleInGameList = input.ReadBool();
            break;
          }
          case 40: {
            SubscribedTo = input.ReadBool();
            break;
          }
          case 50: {
            SortAs = input.ReadString();
            break;
          }
          case 56: {
            AppType = (global::OpenSteamworks.Protobuf.EProtoAppType) input.ReadEnum();
            break;
          }
          case 104: {
            MruIndex = input.ReadUInt32();
            break;
          }
          case 112: {
            RtRecentActivityTime = input.ReadUInt32();
            break;
          }
          case 128: {
            MinutesPlaytimeForever = input.ReadUInt32();
            break;
          }
          case 136: {
            MinutesPlaytimeLastTwoWeeks = input.ReadUInt32();
            break;
          }
          case 144: {
            RtLastTimePlayed = input.ReadUInt32();
            break;
          }
          case 154:
          case 152: {
            storeTag_.AddEntriesFrom(ref input, _repeated_storeTag_codec);
            break;
          }
          case 186:
          case 184: {
            storeCategory_.AddEntriesFrom(ref input, _repeated_storeCategory_codec);
            break;
          }
          case 200: {
            RtOriginalReleaseDate = input.ReadUInt32();
            break;
          }
          case 208: {
            RtSteamReleaseDate = input.ReadUInt32();
            break;
          }
          case 218: {
            IconHash = input.ReadString();
            break;
          }
          case 248: {
            XboxControllerSupport = (global::OpenSteamworks.Protobuf.EAppControllerSupportLevel) input.ReadEnum();
            break;
          }
          case 256: {
            VrSupported = input.ReadBool();
            break;
          }
          case 288: {
            MetacriticScore = input.ReadUInt32();
            break;
          }
          case 296: {
            SizeOnDisk = input.ReadUInt64();
            break;
          }
          case 304: {
            ThirdPartyMod = input.ReadBool();
            break;
          }
          case 314: {
            IconData = input.ReadString();
            break;
          }
          case 322: {
            IconDataFormat = input.ReadString();
            break;
          }
          case 330: {
            Gameid = input.ReadString();
            break;
          }
          case 338: {
            LibraryCapsuleFilename = input.ReadString();
            break;
          }
          case 346: {
            perClientData_.AddEntriesFrom(ref input, _repeated_perClientData_codec);
            break;
          }
          case 352: {
            MostAvailableClientid = input.ReadUInt64();
            break;
          }
          case 360: {
            SelectedClientid = input.ReadUInt64();
            break;
          }
          case 368: {
            RtStoreAssetMtime = input.ReadUInt32();
            break;
          }
          case 376: {
            RtCustomImageMtime = input.ReadUInt32();
            break;
          }
          case 384: {
            OptionalParentAppId = input.ReadUInt32();
            break;
          }
          case 392: {
            OwnerAccountId = input.ReadUInt32();
            break;
          }
          case 424: {
            ReviewScoreWithBombs = input.ReadUInt32();
            break;
          }
          case 432: {
            ReviewPercentageWithBombs = input.ReadUInt32();
            break;
          }
          case 440: {
            ReviewScoreWithoutBombs = input.ReadUInt32();
            break;
          }
          case 448: {
            ReviewPercentageWithoutBombs = input.ReadUInt32();
            break;
          }
          case 458: {
            LibraryId = input.ReadString();
            break;
          }
          case 464: {
            VrOnly = input.ReadBool();
            break;
          }
          case 472: {
            MastersubAppid = input.ReadUInt32();
            break;
          }
          case 482: {
            MastersubIncludedwithLogo = input.ReadString();
            break;
          }
          case 498: {
            SiteLicenseSiteName = input.ReadString();
            break;
          }
          case 504: {
            ShortcutOverrideAppid = input.ReadUInt32();
            break;
          }
          case 520: {
            RtLastTimeLocallyPlayed = input.ReadUInt32();
            break;
          }
          case 528: {
            RtPurchasedTime = input.ReadUInt32();
            break;
          }
          case 538: {
            HeaderFilename = input.ReadString();
            break;
          }
          case 544: {
            LocalCacheVersion = input.ReadUInt32();
            break;
          }
          case 576: {
            NumberOfCopies = input.ReadUInt32();
            break;
          }
          case 584: {
            SteamHwCompatCategoryPacked = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CAppOverview_Change : pb::IMessage<CAppOverview_Change>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAppOverview_Change> _parser = new pb::MessageParser<CAppOverview_Change>(() => new CAppOverview_Change());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CAppOverview_Change> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.SteammessagesAppoverviewReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview_Change() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview_Change(CAppOverview_Change other) : this() {
      _hasBits0 = other._hasBits0;
      appOverview_ = other.appOverview_.Clone();
      removedAppid_ = other.removedAppid_.Clone();
      fullUpdate_ = other.fullUpdate_;
      updateComplete_ = other.updateComplete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppOverview_Change Clone() {
      return new CAppOverview_Change(this);
    }

    /// <summary>Field number for the "app_overview" field.</summary>
    public const int AppOverviewFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CAppOverview> _repeated_appOverview_codec
        = pb::FieldCodec.ForMessage(10, global::OpenSteamworks.Protobuf.CAppOverview.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppOverview> appOverview_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppOverview>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppOverview> AppOverview {
      get { return appOverview_; }
    }

    /// <summary>Field number for the "removed_appid" field.</summary>
    public const int RemovedAppidFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_removedAppid_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> removedAppid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> RemovedAppid {
      get { return removedAppid_; }
    }

    /// <summary>Field number for the "full_update" field.</summary>
    public const int FullUpdateFieldNumber = 3;
    private readonly static bool FullUpdateDefaultValue = false;

    private bool fullUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FullUpdate {
      get { if ((_hasBits0 & 1) != 0) { return fullUpdate_; } else { return FullUpdateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fullUpdate_ = value;
      }
    }
    /// <summary>Gets whether the "full_update" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFullUpdate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "full_update" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFullUpdate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "update_complete" field.</summary>
    public const int UpdateCompleteFieldNumber = 4;
    private readonly static bool UpdateCompleteDefaultValue = false;

    private bool updateComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UpdateComplete {
      get { if ((_hasBits0 & 2) != 0) { return updateComplete_; } else { return UpdateCompleteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        updateComplete_ = value;
      }
    }
    /// <summary>Gets whether the "update_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpdateComplete {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "update_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpdateComplete() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CAppOverview_Change);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CAppOverview_Change other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!appOverview_.Equals(other.appOverview_)) return false;
      if(!removedAppid_.Equals(other.removedAppid_)) return false;
      if (FullUpdate != other.FullUpdate) return false;
      if (UpdateComplete != other.UpdateComplete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= appOverview_.GetHashCode();
      hash ^= removedAppid_.GetHashCode();
      if (HasFullUpdate) hash ^= FullUpdate.GetHashCode();
      if (HasUpdateComplete) hash ^= UpdateComplete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      appOverview_.WriteTo(output, _repeated_appOverview_codec);
      removedAppid_.WriteTo(output, _repeated_removedAppid_codec);
      if (HasFullUpdate) {
        output.WriteRawTag(24);
        output.WriteBool(FullUpdate);
      }
      if (HasUpdateComplete) {
        output.WriteRawTag(32);
        output.WriteBool(UpdateComplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      appOverview_.WriteTo(ref output, _repeated_appOverview_codec);
      removedAppid_.WriteTo(ref output, _repeated_removedAppid_codec);
      if (HasFullUpdate) {
        output.WriteRawTag(24);
        output.WriteBool(FullUpdate);
      }
      if (HasUpdateComplete) {
        output.WriteRawTag(32);
        output.WriteBool(UpdateComplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += appOverview_.CalculateSize(_repeated_appOverview_codec);
      size += removedAppid_.CalculateSize(_repeated_removedAppid_codec);
      if (HasFullUpdate) {
        size += 1 + 1;
      }
      if (HasUpdateComplete) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CAppOverview_Change other) {
      if (other == null) {
        return;
      }
      appOverview_.Add(other.appOverview_);
      removedAppid_.Add(other.removedAppid_);
      if (other.HasFullUpdate) {
        FullUpdate = other.FullUpdate;
      }
      if (other.HasUpdateComplete) {
        UpdateComplete = other.UpdateComplete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            appOverview_.AddEntriesFrom(input, _repeated_appOverview_codec);
            break;
          }
          case 18:
          case 16: {
            removedAppid_.AddEntriesFrom(input, _repeated_removedAppid_codec);
            break;
          }
          case 24: {
            FullUpdate = input.ReadBool();
            break;
          }
          case 32: {
            UpdateComplete = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            appOverview_.AddEntriesFrom(ref input, _repeated_appOverview_codec);
            break;
          }
          case 18:
          case 16: {
            removedAppid_.AddEntriesFrom(ref input, _repeated_removedAppid_codec);
            break;
          }
          case 24: {
            FullUpdate = input.ReadBool();
            break;
          }
          case 32: {
            UpdateComplete = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CAppBootstrapData : pb::IMessage<CAppBootstrapData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CAppBootstrapData> _parser = new pb::MessageParser<CAppBootstrapData>(() => new CAppBootstrapData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CAppBootstrapData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.SteammessagesAppoverviewReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppBootstrapData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppBootstrapData(CAppBootstrapData other) : this() {
      _hasBits0 = other._hasBits0;
      appid_ = other.appid_;
      hidden_ = other.hidden_;
      userTag_ = other.userTag_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CAppBootstrapData Clone() {
      return new CAppBootstrapData(this);
    }

    /// <summary>Field number for the "appid" field.</summary>
    public const int AppidFieldNumber = 1;
    private readonly static uint AppidDefaultValue = 0;

    private uint appid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Appid {
      get { if ((_hasBits0 & 1) != 0) { return appid_; } else { return AppidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        appid_ = value;
      }
    }
    /// <summary>Gets whether the "appid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAppid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "appid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAppid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 2;
    private readonly static bool HiddenDefaultValue = false;

    private bool hidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hidden {
      get { if ((_hasBits0 & 2) != 0) { return hidden_; } else { return HiddenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        hidden_ = value;
      }
    }
    /// <summary>Gets whether the "hidden" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHidden {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "hidden" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHidden() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "user_tag" field.</summary>
    public const int UserTagFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_userTag_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> userTag_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> UserTag {
      get { return userTag_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CAppBootstrapData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CAppBootstrapData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Appid != other.Appid) return false;
      if (Hidden != other.Hidden) return false;
      if(!userTag_.Equals(other.userTag_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAppid) hash ^= Appid.GetHashCode();
      if (HasHidden) hash ^= Hidden.GetHashCode();
      hash ^= userTag_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAppid) {
        output.WriteRawTag(8);
        output.WriteUInt32(Appid);
      }
      if (HasHidden) {
        output.WriteRawTag(16);
        output.WriteBool(Hidden);
      }
      userTag_.WriteTo(output, _repeated_userTag_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAppid) {
        output.WriteRawTag(8);
        output.WriteUInt32(Appid);
      }
      if (HasHidden) {
        output.WriteRawTag(16);
        output.WriteBool(Hidden);
      }
      userTag_.WriteTo(ref output, _repeated_userTag_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAppid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Appid);
      }
      if (HasHidden) {
        size += 1 + 1;
      }
      size += userTag_.CalculateSize(_repeated_userTag_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CAppBootstrapData other) {
      if (other == null) {
        return;
      }
      if (other.HasAppid) {
        Appid = other.Appid;
      }
      if (other.HasHidden) {
        Hidden = other.Hidden;
      }
      userTag_.Add(other.userTag_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Appid = input.ReadUInt32();
            break;
          }
          case 16: {
            Hidden = input.ReadBool();
            break;
          }
          case 26: {
            userTag_.AddEntriesFrom(input, _repeated_userTag_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Appid = input.ReadUInt32();
            break;
          }
          case 16: {
            Hidden = input.ReadBool();
            break;
          }
          case 26: {
            userTag_.AddEntriesFrom(ref input, _repeated_userTag_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CLibraryBootstrapData : pb::IMessage<CLibraryBootstrapData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CLibraryBootstrapData> _parser = new pb::MessageParser<CLibraryBootstrapData>(() => new CLibraryBootstrapData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CLibraryBootstrapData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenSteamworks.Protobuf.SteammessagesAppoverviewReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CLibraryBootstrapData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CLibraryBootstrapData(CLibraryBootstrapData other) : this() {
      appData_ = other.appData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CLibraryBootstrapData Clone() {
      return new CLibraryBootstrapData(this);
    }

    /// <summary>Field number for the "app_data" field.</summary>
    public const int AppDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OpenSteamworks.Protobuf.CAppBootstrapData> _repeated_appData_codec
        = pb::FieldCodec.ForMessage(10, global::OpenSteamworks.Protobuf.CAppBootstrapData.Parser);
    private readonly pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppBootstrapData> appData_ = new pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppBootstrapData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenSteamworks.Protobuf.CAppBootstrapData> AppData {
      get { return appData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CLibraryBootstrapData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CLibraryBootstrapData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!appData_.Equals(other.appData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= appData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      appData_.WriteTo(output, _repeated_appData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      appData_.WriteTo(ref output, _repeated_appData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += appData_.CalculateSize(_repeated_appData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CLibraryBootstrapData other) {
      if (other == null) {
        return;
      }
      appData_.Add(other.appData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            appData_.AddEntriesFrom(input, _repeated_appData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            appData_.AddEntriesFrom(ref input, _repeated_appData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
